ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_1_initVar
  18              		.bss
  19              		.type	ADC_1_initVar, %object
  20              		.size	ADC_1_initVar, 1
  21              	ADC_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_1_offset,4,4
  24              		.comm	ADC_1_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_1_channelsConfig, %object
  28              		.size	ADC_1_channelsConfig, 8
  29              	ADC_1_channelsConfig:
  30 0000 02040000 		.word	1026
  31 0004 00040000 		.word	1024
  32              		.section	.text.ADC_1_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_1_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_1_Start, %function
  38              	ADC_1_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_1.c"
   1:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_1.c **** * File Name: ADC_1.c
   3:.\Generated_Source\PSoC4/ADC_1.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_1.c **** 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 2


  18:.\Generated_Source\PSoC4/ADC_1.c **** #include "ADC_1.h"
  19:.\Generated_Source\PSoC4/ADC_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_1.c **** uint8 ADC_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_1.c **** volatile int16 ADC_1_offset[ADC_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_1.c **** volatile int32 ADC_1_countsPer10Volt[ADC_1_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_1.c **** static const uint32 CYCODE ADC_1_channelsConfig[] = { 0x00000402u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Start
  38:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_1.c **** *  to zero before call of ADC_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Init() and ADC_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_1.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_1.c ****     if(ADC_1_initVar == 0u)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_1_Init
  69:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_1_Enable
  72:.\Generated_Source\PSoC4/ADC_1.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_1_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_1_Start, .-ADC_1_Start
  74              		.section	.text.ADC_1_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_1_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_1_Init, %function
  80              	ADC_1_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Init
  77:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start().
  83:.\Generated_Source\PSoC4/ADC_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 4


  91:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_1.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_1.c ****         static const uint8 CYCODE ADC_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)(ADC_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)ADC_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_1.c ****             ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_1.c ****              (uint8)ADC_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 5


 137:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC_1.c ****         };
 168:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC_1.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC_1.c ****         CyIntSetPriority(ADC_1_INTC_NUMBER, ADC_1_INTC_PRIOR_NUMBER);
  93              		.loc 1 172 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC_1.c ****         (void)CyIntSetVector(ADC_1_INTC_NUMBER, &ADC_1_ISR);
  97              		.loc 1 173 0
  98 000e 744B     		ldr	r3, .L20
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC_1.c ****     #endif   /* End ADC_1_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC_1.c **** 
 176:.\Generated_Source\PSoC4/ADC_1.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = ADC_1_DEFAULT_EN_CHANNELS;
 102              		.loc 1 177 0
 103 0018 724B     		ldr	r3, .L20+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 106              		.loc 1 178 0
 107 001e 724B     		ldr	r3, .L20+8
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 6


 108 0020 714A     		ldr	r2, .L20+8
 109 0022 1168     		ldr	r1, [r2]
 179:.\Generated_Source\PSoC4/ADC_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC_1.c ****         (((ADC_1_PUMP_CTRL_REG & ADC_1_PUMP_CTRL_ENABLED) != 0u) ? 
 110              		.loc 1 180 0
 111 0024 714A     		ldr	r2, .L20+12
 112 0026 1268     		ldr	r2, [r2]
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 113              		.loc 1 178 0
 114 0028 002A     		cmp	r2, #0
 115 002a 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 178 0 is_stmt 0 discriminator 1
 117 002c 704A     		ldr	r2, .L20+16
 118 002e 00E0     		b	.L7
 119              	.L6:
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 120              		.loc 1 178 0 discriminator 2
 121 0030 704A     		ldr	r2, .L20+20
 122              	.L7:
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 123              		.loc 1 178 0 discriminator 3
 124 0032 0A43     		orr	r2, r1
 125 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_CTRL_REG = ADC_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 126              		.loc 1 182 0 is_stmt 1 discriminator 3
 127 0036 704B     		ldr	r3, .L20+24
 128 0038 704A     		ldr	r2, .L20+28
 129 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG = ADC_1_DEFAULT_RANGE_THRES_REG_CFG;
 130              		.loc 1 183 0 discriminator 3
 131 003c 704B     		ldr	r3, .L20+32
 132 003e 714A     		ldr	r2, .L20+36
 133 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_COND_REG  = ADC_1_COMPARE_MODE;
 134              		.loc 1 184 0 discriminator 3
 135 0042 714B     		ldr	r3, .L20+40
 136 0044 8022     		mov	r2, #128
 137 0046 D205     		lsl	r2, r2, #23
 138 0048 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME01_REG = ADC_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 139              		.loc 1 185 0 discriminator 3
 140 004a 704B     		ldr	r3, .L20+44
 141 004c 704A     		ldr	r2, .L20+48
 142 004e 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME23_REG = ADC_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 143              		.loc 1 186 0 discriminator 3
 144 0050 704B     		ldr	r3, .L20+52
 145 0052 6F4A     		ldr	r2, .L20+48
 146 0054 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_1.c ****     
 188:.\Generated_Source\PSoC4/ADC_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_MUX_SWITCH0_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 147              		.loc 1 190 0 discriminator 3
 148 0056 704B     		ldr	r3, .L20+56
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 7


 149 0058 6F4A     		ldr	r2, .L20+56
 150 005a 1268     		ldr	r2, [r2]
 151 005c 8021     		mov	r1, #128
 152 005e 4902     		lsl	r1, r1, #9
 153 0060 0A43     		orr	r2, r1
 154 0062 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_MUX_SWITCH_HW_CTRL_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 155              		.loc 1 193 0 discriminator 3
 156 0064 6D4B     		ldr	r3, .L20+60
 157 0066 6D4A     		ldr	r2, .L20+60
 158 0068 1268     		ldr	r2, [r2]
 159 006a 8021     		mov	r1, #128
 160 006c 4902     		lsl	r1, r1, #9
 161 006e 0A43     		orr	r2, r1
 162 0070 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /*ADC_1_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 163              		.loc 1 197 0 discriminator 3
 164 0072 6B4B     		ldr	r3, .L20+64
 165 0074 0022     		mov	r2, #0
 166 0076 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = 0u;
 167              		.loc 1 198 0 discriminator 3
 168 0078 6A4B     		ldr	r3, .L20+68
 169 007a 0022     		mov	r2, #0
 170 007c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_INTR_MASK_REG = ADC_1_SAR_INTR_MASK;
 171              		.loc 1 199 0 discriminator 3
 172 007e 6A4B     		ldr	r3, .L20+72
 173 0080 1122     		mov	r2, #17
 174 0082 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_1.c **** 
 201:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_ANA_TRIM_REG = ADC_1_TRIM_COEF;
 175              		.loc 1 202 0 discriminator 3
 176 0084 694B     		ldr	r3, .L20+76
 177 0086 0222     		mov	r2, #2
 178 0088 1A60     		str	r2, [r3]
 203:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC_1.c **** 
 205:.\Generated_Source\PSoC4/ADC_1.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal = ADC_1_SAR_DFT_CTRL_REG;
 179              		.loc 1 206 0 discriminator 3
 180 008a 694B     		ldr	r3, .L20+80
 181 008c 1B68     		ldr	r3, [r3]
 182 008e 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal &= (uint32)~ADC_1_DCEN;
 183              		.loc 1 207 0 discriminator 3
 184 0090 7A68     		ldr	r2, [r7, #4]
 185 0092 684B     		ldr	r3, .L20+84
 186 0094 1340     		and	r3, r2
 187 0096 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC_1.c ****     
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 8


 209:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_NOMINAL_CLOCK_FREQ > (ADC_1_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC_1.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 188              		.loc 1 213 0 discriminator 3
 189 0098 7B68     		ldr	r3, [r7, #4]
 190 009a 0122     		mov	r2, #1
 191 009c 1343     		orr	r3, r2
 192 009e 7B60     		str	r3, [r7, #4]
 214:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC_1.c ****     #else
 216:.\Generated_Source\PSoC4/ADC_1.c ****         #if ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC_1.c ****              (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 220:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DCEN;
 221:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)~ADC_1_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC_1.c ****                    (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC_1.c ****     
 226:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_DFT_CTRL_REG = tmpRegVal;
 193              		.loc 1 226 0 discriminator 3
 194 00a0 634B     		ldr	r3, .L20+80
 195 00a2 7A68     		ldr	r2, [r7, #4]
 196 00a4 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC_1.c **** 
 228:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_WOUNDING_REG = ADC_1_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC_1.c **** 
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 197              		.loc 1 232 0 discriminator 3
 198 00a6 0023     		mov	r3, #0
 199 00a8 FB60     		str	r3, [r7, #12]
 200 00aa 92E0     		b	.L8
 201              	.L19:
 233:.\Generated_Source\PSoC4/ADC_1.c ****     {
 234:.\Generated_Source\PSoC4/ADC_1.c ****         tmpRegVal = (ADC_1_channelsConfig[chNum] & ADC_1_CHANNEL_CONFIG_MASK);
 202              		.loc 1 234 0
 203 00ac 624B     		ldr	r3, .L20+88
 204 00ae FA68     		ldr	r2, [r7, #12]
 205 00b0 9200     		lsl	r2, r2, #2
 206 00b2 D258     		ldr	r2, [r2, r3]
 207 00b4 DC23     		mov	r3, #220
 208 00b6 9B01     		lsl	r3, r3, #6
 209 00b8 1340     		and	r3, r2
 210 00ba 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_InputsPlacement[chNum];
 211              		.loc 1 236 0
 212 00bc 5F4A     		ldr	r2, .L20+92
 213 00be FB68     		ldr	r3, [r7, #12]
 214 00c0 D318     		add	r3, r2, r3
 215 00c2 1B78     		ldrb	r3, [r3]
 216 00c4 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 9


 217 00c6 1343     		orr	r3, r2
 218 00c8 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC_1.c ****         
 239:.\Generated_Source\PSoC4/ADC_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC_1.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC_1.c ****         */
 244:.\Generated_Source\PSoC4/ADC_1.c ****         #if((ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC_1.c ****             (ADC_1_ALT_WOUNDING == ADC_1_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)(~ADC_1_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC_1.c **** 
 249:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC_1.c ****         if(chNum < ADC_1_SEQUENCED_CHANNELS_NUM)
 219              		.loc 1 250 0
 220 00ca FB68     		ldr	r3, [r7, #12]
 221 00cc 002B     		cmp	r3, #0
 222 00ce 2AD1     		bne	.L9
 251:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_1.c ****             CY_SET_REG32((reg32 *)(ADC_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 223              		.loc 1 253 0
 224 00d0 FB68     		ldr	r3, [r7, #12]
 225 00d2 9B00     		lsl	r3, r3, #2
 226 00d4 5A4A     		ldr	r2, .L20+96
 227 00d6 9B18     		add	r3, r3, r2
 228 00d8 7A68     		ldr	r2, [r7, #4]
 229 00da 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC_1.c **** 
 255:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 230              		.loc 1 255 0
 231 00dc 564B     		ldr	r3, .L20+88
 232 00de FA68     		ldr	r2, [r7, #12]
 233 00e0 9200     		lsl	r2, r2, #2
 234 00e2 D258     		ldr	r2, [r2, r3]
 235 00e4 0123     		mov	r3, #1
 236 00e6 1340     		and	r3, r2
 237 00e8 0AD0     		beq	.L10
 256:.\Generated_Source\PSoC4/ADC_1.c ****             {
 257:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 238              		.loc 1 257 0
 239 00ea 4D4B     		ldr	r3, .L20+64
 240 00ec 4C4A     		ldr	r2, .L20+64
 241 00ee 1168     		ldr	r1, [r2]
 242 00f0 FA68     		ldr	r2, [r7, #12]
 243 00f2 0120     		mov	r0, #1
 244 00f4 041C     		mov	r4, r0
 245 00f6 9440     		lsl	r4, r4, r2
 246 00f8 221C     		mov	r2, r4
 247 00fa 92B2     		uxth	r2, r2
 248 00fc 0A43     		orr	r2, r1
 249 00fe 1A60     		str	r2, [r3]
 250              	.L10:
 258:.\Generated_Source\PSoC4/ADC_1.c ****             }
 259:.\Generated_Source\PSoC4/ADC_1.c **** 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 10


 260:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 251              		.loc 1 260 0
 252 0100 4D4B     		ldr	r3, .L20+88
 253 0102 FA68     		ldr	r2, [r7, #12]
 254 0104 9200     		lsl	r2, r2, #2
 255 0106 D258     		ldr	r2, [r2, r3]
 256 0108 0223     		mov	r3, #2
 257 010a 1340     		and	r3, r2
 258 010c 2BD0     		beq	.L12
 261:.\Generated_Source\PSoC4/ADC_1.c ****             {
 262:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 259              		.loc 1 262 0
 260 010e 454B     		ldr	r3, .L20+68
 261 0110 444A     		ldr	r2, .L20+68
 262 0112 1168     		ldr	r1, [r2]
 263 0114 FA68     		ldr	r2, [r7, #12]
 264 0116 0120     		mov	r0, #1
 265 0118 041C     		mov	r4, r0
 266 011a 9440     		lsl	r4, r4, r2
 267 011c 221C     		mov	r2, r4
 268 011e 92B2     		uxth	r2, r2
 269 0120 0A43     		orr	r2, r1
 270 0122 1A60     		str	r2, [r3]
 271 0124 1FE0     		b	.L12
 272              	.L9:
 263:.\Generated_Source\PSoC4/ADC_1.c ****             }
 264:.\Generated_Source\PSoC4/ADC_1.c ****         }
 265:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC_1.c ****             else
 267:.\Generated_Source\PSoC4/ADC_1.c ****             {
 268:.\Generated_Source\PSoC4/ADC_1.c ****                 CY_SET_REG32(ADC_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_1_INJ_TAILGATING);
 273              		.loc 1 268 0
 274 0126 474B     		ldr	r3, .L20+100
 275 0128 7A68     		ldr	r2, [r7, #4]
 276 012a 8021     		mov	r1, #128
 277 012c C905     		lsl	r1, r1, #23
 278 012e 0A43     		orr	r2, r1
 279 0130 1A60     		str	r2, [r3]
 269:.\Generated_Source\PSoC4/ADC_1.c **** 
 270:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 280              		.loc 1 270 0
 281 0132 414B     		ldr	r3, .L20+88
 282 0134 FA68     		ldr	r2, [r7, #12]
 283 0136 9200     		lsl	r2, r2, #2
 284 0138 D258     		ldr	r2, [r2, r3]
 285 013a 0123     		mov	r3, #1
 286 013c 1340     		and	r3, r2
 287 013e 05D0     		beq	.L13
 271:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 272:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_SATURATE_MASK;
 288              		.loc 1 272 0
 289 0140 394B     		ldr	r3, .L20+72
 290 0142 394A     		ldr	r2, .L20+72
 291 0144 1268     		ldr	r2, [r2]
 292 0146 2021     		mov	r1, #32
 293 0148 0A43     		orr	r2, r1
 294 014a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 11


 295              	.L13:
 273:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 274:.\Generated_Source\PSoC4/ADC_1.c **** 
 275:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 296              		.loc 1 275 0
 297 014c 3A4B     		ldr	r3, .L20+88
 298 014e FA68     		ldr	r2, [r7, #12]
 299 0150 9200     		lsl	r2, r2, #2
 300 0152 D258     		ldr	r2, [r2, r3]
 301 0154 0223     		mov	r3, #2
 302 0156 1340     		and	r3, r2
 303 0158 05D0     		beq	.L12
 276:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 277:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_RANGE_MASK;
 304              		.loc 1 277 0
 305 015a 334B     		ldr	r3, .L20+72
 306 015c 324A     		ldr	r2, .L20+72
 307 015e 1268     		ldr	r2, [r2]
 308 0160 4021     		mov	r1, #64
 309 0162 0A43     		orr	r2, r1
 310 0164 1A60     		str	r2, [r3]
 311              	.L12:
 278:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 279:.\Generated_Source\PSoC4/ADC_1.c ****             }
 280:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC_1.c **** 
 282:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_ALT_RESOLUTION_ON) != 0u)
 312              		.loc 1 282 0
 313 0166 344B     		ldr	r3, .L20+88
 314 0168 FA68     		ldr	r2, [r7, #12]
 315 016a 9200     		lsl	r2, r2, #2
 316 016c D258     		ldr	r2, [r2, r3]
 317 016e 8023     		mov	r3, #128
 318 0170 9B00     		lsl	r3, r3, #2
 319 0172 1340     		and	r3, r2
 320 0174 03D0     		beq	.L14
 283:.\Generated_Source\PSoC4/ADC_1.c ****         {
 284:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_DEFAULT_MAX_WRK_ALT;
 321              		.loc 1 284 0
 322 0176 8023     		mov	r3, #128
 323 0178 DB00     		lsl	r3, r3, #3
 324 017a BB60     		str	r3, [r7, #8]
 325 017c 02E0     		b	.L15
 326              	.L14:
 285:.\Generated_Source\PSoC4/ADC_1.c ****         }
 286:.\Generated_Source\PSoC4/ADC_1.c ****         else
 287:.\Generated_Source\PSoC4/ADC_1.c ****         {
 288:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_SAR_WRK_MAX_12BIT;
 327              		.loc 1 288 0
 328 017e 8023     		mov	r3, #128
 329 0180 5B01     		lsl	r3, r3, #5
 330 0182 BB60     		str	r3, [r7, #8]
 331              	.L15:
 289:.\Generated_Source\PSoC4/ADC_1.c ****         }
 290:.\Generated_Source\PSoC4/ADC_1.c **** 
 291:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_DIFFERENTIAL_EN) == 0u)
 332              		.loc 1 291 0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 12


 333 0184 2C4B     		ldr	r3, .L20+88
 334 0186 FA68     		ldr	r2, [r7, #12]
 335 0188 9200     		lsl	r2, r2, #2
 336 018a D258     		ldr	r2, [r2, r3]
 337 018c 8023     		mov	r3, #128
 338 018e 5B00     		lsl	r3, r3, #1
 339 0190 1340     		and	r3, r2
 340 0192 05D1     		bne	.L16
 292:.\Generated_Source\PSoC4/ADC_1.c ****         {
 293:.\Generated_Source\PSoC4/ADC_1.c ****             #if((ADC_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC_1.c ****                 (ADC_1_DEFAULT_NEG_INPUT_SEL == ADC_1__VREF))
 295:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 298:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 341              		.loc 1 298 0
 342 0194 2C4B     		ldr	r3, .L20+104
 343 0196 FA68     		ldr	r2, [r7, #12]
 344 0198 5200     		lsl	r2, r2, #1
 345 019a 0021     		mov	r1, #0
 346 019c D152     		strh	r1, [r2, r3]
 347 019e 04E0     		b	.L17
 348              	.L16:
 299:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC_1.c ****         }
 301:.\Generated_Source\PSoC4/ADC_1.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC_1.c ****         {
 303:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 307:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 349              		.loc 1 307 0
 350 01a0 294B     		ldr	r3, .L20+104
 351 01a2 FA68     		ldr	r2, [r7, #12]
 352 01a4 5200     		lsl	r2, r2, #1
 353 01a6 0021     		mov	r1, #0
 354 01a8 D152     		strh	r1, [r2, r3]
 355              	.L17:
 308:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC_1.c ****         }
 310:.\Generated_Source\PSoC4/ADC_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 356              		.loc 1 311 0
 357 01aa BB68     		ldr	r3, [r7, #8]
 358 01ac 274A     		ldr	r2, .L20+108
 359 01ae 5343     		mul	r3, r2
 360 01b0 8022     		mov	r2, #128
 361 01b2 D200     		lsl	r2, r2, #3
 362 01b4 9B18     		add	r3, r3, r2
 312:.\Generated_Source\PSoC4/ADC_1.c ****                             ADC_1_DEFAULT_VREF_MV_VALUE) / (ADC_1_DEFAULT_VREF_MV_VALUE * 2));
 363              		.loc 1 312 0
 364 01b6 002B     		cmp	r3, #0
 365 01b8 01DA     		bge	.L18
 366 01ba 254C     		ldr	r4, .L20+112
 367 01bc 1B19     		add	r3, r3, r4
 368              	.L18:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 13


 369 01be DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 370              		.loc 1 311 0
 371 01c0 9BB2     		uxth	r3, r3
 372 01c2 19B2     		sxth	r1, r3
 373 01c4 234B     		ldr	r3, .L20+116
 374 01c6 FA68     		ldr	r2, [r7, #12]
 375 01c8 9200     		lsl	r2, r2, #2
 376 01ca D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 377              		.loc 1 232 0
 378 01cc FB68     		ldr	r3, [r7, #12]
 379 01ce 0133     		add	r3, r3, #1
 380 01d0 FB60     		str	r3, [r7, #12]
 381              	.L8:
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 382              		.loc 1 232 0 is_stmt 0 discriminator 1
 383 01d2 FB68     		ldr	r3, [r7, #12]
 384 01d4 012B     		cmp	r3, #1
 385 01d6 00D8     		bhi	.LCB314
 386 01d8 68E7     		b	.L19	@long jump
 387              	.LCB314:
 313:.\Generated_Source\PSoC4/ADC_1.c ****     }
 314:.\Generated_Source\PSoC4/ADC_1.c **** }
 388              		.loc 1 314 0 is_stmt 1
 389 01da BD46     		mov	sp, r7
 390 01dc 05B0     		add	sp, sp, #20
 391              		@ sp needed
 392 01de 90BD     		pop	{r4, r7, pc}
 393              	.L21:
 394              		.align	2
 395              	.L20:
 396 01e0 00000000 		.word	ADC_1_ISR
 397 01e4 20001A40 		.word	1075445792
 398 01e8 00001A40 		.word	1075445760
 399 01ec 80031A40 		.word	1075446656
 400 01f0 40201013 		.word	319823936
 401 01f4 40200013 		.word	318775360
 402 01f8 04001A40 		.word	1075445764
 403 01fc CD000080 		.word	-2147483443
 404 0200 18001A40 		.word	1075445784
 405 0204 0000FF0F 		.word	268369920
 406 0208 1C001A40 		.word	1075445788
 407 020c 10001A40 		.word	1075445776
 408 0210 04000400 		.word	262148
 409 0214 14001A40 		.word	1075445780
 410 0218 00031A40 		.word	1075446528
 411 021c 40031A40 		.word	1075446592
 412 0220 28021A40 		.word	1075446312
 413 0224 38021A40 		.word	1075446328
 414 0228 18021A40 		.word	1075446296
 415 022c 000F1A40 		.word	1075449600
 416 0230 30001A40 		.word	1075445808
 417 0234 FFFFFFDF 		.word	-536870913
 418 0238 00000000 		.word	ADC_1_channelsConfig
 419 023c 08000000 		.word	ADC_1_InputsPlacement.4745
 420 0240 80001A40 		.word	1075445888
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 14


 421 0244 80021A40 		.word	1075446400
 422 0248 00000000 		.word	ADC_1_offset
 423 024c 10270000 		.word	10000
 424 0250 FF070000 		.word	2047
 425 0254 00000000 		.word	ADC_1_countsPer10Volt
 426              		.cfi_endproc
 427              	.LFE1:
 428              		.size	ADC_1_Init, .-ADC_1_Init
 429              		.section	.text.ADC_1_Enable,"ax",%progbits
 430              		.align	2
 431              		.global	ADC_1_Enable
 432              		.code	16
 433              		.thumb_func
 434              		.type	ADC_1_Enable, %function
 435              	ADC_1_Enable:
 436              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC_1.c **** 
 316:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC_1.c **** *
 320:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Enable(void)
 331:.\Generated_Source\PSoC4/ADC_1.c **** {
 437              		.loc 1 331 0
 438              		.cfi_startproc
 439 0000 80B5     		push	{r7, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_1.c ****     if (0u == (ADC_1_SAR_CTRL_REG & ADC_1_ENABLE))
 445              		.loc 1 332 0
 446 0004 074B     		ldr	r3, .L24
 447 0006 1B68     		ldr	r3, [r3]
 448 0008 002B     		cmp	r3, #0
 449 000a 09DB     		blt	.L22
 333:.\Generated_Source\PSoC4/ADC_1.c ****     {
 334:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_1.c ****             while (0u != (ADC_1_SAR_STATUS_REG & ADC_1_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC_1.c ****             {
 338:.\Generated_Source\PSoC4/ADC_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC_1.c ****             }
 340:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* (ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC_1.c ****         
 342:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_CTRL_REG |= ADC_1_ENABLE;
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 15


 450              		.loc 1 342 0
 451 000c 054B     		ldr	r3, .L24
 452 000e 054A     		ldr	r2, .L24
 453 0010 1268     		ldr	r2, [r2]
 454 0012 8021     		mov	r1, #128
 455 0014 0906     		lsl	r1, r1, #24
 456 0016 0A43     		orr	r2, r1
 457 0018 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC_1.c ****         
 344:.\Generated_Source\PSoC4/ADC_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC_1.c ****         CyDelayUs(ADC_1_10US_DELAY);         
 458              		.loc 1 345 0
 459 001a 0A20     		mov	r0, #10
 460 001c FFF7FEFF 		bl	CyDelayUs
 461              	.L22:
 346:.\Generated_Source\PSoC4/ADC_1.c ****     }
 347:.\Generated_Source\PSoC4/ADC_1.c **** }
 462              		.loc 1 347 0
 463 0020 BD46     		mov	sp, r7
 464              		@ sp needed
 465 0022 80BD     		pop	{r7, pc}
 466              	.L25:
 467              		.align	2
 468              	.L24:
 469 0024 00001A40 		.word	1075445760
 470              		.cfi_endproc
 471              	.LFE2:
 472              		.size	ADC_1_Enable, .-ADC_1_Enable
 473              		.section	.text.ADC_1_Stop,"ax",%progbits
 474              		.align	2
 475              		.global	ADC_1_Stop
 476              		.code	16
 477              		.thumb_func
 478              		.type	ADC_1_Stop, %function
 479              	ADC_1_Stop:
 480              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC_1.c **** 
 349:.\Generated_Source\PSoC4/ADC_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Stop
 352:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC_1.c **** *
 354:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC_1.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC_1.c **** *
 358:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC_1.c **** *
 361:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC_1.c **** *
 364:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Stop(void)
 366:.\Generated_Source\PSoC4/ADC_1.c **** {
 481              		.loc 1 366 0
 482              		.cfi_startproc
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 16


 483 0000 80B5     		push	{r7, lr}
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG &= (uint32)~ADC_1_ENABLE;
 489              		.loc 1 367 0
 490 0004 034B     		ldr	r3, .L27
 491 0006 034A     		ldr	r2, .L27
 492 0008 1268     		ldr	r2, [r2]
 493 000a 5200     		lsl	r2, r2, #1
 494 000c 5208     		lsr	r2, r2, #1
 495 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC_1.c **** }
 496              		.loc 1 368 0
 497 0010 BD46     		mov	sp, r7
 498              		@ sp needed
 499 0012 80BD     		pop	{r7, pc}
 500              	.L28:
 501              		.align	2
 502              	.L27:
 503 0014 00001A40 		.word	1075445760
 504              		.cfi_endproc
 505              	.LFE3:
 506              		.size	ADC_1_Stop, .-ADC_1_Stop
 507              		.section	.text.ADC_1_StartConvert,"ax",%progbits
 508              		.align	2
 509              		.global	ADC_1_StartConvert
 510              		.code	16
 511              		.thumb_func
 512              		.type	ADC_1_StartConvert, %function
 513              	ADC_1_StartConvert:
 514              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC_1.c **** 
 370:.\Generated_Source\PSoC4/ADC_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StartConvert
 373:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC_1.c **** *
 375:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC_1.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC_1.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC_1.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC_1.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC_1.c **** *
 384:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC_1.c **** *
 387:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC_1.c **** *
 390:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StartConvert(void)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 17


 392:.\Generated_Source\PSoC4/ADC_1.c **** {
 515              		.loc 1 392 0
 516              		.cfi_startproc
 517 0000 80B5     		push	{r7, lr}
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 00AF     		add	r7, sp, #0
 522              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG |= ADC_1_CONTINUOUS_EN;
 523              		.loc 1 394 0
 524 0004 044B     		ldr	r3, .L30
 525 0006 044A     		ldr	r2, .L30
 526 0008 1268     		ldr	r2, [r2]
 527 000a 8021     		mov	r1, #128
 528 000c 4902     		lsl	r1, r1, #9
 529 000e 0A43     		orr	r2, r1
 530 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC_1.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_START_CTRL_REG = ADC_1_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC_1.c **** 
 399:.\Generated_Source\PSoC4/ADC_1.c **** }
 531              		.loc 1 399 0
 532 0012 BD46     		mov	sp, r7
 533              		@ sp needed
 534 0014 80BD     		pop	{r7, pc}
 535              	.L31:
 536 0016 C046     		.align	2
 537              	.L30:
 538 0018 04001A40 		.word	1075445764
 539              		.cfi_endproc
 540              	.LFE4:
 541              		.size	ADC_1_StartConvert, .-ADC_1_StartConvert
 542              		.section	.text.ADC_1_StopConvert,"ax",%progbits
 543              		.align	2
 544              		.global	ADC_1_StopConvert
 545              		.code	16
 546              		.thumb_func
 547              		.type	ADC_1_StopConvert, %function
 548              	ADC_1_StopConvert:
 549              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC_1.c **** 
 401:.\Generated_Source\PSoC4/ADC_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StopConvert
 404:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC_1.c **** *
 406:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC_1.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC_1.c **** *
 409:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC_1.c **** *
 412:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 18


 414:.\Generated_Source\PSoC4/ADC_1.c **** *
 415:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC_1.c **** {
 550              		.loc 1 417 0
 551              		.cfi_startproc
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 00AF     		add	r7, sp, #0
 557              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_1_CONTINUOUS_EN);
 558              		.loc 1 419 0
 559 0004 034B     		ldr	r3, .L33
 560 0006 034A     		ldr	r2, .L33
 561 0008 1168     		ldr	r1, [r2]
 562 000a 034A     		ldr	r2, .L33+4
 563 000c 0A40     		and	r2, r1
 564 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC_1.c **** }
 565              		.loc 1 421 0
 566 0010 BD46     		mov	sp, r7
 567              		@ sp needed
 568 0012 80BD     		pop	{r7, pc}
 569              	.L34:
 570              		.align	2
 571              	.L33:
 572 0014 04001A40 		.word	1075445764
 573 0018 FFFFFEFF 		.word	-65537
 574              		.cfi_endproc
 575              	.LFE5:
 576              		.size	ADC_1_StopConvert, .-ADC_1_StopConvert
 577              		.section	.text.ADC_1_IsEndConversion,"ax",%progbits
 578              		.align	2
 579              		.global	ADC_1_IsEndConversion
 580              		.code	16
 581              		.thumb_func
 582              		.type	ADC_1_IsEndConversion, %function
 583              	ADC_1_IsEndConversion:
 584              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC_1.c **** 
 423:.\Generated_Source\PSoC4/ADC_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_1.c **** *
 428:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC_1.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC_1.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC_1.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC_1.c **** *  completed.
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 19


 436:.\Generated_Source\PSoC4/ADC_1.c **** *
 437:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC_1.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC_1.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC_1.c **** *
 445:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC_1.c **** *
 449:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC_1.c **** uint32 ADC_1_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC_1.c **** {
 585              		.loc 1 451 0
 586              		.cfi_startproc
 587 0000 80B5     		push	{r7, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 7, -8
 590              		.cfi_offset 14, -4
 591 0002 84B0     		sub	sp, sp, #16
 592              		.cfi_def_cfa_offset 24
 593 0004 00AF     		add	r7, sp, #0
 594              		.cfi_def_cfa_register 7
 595 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 status = 0u;
 596              		.loc 1 452 0
 597 0008 0023     		mov	r3, #0
 598 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_1.c ****     if((retMode & (ADC_1_RETURN_STATUS | ADC_1_WAIT_FOR_RESULT)) != 0u)
 599              		.loc 1 454 0
 600 000c 7A68     		ldr	r2, [r7, #4]
 601 000e 0323     		mov	r3, #3
 602 0010 1340     		and	r3, r2
 603 0012 11D0     		beq	.L36
 604              	.L38:
 455:.\Generated_Source\PSoC4/ADC_1.c ****     {
 456:.\Generated_Source\PSoC4/ADC_1.c ****         do
 457:.\Generated_Source\PSoC4/ADC_1.c ****         {
 458:.\Generated_Source\PSoC4/ADC_1.c ****             status = ADC_1_SAR_INTR_REG & ADC_1_EOS_MASK;
 605              		.loc 1 458 0 discriminator 1
 606 0014 184B     		ldr	r3, .L43
 607 0016 1A68     		ldr	r2, [r3]
 608 0018 0123     		mov	r3, #1
 609 001a 1340     		and	r3, r2
 610 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC_1.c ****         }while((status == 0u) && ((retMode & ADC_1_WAIT_FOR_RESULT) != 0u));
 611              		.loc 1 459 0 discriminator 1
 612 001e FB68     		ldr	r3, [r7, #12]
 613 0020 002B     		cmp	r3, #0
 614 0022 03D1     		bne	.L37
 615 0024 7A68     		ldr	r2, [r7, #4]
 616 0026 0223     		mov	r3, #2
 617 0028 1340     		and	r3, r2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 20


 618 002a F3D1     		bne	.L38
 619              	.L37:
 460:.\Generated_Source\PSoC4/ADC_1.c **** 
 461:.\Generated_Source\PSoC4/ADC_1.c ****         if(status != 0u)
 620              		.loc 1 461 0
 621 002c FB68     		ldr	r3, [r7, #12]
 622 002e 002B     		cmp	r3, #0
 623 0030 02D0     		beq	.L36
 462:.\Generated_Source\PSoC4/ADC_1.c ****         {
 463:.\Generated_Source\PSoC4/ADC_1.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_SAR_INTR_REG = ADC_1_EOS_MASK;
 624              		.loc 1 464 0
 625 0032 114B     		ldr	r3, .L43
 626 0034 0122     		mov	r2, #1
 627 0036 1A60     		str	r2, [r3]
 628              	.L36:
 465:.\Generated_Source\PSoC4/ADC_1.c ****         }
 466:.\Generated_Source\PSoC4/ADC_1.c ****     }
 467:.\Generated_Source\PSoC4/ADC_1.c **** 
 468:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC_1.c ****         if((retMode & (ADC_1_RETURN_STATUS_INJ | ADC_1_WAIT_FOR_RESULT_INJ)) != 0u)
 629              		.loc 1 469 0
 630 0038 7A68     		ldr	r2, [r7, #4]
 631 003a 0C23     		mov	r3, #12
 632 003c 1340     		and	r3, r2
 633 003e 15D0     		beq	.L39
 634              	.L41:
 470:.\Generated_Source\PSoC4/ADC_1.c ****         {
 471:.\Generated_Source\PSoC4/ADC_1.c ****             do
 472:.\Generated_Source\PSoC4/ADC_1.c ****             {
 473:.\Generated_Source\PSoC4/ADC_1.c ****                 status |= ADC_1_SAR_INTR_REG & ADC_1_INJ_EOC_MASK;
 635              		.loc 1 473 0
 636 0040 0D4B     		ldr	r3, .L43
 637 0042 1A68     		ldr	r2, [r3]
 638 0044 1023     		mov	r3, #16
 639 0046 1340     		and	r3, r2
 640 0048 FA68     		ldr	r2, [r7, #12]
 641 004a 1343     		orr	r3, r2
 642 004c FB60     		str	r3, [r7, #12]
 474:.\Generated_Source\PSoC4/ADC_1.c ****             }while(((status & ADC_1_INJ_EOC_MASK) == 0u) &&
 643              		.loc 1 474 0
 644 004e FA68     		ldr	r2, [r7, #12]
 645 0050 1023     		mov	r3, #16
 646 0052 1340     		and	r3, r2
 475:.\Generated_Source\PSoC4/ADC_1.c ****                    ((retMode & ADC_1_WAIT_FOR_RESULT_INJ) != 0u));
 647              		.loc 1 475 0
 648 0054 03D1     		bne	.L40
 649              		.loc 1 475 0 is_stmt 0 discriminator 1
 650 0056 7A68     		ldr	r2, [r7, #4]
 651 0058 0823     		mov	r3, #8
 652 005a 1340     		and	r3, r2
 474:.\Generated_Source\PSoC4/ADC_1.c ****             }while(((status & ADC_1_INJ_EOC_MASK) == 0u) &&
 653              		.loc 1 474 0 is_stmt 1 discriminator 1
 654 005c F0D1     		bne	.L41
 655              	.L40:
 476:.\Generated_Source\PSoC4/ADC_1.c **** 
 477:.\Generated_Source\PSoC4/ADC_1.c ****             if((status & ADC_1_INJ_EOC_MASK) != 0u)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 21


 656              		.loc 1 477 0
 657 005e FA68     		ldr	r2, [r7, #12]
 658 0060 1023     		mov	r3, #16
 659 0062 1340     		and	r3, r2
 660 0064 02D0     		beq	.L39
 478:.\Generated_Source\PSoC4/ADC_1.c ****             {
 479:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_INTR_REG = ADC_1_INJ_EOC_MASK;
 661              		.loc 1 480 0
 662 0066 044B     		ldr	r3, .L43
 663 0068 1022     		mov	r2, #16
 664 006a 1A60     		str	r2, [r3]
 665              	.L39:
 481:.\Generated_Source\PSoC4/ADC_1.c ****             }
 482:.\Generated_Source\PSoC4/ADC_1.c ****         }
 483:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC_1.c **** 
 485:.\Generated_Source\PSoC4/ADC_1.c ****     return (status);
 666              		.loc 1 485 0
 667 006c FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC_1.c **** }
 668              		.loc 1 486 0
 669 006e 181C     		mov	r0, r3
 670 0070 BD46     		mov	sp, r7
 671 0072 04B0     		add	sp, sp, #16
 672              		@ sp needed
 673 0074 80BD     		pop	{r7, pc}
 674              	.L44:
 675 0076 C046     		.align	2
 676              	.L43:
 677 0078 10021A40 		.word	1075446288
 678              		.cfi_endproc
 679              	.LFE6:
 680              		.size	ADC_1_IsEndConversion, .-ADC_1_IsEndConversion
 681              		.section	.text.ADC_1_GetResult16,"ax",%progbits
 682              		.align	2
 683              		.global	ADC_1_GetResult16
 684              		.code	16
 685              		.thumb_func
 686              		.type	ADC_1_GetResult16, %function
 687              	ADC_1_GetResult16:
 688              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC_1.c **** 
 488:.\Generated_Source\PSoC4/ADC_1.c **** 
 489:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_GetResult16
 491:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC_1.c **** *
 493:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC_1.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC_1.c **** *
 496:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC_1.c **** *
 500:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC_1.c **** *  Returns converted data as a signed 16-bit integer
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 22


 502:.\Generated_Source\PSoC4/ADC_1.c **** *
 503:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC_1.c **** int16 ADC_1_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC_1.c **** {
 689              		.loc 1 505 0
 690              		.cfi_startproc
 691 0000 80B5     		push	{r7, lr}
 692              		.cfi_def_cfa_offset 8
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695 0002 84B0     		sub	sp, sp, #16
 696              		.cfi_def_cfa_offset 24
 697 0004 00AF     		add	r7, sp, #0
 698              		.cfi_def_cfa_register 7
 699 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC_1.c **** 
 508:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 700              		.loc 1 509 0
 701 0008 7B68     		ldr	r3, [r7, #4]
 702 000a 012B     		cmp	r3, #1
 703 000c 02D9     		bls	.L46
 704              		.loc 1 509 0 is_stmt 0 discriminator 1
 705 000e 0020     		mov	r0, #0
 706 0010 FFF7FEFF 		bl	CyHalt
 707              	.L46:
 510:.\Generated_Source\PSoC4/ADC_1.c **** 
 511:.\Generated_Source\PSoC4/ADC_1.c ****     if(chan < ADC_1_SEQUENCED_CHANNELS_NUM)
 708              		.loc 1 511 0 is_stmt 1
 709 0014 7B68     		ldr	r3, [r7, #4]
 710 0016 002B     		cmp	r3, #0
 711 0018 08D1     		bne	.L47
 512:.\Generated_Source\PSoC4/ADC_1.c ****     {
 513:.\Generated_Source\PSoC4/ADC_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 712              		.loc 1 513 0
 713 001a 7B68     		ldr	r3, [r7, #4]
 714 001c 9B00     		lsl	r3, r3, #2
 715 001e 094A     		ldr	r2, .L50
 716 0020 9B18     		add	r3, r3, r2
 717 0022 1B68     		ldr	r3, [r3]
 718 0024 1B04     		lsl	r3, r3, #16
 719 0026 1B0C     		lsr	r3, r3, #16
 720 0028 FB60     		str	r3, [r7, #12]
 721 002a 04E0     		b	.L48
 722              	.L47:
 514:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC_1.c ****     }
 516:.\Generated_Source\PSoC4/ADC_1.c ****     else
 517:.\Generated_Source\PSoC4/ADC_1.c ****     {
 518:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC_1.c ****             result = ADC_1_SAR_INJ_RESULT_REG & ADC_1_RESULT_MASK;
 723              		.loc 1 519 0
 724 002c 064B     		ldr	r3, .L50+4
 725 002e 1B68     		ldr	r3, [r3]
 726 0030 1B04     		lsl	r3, r3, #16
 727 0032 1B0C     		lsr	r3, r3, #16
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 23


 728 0034 FB60     		str	r3, [r7, #12]
 729              	.L48:
 520:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 521:.\Generated_Source\PSoC4/ADC_1.c ****             result = 0u;
 522:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC_1.c ****     }
 524:.\Generated_Source\PSoC4/ADC_1.c **** 
 525:.\Generated_Source\PSoC4/ADC_1.c ****     return ( (int16)result );
 730              		.loc 1 525 0
 731 0036 FB68     		ldr	r3, [r7, #12]
 732 0038 9BB2     		uxth	r3, r3
 733 003a 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC_1.c **** }
 734              		.loc 1 526 0
 735 003c 181C     		mov	r0, r3
 736 003e BD46     		mov	sp, r7
 737 0040 04B0     		add	sp, sp, #16
 738              		@ sp needed
 739 0042 80BD     		pop	{r7, pc}
 740              	.L51:
 741              		.align	2
 742              	.L50:
 743 0044 80011A40 		.word	1075446144
 744 0048 90021A40 		.word	1075446416
 745              		.cfi_endproc
 746              	.LFE7:
 747              		.size	ADC_1_GetResult16, .-ADC_1_GetResult16
 748              		.section	.text.ADC_1_SetChanMask,"ax",%progbits
 749              		.align	2
 750              		.global	ADC_1_SetChanMask
 751              		.code	16
 752              		.thumb_func
 753              		.type	ADC_1_SetChanMask, %function
 754              	ADC_1_SetChanMask:
 755              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC_1.c **** 
 528:.\Generated_Source\PSoC4/ADC_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetChanMask
 531:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC_1.c **** *
 533:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC_1.c **** *
 536:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC_1.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC_1.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC_1.c **** *
 545:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 24


 549:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC_1.c **** {
 756              		.loc 1 550 0
 757              		.cfi_startproc
 758 0000 80B5     		push	{r7, lr}
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762 0002 82B0     		sub	sp, sp, #8
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 767              		.loc 1 551 0
 768 0008 034B     		ldr	r3, .L53
 769 000a 7968     		ldr	r1, [r7, #4]
 770 000c 0122     		mov	r2, #1
 771 000e 0A40     		and	r2, r1
 772 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_1.c **** }
 773              		.loc 1 552 0
 774 0012 BD46     		mov	sp, r7
 775 0014 02B0     		add	sp, sp, #8
 776              		@ sp needed
 777 0016 80BD     		pop	{r7, pc}
 778              	.L54:
 779              		.align	2
 780              	.L53:
 781 0018 20001A40 		.word	1075445792
 782              		.cfi_endproc
 783              	.LFE8:
 784              		.size	ADC_1_SetChanMask, .-ADC_1_SetChanMask
 785              		.section	.text.ADC_1_EnableInjection,"ax",%progbits
 786              		.align	2
 787              		.global	ADC_1_EnableInjection
 788              		.code	16
 789              		.thumb_func
 790              		.type	ADC_1_EnableInjection, %function
 791              	ADC_1_EnableInjection:
 792              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC_1.c **** 
 554:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC_1.c **** 
 556:.\Generated_Source\PSoC4/ADC_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_EnableInjection
 559:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC_1.c ****     *
 561:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC_1.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC_1.c ****     *
 564:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC_1.c ****     *
 567:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 25


 569:.\Generated_Source\PSoC4/ADC_1.c ****     *
 570:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC_1.c ****     void ADC_1_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC_1.c ****     {
 793              		.loc 1 572 0
 794              		.cfi_startproc
 795 0000 80B5     		push	{r7, lr}
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 7, -8
 798              		.cfi_offset 14, -4
 799 0002 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 573:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_1_INJ_CHAN_EN;
 801              		.loc 1 573 0
 802 0004 044B     		ldr	r3, .L56
 803 0006 044A     		ldr	r2, .L56
 804 0008 1268     		ldr	r2, [r2]
 805 000a 8021     		mov	r1, #128
 806 000c 0906     		lsl	r1, r1, #24
 807 000e 0A43     		orr	r2, r1
 808 0010 1A60     		str	r2, [r3]
 574:.\Generated_Source\PSoC4/ADC_1.c ****     }
 809              		.loc 1 574 0
 810 0012 BD46     		mov	sp, r7
 811              		@ sp needed
 812 0014 80BD     		pop	{r7, pc}
 813              	.L57:
 814 0016 C046     		.align	2
 815              	.L56:
 816 0018 80021A40 		.word	1075446400
 817              		.cfi_endproc
 818              	.LFE9:
 819              		.size	ADC_1_EnableInjection, .-ADC_1_EnableInjection
 820              		.section	.text.ADC_1_SetLowLimit,"ax",%progbits
 821              		.align	2
 822              		.global	ADC_1_SetLowLimit
 823              		.code	16
 824              		.thumb_func
 825              		.type	ADC_1_SetLowLimit, %function
 826              	ADC_1_SetLowLimit:
 827              	.LFB10:
 575:.\Generated_Source\PSoC4/ADC_1.c **** 
 576:.\Generated_Source\PSoC4/ADC_1.c **** #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC_1.c **** 
 578:.\Generated_Source\PSoC4/ADC_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_1.c **** *
 583:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC_1.c **** *
 586:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_1.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC_1.c **** *
 589:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 26


 591:.\Generated_Source\PSoC4/ADC_1.c **** *
 592:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC_1.c **** {
 828              		.loc 1 594 0
 829              		.cfi_startproc
 830 0000 80B5     		push	{r7, lr}
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 82B0     		sub	sp, sp, #8
 835              		.cfi_def_cfa_offset 16
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_LOW_MASK);
 839              		.loc 1 595 0
 840 0008 084B     		ldr	r3, .L59
 841 000a 084A     		ldr	r2, .L59
 842 000c 1268     		ldr	r2, [r2]
 843 000e 120C     		lsr	r2, r2, #16
 844 0010 1204     		lsl	r2, r2, #16
 845 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_1_RANGE_LOW_MASK;
 846              		.loc 1 596 0
 847 0014 054B     		ldr	r3, .L59
 848 0016 054A     		ldr	r2, .L59
 849 0018 1168     		ldr	r1, [r2]
 850 001a 7A68     		ldr	r2, [r7, #4]
 851 001c 1204     		lsl	r2, r2, #16
 852 001e 120C     		lsr	r2, r2, #16
 853 0020 0A43     		orr	r2, r1
 854 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_1.c **** }
 855              		.loc 1 597 0
 856 0024 BD46     		mov	sp, r7
 857 0026 02B0     		add	sp, sp, #8
 858              		@ sp needed
 859 0028 80BD     		pop	{r7, pc}
 860              	.L60:
 861 002a C046     		.align	2
 862              	.L59:
 863 002c 18001A40 		.word	1075445784
 864              		.cfi_endproc
 865              	.LFE10:
 866              		.size	ADC_1_SetLowLimit, .-ADC_1_SetLowLimit
 867              		.section	.text.ADC_1_SetHighLimit,"ax",%progbits
 868              		.align	2
 869              		.global	ADC_1_SetHighLimit
 870              		.code	16
 871              		.thumb_func
 872              		.type	ADC_1_SetHighLimit, %function
 873              	ADC_1_SetHighLimit:
 874              	.LFB11:
 598:.\Generated_Source\PSoC4/ADC_1.c **** 
 599:.\Generated_Source\PSoC4/ADC_1.c **** 
 600:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 27


 601:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC_1.c **** *
 604:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC_1.c **** *
 607:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC_1.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC_1.c **** *
 610:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC_1.c **** {
 875              		.loc 1 615 0
 876              		.cfi_startproc
 877 0000 80B5     		push	{r7, lr}
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 7, -8
 880              		.cfi_offset 14, -4
 881 0002 82B0     		sub	sp, sp, #8
 882              		.cfi_def_cfa_offset 16
 883 0004 00AF     		add	r7, sp, #0
 884              		.cfi_def_cfa_register 7
 885 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_HIGH_MASK);
 886              		.loc 1 616 0
 887 0008 074B     		ldr	r3, .L62
 888 000a 074A     		ldr	r2, .L62
 889 000c 1268     		ldr	r2, [r2]
 890 000e 1204     		lsl	r2, r2, #16
 891 0010 120C     		lsr	r2, r2, #16
 892 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_1_RANGE_HIGH_OFFSET);
 893              		.loc 1 617 0
 894 0014 044B     		ldr	r3, .L62
 895 0016 044A     		ldr	r2, .L62
 896 0018 1168     		ldr	r1, [r2]
 897 001a 7A68     		ldr	r2, [r7, #4]
 898 001c 1204     		lsl	r2, r2, #16
 899 001e 0A43     		orr	r2, r1
 900 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_1.c **** }
 901              		.loc 1 618 0
 902 0022 BD46     		mov	sp, r7
 903 0024 02B0     		add	sp, sp, #8
 904              		@ sp needed
 905 0026 80BD     		pop	{r7, pc}
 906              	.L63:
 907              		.align	2
 908              	.L62:
 909 0028 18001A40 		.word	1075445784
 910              		.cfi_endproc
 911              	.LFE11:
 912              		.size	ADC_1_SetHighLimit, .-ADC_1_SetHighLimit
 913              		.section	.text.ADC_1_SetLimitMask,"ax",%progbits
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 28


 914              		.align	2
 915              		.global	ADC_1_SetLimitMask
 916              		.code	16
 917              		.thumb_func
 918              		.type	ADC_1_SetLimitMask, %function
 919              	ADC_1_SetLimitMask:
 920              	.LFB12:
 619:.\Generated_Source\PSoC4/ADC_1.c **** 
 620:.\Generated_Source\PSoC4/ADC_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC_1.c **** *
 628:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC_1.c **** *
 634:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC_1.c **** *
 637:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC_1.c **** {
 921              		.loc 1 639 0
 922              		.cfi_startproc
 923 0000 80B5     		push	{r7, lr}
 924              		.cfi_def_cfa_offset 8
 925              		.cfi_offset 7, -8
 926              		.cfi_offset 14, -4
 927 0002 82B0     		sub	sp, sp, #8
 928              		.cfi_def_cfa_offset 16
 929 0004 00AF     		add	r7, sp, #0
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 932              		.loc 1 640 0
 933 0008 034B     		ldr	r3, .L65
 934 000a 7968     		ldr	r1, [r7, #4]
 935 000c 0122     		mov	r2, #1
 936 000e 0A40     		and	r2, r1
 937 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC_1.c **** }
 938              		.loc 1 641 0
 939 0012 BD46     		mov	sp, r7
 940 0014 02B0     		add	sp, sp, #8
 941              		@ sp needed
 942 0016 80BD     		pop	{r7, pc}
 943              	.L66:
 944              		.align	2
 945              	.L65:
 946 0018 38021A40 		.word	1075446328
 947              		.cfi_endproc
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 29


 948              	.LFE12:
 949              		.size	ADC_1_SetLimitMask, .-ADC_1_SetLimitMask
 950              		.section	.text.ADC_1_SetSatMask,"ax",%progbits
 951              		.align	2
 952              		.global	ADC_1_SetSatMask
 953              		.code	16
 954              		.thumb_func
 955              		.type	ADC_1_SetSatMask, %function
 956              	ADC_1_SetSatMask:
 957              	.LFB13:
 642:.\Generated_Source\PSoC4/ADC_1.c **** 
 643:.\Generated_Source\PSoC4/ADC_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetSatMask
 646:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC_1.c **** *
 648:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC_1.c **** *
 651:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC_1.c **** *
 657:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC_1.c **** *
 660:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC_1.c **** {
 958              		.loc 1 662 0
 959              		.cfi_startproc
 960 0000 80B5     		push	{r7, lr}
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 82B0     		sub	sp, sp, #8
 965              		.cfi_def_cfa_offset 16
 966 0004 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 969              		.loc 1 663 0
 970 0008 034B     		ldr	r3, .L68
 971 000a 7968     		ldr	r1, [r7, #4]
 972 000c 0122     		mov	r2, #1
 973 000e 0A40     		and	r2, r1
 974 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC_1.c **** }
 975              		.loc 1 664 0
 976 0012 BD46     		mov	sp, r7
 977 0014 02B0     		add	sp, sp, #8
 978              		@ sp needed
 979 0016 80BD     		pop	{r7, pc}
 980              	.L69:
 981              		.align	2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 30


 982              	.L68:
 983 0018 28021A40 		.word	1075446312
 984              		.cfi_endproc
 985              	.LFE13:
 986              		.size	ADC_1_SetSatMask, .-ADC_1_SetSatMask
 987              		.section	.text.ADC_1_SetOffset,"ax",%progbits
 988              		.align	2
 989              		.global	ADC_1_SetOffset
 990              		.code	16
 991              		.thumb_func
 992              		.type	ADC_1_SetOffset, %function
 993              	ADC_1_SetOffset:
 994              	.LFB14:
 665:.\Generated_Source\PSoC4/ADC_1.c **** 
 666:.\Generated_Source\PSoC4/ADC_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetOffset
 669:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC_1.c **** *
 671:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC_1.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC_1.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC_1.c **** *
 677:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC_1.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC_1.c **** *
 682:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC_1.c **** *
 685:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC_1.c **** *
 688:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC_1.c **** {
 995              		.loc 1 690 0
 996              		.cfi_startproc
 997 0000 80B5     		push	{r7, lr}
 998              		.cfi_def_cfa_offset 8
 999              		.cfi_offset 7, -8
 1000              		.cfi_offset 14, -4
 1001 0002 82B0     		sub	sp, sp, #8
 1002              		.cfi_def_cfa_offset 16
 1003 0004 00AF     		add	r7, sp, #0
 1004              		.cfi_def_cfa_register 7
 1005 0006 7860     		str	r0, [r7, #4]
 1006 0008 0A1C     		mov	r2, r1
 1007 000a BB1C     		add	r3, r7, #2
 1008 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1009              		.loc 1 692 0
 1010 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 31


 1011 0010 012B     		cmp	r3, #1
 1012 0012 02D9     		bls	.L71
 1013              		.loc 1 692 0 is_stmt 0 discriminator 1
 1014 0014 0020     		mov	r0, #0
 1015 0016 FFF7FEFF 		bl	CyHalt
 1016              	.L71:
 693:.\Generated_Source\PSoC4/ADC_1.c **** 
 694:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_offset[chan] = offset;
 1017              		.loc 1 694 0 is_stmt 1
 1018 001a 044B     		ldr	r3, .L72
 1019 001c 7A68     		ldr	r2, [r7, #4]
 1020 001e 5200     		lsl	r2, r2, #1
 1021 0020 B91C     		add	r1, r7, #2
 1022 0022 0988     		ldrh	r1, [r1]
 1023 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC_1.c **** }
 1024              		.loc 1 695 0
 1025 0026 BD46     		mov	sp, r7
 1026 0028 02B0     		add	sp, sp, #8
 1027              		@ sp needed
 1028 002a 80BD     		pop	{r7, pc}
 1029              	.L73:
 1030              		.align	2
 1031              	.L72:
 1032 002c 00000000 		.word	ADC_1_offset
 1033              		.cfi_endproc
 1034              	.LFE14:
 1035              		.size	ADC_1_SetOffset, .-ADC_1_SetOffset
 1036              		.section	.text.ADC_1_SetGain,"ax",%progbits
 1037              		.align	2
 1038              		.global	ADC_1_SetGain
 1039              		.code	16
 1040              		.thumb_func
 1041              		.type	ADC_1_SetGain, %function
 1042              	ADC_1_SetGain:
 1043              	.LFB15:
 696:.\Generated_Source\PSoC4/ADC_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetGain
 700:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC_1.c **** *
 702:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC_1.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC_1.c **** *
 711:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC_1.c **** *
 715:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 32


 717:.\Generated_Source\PSoC4/ADC_1.c **** *
 718:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC_1.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC_1.c **** *
 722:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC_1.c **** {
 1044              		.loc 1 724 0
 1045              		.cfi_startproc
 1046 0000 80B5     		push	{r7, lr}
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 7, -8
 1049              		.cfi_offset 14, -4
 1050 0002 82B0     		sub	sp, sp, #8
 1051              		.cfi_def_cfa_offset 16
 1052 0004 00AF     		add	r7, sp, #0
 1053              		.cfi_def_cfa_register 7
 1054 0006 7860     		str	r0, [r7, #4]
 1055 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1056              		.loc 1 726 0
 1057 000a 7B68     		ldr	r3, [r7, #4]
 1058 000c 012B     		cmp	r3, #1
 1059 000e 02D9     		bls	.L75
 1060              		.loc 1 726 0 is_stmt 0 discriminator 1
 1061 0010 0020     		mov	r0, #0
 1062 0012 FFF7FEFF 		bl	CyHalt
 1063              	.L75:
 727:.\Generated_Source\PSoC4/ADC_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_countsPer10Volt[chan] = adcGain;
 1064              		.loc 1 728 0 is_stmt 1
 1065 0016 044B     		ldr	r3, .L76
 1066 0018 7A68     		ldr	r2, [r7, #4]
 1067 001a 9200     		lsl	r2, r2, #2
 1068 001c 3968     		ldr	r1, [r7]
 1069 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC_1.c **** }
 1070              		.loc 1 729 0
 1071 0020 BD46     		mov	sp, r7
 1072 0022 02B0     		add	sp, sp, #8
 1073              		@ sp needed
 1074 0024 80BD     		pop	{r7, pc}
 1075              	.L77:
 1076 0026 C046     		.align	2
 1077              	.L76:
 1078 0028 00000000 		.word	ADC_1_countsPer10Volt
 1079              		.cfi_endproc
 1080              	.LFE15:
 1081              		.size	ADC_1_SetGain, .-ADC_1_SetGain
 1082              		.global	__aeabi_idiv
 1083              		.section	.text.ADC_1_CountsTo_mVolts,"ax",%progbits
 1084              		.align	2
 1085              		.global	ADC_1_CountsTo_mVolts
 1086              		.code	16
 1087              		.thumb_func
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 33


 1088              		.type	ADC_1_CountsTo_mVolts, %function
 1089              	ADC_1_CountsTo_mVolts:
 1090              	.LFB16:
 730:.\Generated_Source\PSoC4/ADC_1.c **** 
 731:.\Generated_Source\PSoC4/ADC_1.c **** 
 732:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_DEFAULT_JUSTIFICATION_SEL == ADC_1__RIGHT)
 733:.\Generated_Source\PSoC4/ADC_1.c **** 
 734:.\Generated_Source\PSoC4/ADC_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC_1.c ****     *
 739:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC_1.c ****     *
 743:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC_1.c ****     *
 747:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC_1.c ****     *
 750:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC_1.c ****     int16 ADC_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1091              		.loc 1 757 0
 1092              		.cfi_startproc
 1093 0000 80B5     		push	{r7, lr}
 1094              		.cfi_def_cfa_offset 8
 1095              		.cfi_offset 7, -8
 1096              		.cfi_offset 14, -4
 1097 0002 84B0     		sub	sp, sp, #16
 1098              		.cfi_def_cfa_offset 24
 1099 0004 00AF     		add	r7, sp, #0
 1100              		.cfi_def_cfa_register 7
 1101 0006 7860     		str	r0, [r7, #4]
 1102 0008 0A1C     		mov	r2, r1
 1103 000a BB1C     		add	r3, r7, #2
 1104 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC_1.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC_1.c **** 
 760:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1105              		.loc 1 761 0
 1106 000e 7B68     		ldr	r3, [r7, #4]
 1107 0010 012B     		cmp	r3, #1
 1108 0012 02D9     		bls	.L79
 1109              		.loc 1 761 0 is_stmt 0 discriminator 1
 1110 0014 0020     		mov	r0, #0
 1111 0016 FFF7FEFF 		bl	CyHalt
 1112              	.L79:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 34


 762:.\Generated_Source\PSoC4/ADC_1.c **** 
 763:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC_1.c ****             {
 767:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC_1.c ****             }
 769:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC_1.c **** 
 771:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1113              		.loc 1 772 0 is_stmt 1
 1114 001a BB1C     		add	r3, r7, #2
 1115 001c 1A88     		ldrh	r2, [r3]
 1116 001e 1E4B     		ldr	r3, .L85
 1117 0020 7968     		ldr	r1, [r7, #4]
 1118 0022 4900     		lsl	r1, r1, #1
 1119 0024 CB5A     		ldrh	r3, [r1, r3]
 1120 0026 9BB2     		uxth	r3, r3
 1121 0028 9BB2     		uxth	r3, r3
 1122 002a D31A     		sub	r3, r2, r3
 1123 002c 9AB2     		uxth	r2, r3
 1124 002e BB1C     		add	r3, r7, #2
 1125 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC_1.c **** 
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1126              		.loc 1 774 0
 1127 0032 BB1C     		add	r3, r7, #2
 1128 0034 0021     		mov	r1, #0
 1129 0036 5B5E     		ldrsh	r3, [r3, r1]
 1130 0038 184A     		ldr	r2, .L85+4
 1131 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC_1.c ****                  (ADC_1_countsPer10Volt[chan] / 2) : (-(ADC_1_countsPer10Volt[chan] / 2)) ))
 1132              		.loc 1 775 0
 1133 003c BB1C     		add	r3, r7, #2
 1134 003e 0021     		mov	r1, #0
 1135 0040 5B5E     		ldrsh	r3, [r3, r1]
 1136 0042 002B     		cmp	r3, #0
 1137 0044 08DD     		ble	.L80
 1138              		.loc 1 775 0 is_stmt 0 discriminator 1
 1139 0046 164B     		ldr	r3, .L85+8
 1140 0048 7968     		ldr	r1, [r7, #4]
 1141 004a 8900     		lsl	r1, r1, #2
 1142 004c CB58     		ldr	r3, [r1, r3]
 1143 004e 002B     		cmp	r3, #0
 1144 0050 00DA     		bge	.L81
 1145 0052 0133     		add	r3, r3, #1
 1146              	.L81:
 1147 0054 5B10     		asr	r3, r3, #1
 1148 0056 08E0     		b	.L82
 1149              	.L80:
 1150              		.loc 1 775 0 discriminator 2
 1151 0058 114B     		ldr	r3, .L85+8
 1152 005a 7968     		ldr	r1, [r7, #4]
 1153 005c 8900     		lsl	r1, r1, #2
 1154 005e CB58     		ldr	r3, [r1, r3]
 1155 0060 002B     		cmp	r3, #0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 35


 1156 0062 00DA     		bge	.L83
 1157 0064 0133     		add	r3, r3, #1
 1158              	.L83:
 1159 0066 5B10     		asr	r3, r3, #1
 1160 0068 5B42     		neg	r3, r3
 1161              	.L82:
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1162              		.loc 1 774 0 is_stmt 1
 1163 006a D218     		add	r2, r2, r3
 776:.\Generated_Source\PSoC4/ADC_1.c ****                  / ADC_1_countsPer10Volt[chan]);
 1164              		.loc 1 776 0
 1165 006c 0C4B     		ldr	r3, .L85+8
 1166 006e 7968     		ldr	r1, [r7, #4]
 1167 0070 8900     		lsl	r1, r1, #2
 1168 0072 CB58     		ldr	r3, [r1, r3]
 1169 0074 101C     		mov	r0, r2
 1170 0076 191C     		mov	r1, r3
 1171 0078 FFF7FEFF 		bl	__aeabi_idiv
 1172 007c 031C     		mov	r3, r0
 1173 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1174              		.loc 1 774 0
 1175 0080 3B1C     		mov	r3, r7
 1176 0082 0E33     		add	r3, r3, #14
 1177 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_1.c **** 
 778:.\Generated_Source\PSoC4/ADC_1.c ****         return( mVolts );
 1178              		.loc 1 778 0
 1179 0086 3B1C     		mov	r3, r7
 1180 0088 0E33     		add	r3, r3, #14
 1181 008a 1B88     		ldrh	r3, [r3]
 1182 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1183              		.loc 1 779 0
 1184 008e 181C     		mov	r0, r3
 1185 0090 BD46     		mov	sp, r7
 1186 0092 04B0     		add	sp, sp, #16
 1187              		@ sp needed
 1188 0094 80BD     		pop	{r7, pc}
 1189              	.L86:
 1190 0096 C046     		.align	2
 1191              	.L85:
 1192 0098 00000000 		.word	ADC_1_offset
 1193 009c 10270000 		.word	10000
 1194 00a0 00000000 		.word	ADC_1_countsPer10Volt
 1195              		.cfi_endproc
 1196              	.LFE16:
 1197              		.size	ADC_1_CountsTo_mVolts, .-ADC_1_CountsTo_mVolts
 1198              		.global	__aeabi_lmul
 1199              		.global	__aeabi_ldivmod
 1200              		.section	.text.ADC_1_CountsTo_uVolts,"ax",%progbits
 1201              		.align	2
 1202              		.global	ADC_1_CountsTo_uVolts
 1203              		.code	16
 1204              		.thumb_func
 1205              		.type	ADC_1_CountsTo_uVolts, %function
 1206              	ADC_1_CountsTo_uVolts:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 36


 1207              	.LFB17:
 780:.\Generated_Source\PSoC4/ADC_1.c **** 
 781:.\Generated_Source\PSoC4/ADC_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC_1.c ****     *
 786:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC_1.c ****     *
 790:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC_1.c ****     *
 794:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC_1.c ****     *
 797:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC_1.c ****     *
 802:.\Generated_Source\PSoC4/ADC_1.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC_1.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC_1.c ****     *
 809:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC_1.c ****     int32 ADC_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1208              		.loc 1 811 0
 1209              		.cfi_startproc
 1210 0000 B0B5     		push	{r4, r5, r7, lr}
 1211              		.cfi_def_cfa_offset 16
 1212              		.cfi_offset 4, -16
 1213              		.cfi_offset 5, -12
 1214              		.cfi_offset 7, -8
 1215              		.cfi_offset 14, -4
 1216 0002 86B0     		sub	sp, sp, #24
 1217              		.cfi_def_cfa_offset 40
 1218 0004 00AF     		add	r7, sp, #0
 1219              		.cfi_def_cfa_register 7
 1220 0006 F860     		str	r0, [r7, #12]
 1221 0008 0A1C     		mov	r2, r1
 1222 000a 3B1C     		mov	r3, r7
 1223 000c 0A33     		add	r3, r3, #10
 1224 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC_1.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC_1.c **** 
 814:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1225              		.loc 1 815 0
 1226 0010 FB68     		ldr	r3, [r7, #12]
 1227 0012 012B     		cmp	r3, #1
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 37


 1228 0014 02D9     		bls	.L88
 1229              		.loc 1 815 0 is_stmt 0 discriminator 1
 1230 0016 0020     		mov	r0, #0
 1231 0018 FFF7FEFF 		bl	CyHalt
 1232              	.L88:
 816:.\Generated_Source\PSoC4/ADC_1.c **** 
 817:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC_1.c ****             {
 821:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC_1.c ****             }
 823:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC_1.c **** 
 825:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1233              		.loc 1 826 0 is_stmt 1
 1234 001c 3B1C     		mov	r3, r7
 1235 001e 0A33     		add	r3, r3, #10
 1236 0020 1A88     		ldrh	r2, [r3]
 1237 0022 1B4B     		ldr	r3, .L90+8
 1238 0024 F968     		ldr	r1, [r7, #12]
 1239 0026 4900     		lsl	r1, r1, #1
 1240 0028 CB5A     		ldrh	r3, [r1, r3]
 1241 002a 9BB2     		uxth	r3, r3
 1242 002c 9BB2     		uxth	r3, r3
 1243 002e D31A     		sub	r3, r2, r3
 1244 0030 9AB2     		uxth	r2, r3
 1245 0032 3B1C     		mov	r3, r7
 1246 0034 0A33     		add	r3, r3, #10
 1247 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC_1.c **** 
 828:.\Generated_Source\PSoC4/ADC_1.c ****         uVolts = ((int64)adcCounts * ADC_1_10UV_COUNTS) / ADC_1_countsPer10Volt[chan];
 1248              		.loc 1 828 0
 1249 0038 3B1C     		mov	r3, r7
 1250 003a 0A33     		add	r3, r3, #10
 1251 003c 1B88     		ldrh	r3, [r3]
 1252 003e 1BB2     		sxth	r3, r3
 1253 0040 3B60     		str	r3, [r7]
 1254 0042 DB17     		asr	r3, r3, #31
 1255 0044 7B60     		str	r3, [r7, #4]
 1256 0046 3868     		ldr	r0, [r7]
 1257 0048 7968     		ldr	r1, [r7, #4]
 1258 004a 104B     		ldr	r3, .L90+4
 1259 004c 0E4A     		ldr	r2, .L90
 1260 004e FFF7FEFF 		bl	__aeabi_lmul
 1261 0052 021C     		mov	r2, r0
 1262 0054 0B1C     		mov	r3, r1
 1263 0056 0F49     		ldr	r1, .L90+12
 1264 0058 F868     		ldr	r0, [r7, #12]
 1265 005a 8000     		lsl	r0, r0, #2
 1266 005c 4158     		ldr	r1, [r0, r1]
 1267 005e 0C1C     		mov	r4, r1
 1268 0060 C917     		asr	r1, r1, #31
 1269 0062 0D1C     		mov	r5, r1
 1270 0064 101C     		mov	r0, r2
 1271 0066 191C     		mov	r1, r3
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 38


 1272 0068 221C     		mov	r2, r4
 1273 006a 2B1C     		mov	r3, r5
 1274 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1275 0070 031C     		mov	r3, r0
 1276 0072 0C1C     		mov	r4, r1
 1277 0074 3B61     		str	r3, [r7, #16]
 1278 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC_1.c **** 
 830:.\Generated_Source\PSoC4/ADC_1.c ****         return( (int32)uVolts );
 1279              		.loc 1 830 0
 1280 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1281              		.loc 1 831 0
 1282 007a 181C     		mov	r0, r3
 1283 007c BD46     		mov	sp, r7
 1284 007e 06B0     		add	sp, sp, #24
 1285              		@ sp needed
 1286 0080 B0BD     		pop	{r4, r5, r7, pc}
 1287              	.L91:
 1288 0082 C046C046 		.align	3
 1288      C046
 1289              	.L90:
 1290 0088 80969800 		.word	10000000
 1291 008c 00000000 		.word	0
 1292 0090 00000000 		.word	ADC_1_offset
 1293 0094 00000000 		.word	ADC_1_countsPer10Volt
 1294              		.cfi_endproc
 1295              	.LFE17:
 1296              		.size	ADC_1_CountsTo_uVolts, .-ADC_1_CountsTo_uVolts
 1297              		.global	__aeabi_i2f
 1298              		.global	__aeabi_fmul
 1299              		.global	__aeabi_fdiv
 1300              		.section	.text.ADC_1_CountsTo_Volts,"ax",%progbits
 1301              		.align	2
 1302              		.global	ADC_1_CountsTo_Volts
 1303              		.code	16
 1304              		.thumb_func
 1305              		.type	ADC_1_CountsTo_Volts, %function
 1306              	ADC_1_CountsTo_Volts:
 1307              	.LFB18:
 832:.\Generated_Source\PSoC4/ADC_1.c **** 
 833:.\Generated_Source\PSoC4/ADC_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC_1.c ****     *
 838:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC_1.c ****     *
 842:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC_1.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC_1.c ****     *
 846:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC_1.c ****     *
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 39


 849:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC_1.c ****     *
 854:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC_1.c ****     float32 ADC_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1308              		.loc 1 856 0
 1309              		.cfi_startproc
 1310 0000 90B5     		push	{r4, r7, lr}
 1311              		.cfi_def_cfa_offset 12
 1312              		.cfi_offset 4, -12
 1313              		.cfi_offset 7, -8
 1314              		.cfi_offset 14, -4
 1315 0002 85B0     		sub	sp, sp, #20
 1316              		.cfi_def_cfa_offset 32
 1317 0004 00AF     		add	r7, sp, #0
 1318              		.cfi_def_cfa_register 7
 1319 0006 7860     		str	r0, [r7, #4]
 1320 0008 0A1C     		mov	r2, r1
 1321 000a BB1C     		add	r3, r7, #2
 1322 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC_1.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC_1.c **** 
 859:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1323              		.loc 1 860 0
 1324 000e 7B68     		ldr	r3, [r7, #4]
 1325 0010 012B     		cmp	r3, #1
 1326 0012 02D9     		bls	.L93
 1327              		.loc 1 860 0 is_stmt 0 discriminator 1
 1328 0014 0020     		mov	r0, #0
 1329 0016 FFF7FEFF 		bl	CyHalt
 1330              	.L93:
 861:.\Generated_Source\PSoC4/ADC_1.c **** 
 862:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC_1.c ****             {
 866:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC_1.c ****             }
 868:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC_1.c **** 
 870:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1331              		.loc 1 871 0 is_stmt 1
 1332 001a BB1C     		add	r3, r7, #2
 1333 001c 1A88     		ldrh	r2, [r3]
 1334 001e 154B     		ldr	r3, .L95
 1335 0020 7968     		ldr	r1, [r7, #4]
 1336 0022 4900     		lsl	r1, r1, #1
 1337 0024 CB5A     		ldrh	r3, [r1, r3]
 1338 0026 9BB2     		uxth	r3, r3
 1339 0028 9BB2     		uxth	r3, r3
 1340 002a D31A     		sub	r3, r2, r3
 1341 002c 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 40


 1342 002e BB1C     		add	r3, r7, #2
 1343 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC_1.c **** 
 873:.\Generated_Source\PSoC4/ADC_1.c ****         volts = ((float32)adcCounts * ADC_1_10V_COUNTS) / (float32)ADC_1_countsPer10Volt[chan];
 1344              		.loc 1 873 0
 1345 0032 BB1C     		add	r3, r7, #2
 1346 0034 0022     		mov	r2, #0
 1347 0036 9B5E     		ldrsh	r3, [r3, r2]
 1348 0038 181C     		mov	r0, r3
 1349 003a FFF7FEFF 		bl	__aeabi_i2f
 1350 003e 031C     		add	r3, r0, #0
 1351 0040 181C     		add	r0, r3, #0
 1352 0042 0D49     		ldr	r1, .L95+4
 1353 0044 FFF7FEFF 		bl	__aeabi_fmul
 1354 0048 031C     		add	r3, r0, #0
 1355 004a 1C1C     		add	r4, r3, #0
 1356 004c 0B4B     		ldr	r3, .L95+8
 1357 004e 7A68     		ldr	r2, [r7, #4]
 1358 0050 9200     		lsl	r2, r2, #2
 1359 0052 D358     		ldr	r3, [r2, r3]
 1360 0054 181C     		mov	r0, r3
 1361 0056 FFF7FEFF 		bl	__aeabi_i2f
 1362 005a 031C     		add	r3, r0, #0
 1363 005c 201C     		add	r0, r4, #0
 1364 005e 191C     		add	r1, r3, #0
 1365 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1366 0064 031C     		add	r3, r0, #0
 1367 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC_1.c **** 
 875:.\Generated_Source\PSoC4/ADC_1.c ****         return( volts );
 1368              		.loc 1 875 0
 1369 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1370              		.loc 1 876 0
 1371 006a 181C     		add	r0, r3, #0
 1372 006c BD46     		mov	sp, r7
 1373 006e 05B0     		add	sp, sp, #20
 1374              		@ sp needed
 1375 0070 90BD     		pop	{r4, r7, pc}
 1376              	.L96:
 1377 0072 C046     		.align	2
 1378              	.L95:
 1379 0074 00000000 		.word	ADC_1_offset
 1380 0078 00002041 		.word	1092616192
 1381 007c 00000000 		.word	ADC_1_countsPer10Volt
 1382              		.cfi_endproc
 1383              	.LFE18:
 1384              		.size	ADC_1_CountsTo_Volts, .-ADC_1_CountsTo_Volts
 1385              		.section	.rodata
 1386              		.align	2
 1387              		.type	ADC_1_InputsPlacement.4745, %object
 1388              		.size	ADC_1_InputsPlacement.4745, 2
 1389              	ADC_1_InputsPlacement.4745:
 1390 0008 00       		.byte	0
 1391 0009 70       		.byte	112
 1392 000a 0000     		.text
 1393              	.Letext0:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 41


 1394              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1395              		.section	.debug_info,"",%progbits
 1396              	.Ldebug_info0:
 1397 0000 A8040000 		.4byte	0x4a8
 1398 0004 0400     		.2byte	0x4
 1399 0006 00000000 		.4byte	.Ldebug_abbrev0
 1400 000a 04       		.byte	0x4
 1401 000b 01       		.uleb128 0x1
 1402 000c 51020000 		.4byte	.LASF61
 1403 0010 01       		.byte	0x1
 1404 0011 28000000 		.4byte	.LASF62
 1405 0015 6B010000 		.4byte	.LASF63
 1406 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1407 001d 00000000 		.4byte	0
 1408 0021 00000000 		.4byte	.Ldebug_line0
 1409 0025 02       		.uleb128 0x2
 1410 0026 01       		.byte	0x1
 1411 0027 06       		.byte	0x6
 1412 0028 64000000 		.4byte	.LASF0
 1413 002c 02       		.uleb128 0x2
 1414 002d 01       		.byte	0x1
 1415 002e 08       		.byte	0x8
 1416 002f 0B030000 		.4byte	.LASF1
 1417 0033 02       		.uleb128 0x2
 1418 0034 02       		.byte	0x2
 1419 0035 05       		.byte	0x5
 1420 0036 41030000 		.4byte	.LASF2
 1421 003a 02       		.uleb128 0x2
 1422 003b 02       		.byte	0x2
 1423 003c 07       		.byte	0x7
 1424 003d AD010000 		.4byte	.LASF3
 1425 0041 02       		.uleb128 0x2
 1426 0042 04       		.byte	0x4
 1427 0043 05       		.byte	0x5
 1428 0044 A3000000 		.4byte	.LASF4
 1429 0048 02       		.uleb128 0x2
 1430 0049 04       		.byte	0x4
 1431 004a 07       		.byte	0x7
 1432 004b 49010000 		.4byte	.LASF5
 1433 004f 02       		.uleb128 0x2
 1434 0050 08       		.byte	0x8
 1435 0051 05       		.byte	0x5
 1436 0052 56000000 		.4byte	.LASF6
 1437 0056 02       		.uleb128 0x2
 1438 0057 08       		.byte	0x8
 1439 0058 07       		.byte	0x7
 1440 0059 7B000000 		.4byte	.LASF7
 1441 005d 03       		.uleb128 0x3
 1442 005e 04       		.byte	0x4
 1443 005f 05       		.byte	0x5
 1444 0060 696E7400 		.ascii	"int\000"
 1445 0064 02       		.uleb128 0x2
 1446 0065 04       		.byte	0x4
 1447 0066 07       		.byte	0x7
 1448 0067 22010000 		.4byte	.LASF8
 1449 006b 04       		.uleb128 0x4
 1450 006c AC000000 		.4byte	.LASF9
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 42


 1451 0070 02       		.byte	0x2
 1452 0071 C1       		.byte	0xc1
 1453 0072 2C000000 		.4byte	0x2c
 1454 0076 04       		.uleb128 0x4
 1455 0077 00000000 		.4byte	.LASF10
 1456 007b 02       		.byte	0x2
 1457 007c C2       		.byte	0xc2
 1458 007d 3A000000 		.4byte	0x3a
 1459 0081 04       		.uleb128 0x4
 1460 0082 EC000000 		.4byte	.LASF11
 1461 0086 02       		.byte	0x2
 1462 0087 C3       		.byte	0xc3
 1463 0088 48000000 		.4byte	0x48
 1464 008c 04       		.uleb128 0x4
 1465 008d AE030000 		.4byte	.LASF12
 1466 0091 02       		.byte	0x2
 1467 0092 C5       		.byte	0xc5
 1468 0093 33000000 		.4byte	0x33
 1469 0097 04       		.uleb128 0x4
 1470 0098 9D000000 		.4byte	.LASF13
 1471 009c 02       		.byte	0x2
 1472 009d C6       		.byte	0xc6
 1473 009e 41000000 		.4byte	0x41
 1474 00a2 04       		.uleb128 0x4
 1475 00a3 08020000 		.4byte	.LASF14
 1476 00a7 02       		.byte	0x2
 1477 00a8 C7       		.byte	0xc7
 1478 00a9 AD000000 		.4byte	0xad
 1479 00ad 02       		.uleb128 0x2
 1480 00ae 04       		.byte	0x4
 1481 00af 04       		.byte	0x4
 1482 00b0 4B020000 		.4byte	.LASF15
 1483 00b4 02       		.uleb128 0x2
 1484 00b5 08       		.byte	0x8
 1485 00b6 04       		.byte	0x4
 1486 00b7 B2000000 		.4byte	.LASF16
 1487 00bb 04       		.uleb128 0x4
 1488 00bc 45020000 		.4byte	.LASF17
 1489 00c0 02       		.byte	0x2
 1490 00c1 CC       		.byte	0xcc
 1491 00c2 4F000000 		.4byte	0x4f
 1492 00c6 02       		.uleb128 0x2
 1493 00c7 01       		.byte	0x1
 1494 00c8 08       		.byte	0x8
 1495 00c9 56030000 		.4byte	.LASF18
 1496 00cd 05       		.uleb128 0x5
 1497 00ce 02020000 		.4byte	.LASF19
 1498 00d2 02       		.byte	0x2
 1499 00d3 6D01     		.2byte	0x16d
 1500 00d5 D9000000 		.4byte	0xd9
 1501 00d9 06       		.uleb128 0x6
 1502 00da 81000000 		.4byte	0x81
 1503 00de 02       		.uleb128 0x2
 1504 00df 04       		.byte	0x4
 1505 00e0 07       		.byte	0x7
 1506 00e1 10020000 		.4byte	.LASF20
 1507 00e5 07       		.uleb128 0x7
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 43


 1508 00e6 F8000000 		.4byte	.LASF25
 1509 00ea 01       		.byte	0x1
 1510 00eb 3F       		.byte	0x3f
 1511 00ec 00000000 		.4byte	.LFB0
 1512 00f0 24000000 		.4byte	.LFE0-.LFB0
 1513 00f4 01       		.uleb128 0x1
 1514 00f5 9C       		.byte	0x9c
 1515 00f6 08       		.uleb128 0x8
 1516 00f7 70000000 		.4byte	.LASF36
 1517 00fb 01       		.byte	0x1
 1518 00fc 5E       		.byte	0x5e
 1519 00fd 00000000 		.4byte	.LFB1
 1520 0101 58020000 		.4byte	.LFE1-.LFB1
 1521 0105 01       		.uleb128 0x1
 1522 0106 9C       		.byte	0x9c
 1523 0107 47010000 		.4byte	0x147
 1524 010b 09       		.uleb128 0x9
 1525 010c 4B030000 		.4byte	.LASF21
 1526 0110 01       		.byte	0x1
 1527 0111 60       		.byte	0x60
 1528 0112 81000000 		.4byte	0x81
 1529 0116 02       		.uleb128 0x2
 1530 0117 91       		.byte	0x91
 1531 0118 6C       		.sleb128 -20
 1532 0119 09       		.uleb128 0x9
 1533 011a 61010000 		.4byte	.LASF22
 1534 011e 01       		.byte	0x1
 1535 011f 61       		.byte	0x61
 1536 0120 81000000 		.4byte	0x81
 1537 0124 02       		.uleb128 0x2
 1538 0125 91       		.byte	0x91
 1539 0126 64       		.sleb128 -28
 1540 0127 09       		.uleb128 0x9
 1541 0128 0F000000 		.4byte	.LASF23
 1542 012c 01       		.byte	0x1
 1543 012d 62       		.byte	0x62
 1544 012e 97000000 		.4byte	0x97
 1545 0132 02       		.uleb128 0x2
 1546 0133 91       		.byte	0x91
 1547 0134 68       		.sleb128 -24
 1548 0135 09       		.uleb128 0x9
 1549 0136 88030000 		.4byte	.LASF24
 1550 013a 01       		.byte	0x1
 1551 013b 65       		.byte	0x65
 1552 013c 57010000 		.4byte	0x157
 1553 0140 05       		.uleb128 0x5
 1554 0141 03       		.byte	0x3
 1555 0142 08000000 		.4byte	ADC_1_InputsPlacement.4745
 1556 0146 00       		.byte	0
 1557 0147 0A       		.uleb128 0xa
 1558 0148 6B000000 		.4byte	0x6b
 1559 014c 57010000 		.4byte	0x157
 1560 0150 0B       		.uleb128 0xb
 1561 0151 DE000000 		.4byte	0xde
 1562 0155 01       		.byte	0x1
 1563 0156 00       		.byte	0
 1564 0157 0C       		.uleb128 0xc
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 44


 1565 0158 47010000 		.4byte	0x147
 1566 015c 0D       		.uleb128 0xd
 1567 015d 49000000 		.4byte	.LASF26
 1568 0161 01       		.byte	0x1
 1569 0162 4A01     		.2byte	0x14a
 1570 0164 00000000 		.4byte	.LFB2
 1571 0168 28000000 		.4byte	.LFE2-.LFB2
 1572 016c 01       		.uleb128 0x1
 1573 016d 9C       		.byte	0x9c
 1574 016e 0E       		.uleb128 0xe
 1575 016f 92000000 		.4byte	.LASF27
 1576 0173 01       		.byte	0x1
 1577 0174 6D01     		.2byte	0x16d
 1578 0176 00000000 		.4byte	.LFB3
 1579 017a 18000000 		.4byte	.LFE3-.LFB3
 1580 017e 01       		.uleb128 0x1
 1581 017f 9C       		.byte	0x9c
 1582 0180 0E       		.uleb128 0xe
 1583 0181 36010000 		.4byte	.LASF28
 1584 0185 01       		.byte	0x1
 1585 0186 8701     		.2byte	0x187
 1586 0188 00000000 		.4byte	.LFB4
 1587 018c 1C000000 		.4byte	.LFE4-.LFB4
 1588 0190 01       		.uleb128 0x1
 1589 0191 9C       		.byte	0x9c
 1590 0192 0E       		.uleb128 0xe
 1591 0193 16000000 		.4byte	.LASF29
 1592 0197 01       		.byte	0x1
 1593 0198 A001     		.2byte	0x1a0
 1594 019a 00000000 		.4byte	.LFB5
 1595 019e 1C000000 		.4byte	.LFE5-.LFB5
 1596 01a2 01       		.uleb128 0x1
 1597 01a3 9C       		.byte	0x9c
 1598 01a4 0F       		.uleb128 0xf
 1599 01a5 E4020000 		.4byte	.LASF31
 1600 01a9 01       		.byte	0x1
 1601 01aa C201     		.2byte	0x1c2
 1602 01ac 81000000 		.4byte	0x81
 1603 01b0 00000000 		.4byte	.LFB6
 1604 01b4 7C000000 		.4byte	.LFE6-.LFB6
 1605 01b8 01       		.uleb128 0x1
 1606 01b9 9C       		.byte	0x9c
 1607 01ba DD010000 		.4byte	0x1dd
 1608 01be 10       		.uleb128 0x10
 1609 01bf 1A010000 		.4byte	.LASF33
 1610 01c3 01       		.byte	0x1
 1611 01c4 C201     		.2byte	0x1c2
 1612 01c6 81000000 		.4byte	0x81
 1613 01ca 02       		.uleb128 0x2
 1614 01cb 91       		.byte	0x91
 1615 01cc 6C       		.sleb128 -20
 1616 01cd 11       		.uleb128 0x11
 1617 01ce 81030000 		.4byte	.LASF30
 1618 01d2 01       		.byte	0x1
 1619 01d3 C401     		.2byte	0x1c4
 1620 01d5 81000000 		.4byte	0x81
 1621 01d9 02       		.uleb128 0x2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 45


 1622 01da 91       		.byte	0x91
 1623 01db 74       		.sleb128 -12
 1624 01dc 00       		.byte	0
 1625 01dd 12       		.uleb128 0x12
 1626 01de 19030000 		.4byte	.LASF32
 1627 01e2 01       		.byte	0x1
 1628 01e3 F801     		.2byte	0x1f8
 1629 01e5 8C000000 		.4byte	0x8c
 1630 01e9 00000000 		.4byte	.LFB7
 1631 01ed 4C000000 		.4byte	.LFE7-.LFB7
 1632 01f1 01       		.uleb128 0x1
 1633 01f2 9C       		.byte	0x9c
 1634 01f3 16020000 		.4byte	0x216
 1635 01f7 10       		.uleb128 0x10
 1636 01f8 51030000 		.4byte	.LASF34
 1637 01fc 01       		.byte	0x1
 1638 01fd F801     		.2byte	0x1f8
 1639 01ff 81000000 		.4byte	0x81
 1640 0203 02       		.uleb128 0x2
 1641 0204 91       		.byte	0x91
 1642 0205 6C       		.sleb128 -20
 1643 0206 11       		.uleb128 0x11
 1644 0207 B4030000 		.4byte	.LASF35
 1645 020b 01       		.byte	0x1
 1646 020c FA01     		.2byte	0x1fa
 1647 020e 81000000 		.4byte	0x81
 1648 0212 02       		.uleb128 0x2
 1649 0213 91       		.byte	0x91
 1650 0214 74       		.sleb128 -12
 1651 0215 00       		.byte	0
 1652 0216 13       		.uleb128 0x13
 1653 0217 B9000000 		.4byte	.LASF37
 1654 021b 01       		.byte	0x1
 1655 021c 2502     		.2byte	0x225
 1656 021e 00000000 		.4byte	.LFB8
 1657 0222 1C000000 		.4byte	.LFE8-.LFB8
 1658 0226 01       		.uleb128 0x1
 1659 0227 9C       		.byte	0x9c
 1660 0228 3C020000 		.4byte	0x23c
 1661 022c 10       		.uleb128 0x10
 1662 022d F3000000 		.4byte	.LASF38
 1663 0231 01       		.byte	0x1
 1664 0232 2502     		.2byte	0x225
 1665 0234 81000000 		.4byte	0x81
 1666 0238 02       		.uleb128 0x2
 1667 0239 91       		.byte	0x91
 1668 023a 74       		.sleb128 -12
 1669 023b 00       		.byte	0
 1670 023c 0E       		.uleb128 0xe
 1671 023d 04010000 		.4byte	.LASF39
 1672 0241 01       		.byte	0x1
 1673 0242 3B02     		.2byte	0x23b
 1674 0244 00000000 		.4byte	.LFB9
 1675 0248 1C000000 		.4byte	.LFE9-.LFB9
 1676 024c 01       		.uleb128 0x1
 1677 024d 9C       		.byte	0x9c
 1678 024e 13       		.uleb128 0x13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 46


 1679 024f D6010000 		.4byte	.LASF40
 1680 0253 01       		.byte	0x1
 1681 0254 5102     		.2byte	0x251
 1682 0256 00000000 		.4byte	.LFB10
 1683 025a 30000000 		.4byte	.LFE10-.LFB10
 1684 025e 01       		.uleb128 0x1
 1685 025f 9C       		.byte	0x9c
 1686 0260 74020000 		.4byte	0x274
 1687 0264 10       		.uleb128 0x10
 1688 0265 19020000 		.4byte	.LASF41
 1689 0269 01       		.byte	0x1
 1690 026a 5102     		.2byte	0x251
 1691 026c 81000000 		.4byte	0x81
 1692 0270 02       		.uleb128 0x2
 1693 0271 91       		.byte	0x91
 1694 0272 74       		.sleb128 -12
 1695 0273 00       		.byte	0
 1696 0274 13       		.uleb128 0x13
 1697 0275 E8010000 		.4byte	.LASF42
 1698 0279 01       		.byte	0x1
 1699 027a 6602     		.2byte	0x266
 1700 027c 00000000 		.4byte	.LFB11
 1701 0280 2C000000 		.4byte	.LFE11-.LFB11
 1702 0284 01       		.uleb128 0x1
 1703 0285 9C       		.byte	0x9c
 1704 0286 9A020000 		.4byte	0x29a
 1705 028a 10       		.uleb128 0x10
 1706 028b CD020000 		.4byte	.LASF43
 1707 028f 01       		.byte	0x1
 1708 0290 6602     		.2byte	0x266
 1709 0292 81000000 		.4byte	0x81
 1710 0296 02       		.uleb128 0x2
 1711 0297 91       		.byte	0x91
 1712 0298 74       		.sleb128 -12
 1713 0299 00       		.byte	0
 1714 029a 13       		.uleb128 0x13
 1715 029b CB000000 		.4byte	.LASF44
 1716 029f 01       		.byte	0x1
 1717 02a0 7E02     		.2byte	0x27e
 1718 02a2 00000000 		.4byte	.LFB12
 1719 02a6 1C000000 		.4byte	.LFE12-.LFB12
 1720 02aa 01       		.uleb128 0x1
 1721 02ab 9C       		.byte	0x9c
 1722 02ac C0020000 		.4byte	0x2c0
 1723 02b0 10       		.uleb128 0x10
 1724 02b1 F3000000 		.4byte	.LASF38
 1725 02b5 01       		.byte	0x1
 1726 02b6 7E02     		.2byte	0x27e
 1727 02b8 81000000 		.4byte	0x81
 1728 02bc 02       		.uleb128 0x2
 1729 02bd 91       		.byte	0x91
 1730 02be 74       		.sleb128 -12
 1731 02bf 00       		.byte	0
 1732 02c0 13       		.uleb128 0x13
 1733 02c1 FA020000 		.4byte	.LASF45
 1734 02c5 01       		.byte	0x1
 1735 02c6 9502     		.2byte	0x295
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 47


 1736 02c8 00000000 		.4byte	.LFB13
 1737 02cc 1C000000 		.4byte	.LFE13-.LFB13
 1738 02d0 01       		.uleb128 0x1
 1739 02d1 9C       		.byte	0x9c
 1740 02d2 E6020000 		.4byte	0x2e6
 1741 02d6 10       		.uleb128 0x10
 1742 02d7 F3000000 		.4byte	.LASF38
 1743 02db 01       		.byte	0x1
 1744 02dc 9502     		.2byte	0x295
 1745 02de 81000000 		.4byte	0x81
 1746 02e2 02       		.uleb128 0x2
 1747 02e3 91       		.byte	0x91
 1748 02e4 74       		.sleb128 -12
 1749 02e5 00       		.byte	0
 1750 02e6 14       		.uleb128 0x14
 1751 02e7 9E030000 		.4byte	.LASF46
 1752 02eb 01       		.byte	0x1
 1753 02ec B102     		.2byte	0x2b1
 1754 02ee 00000000 		.4byte	.LFB14
 1755 02f2 30000000 		.4byte	.LFE14-.LFB14
 1756 02f6 01       		.uleb128 0x1
 1757 02f7 9C       		.byte	0x9c
 1758 02f8 1B030000 		.4byte	0x31b
 1759 02fc 10       		.uleb128 0x10
 1760 02fd 51030000 		.4byte	.LASF34
 1761 0301 01       		.byte	0x1
 1762 0302 B102     		.2byte	0x2b1
 1763 0304 81000000 		.4byte	0x81
 1764 0308 02       		.uleb128 0x2
 1765 0309 91       		.byte	0x91
 1766 030a 74       		.sleb128 -12
 1767 030b 10       		.uleb128 0x10
 1768 030c 70030000 		.4byte	.LASF47
 1769 0310 01       		.byte	0x1
 1770 0311 B102     		.2byte	0x2b1
 1771 0313 8C000000 		.4byte	0x8c
 1772 0317 02       		.uleb128 0x2
 1773 0318 91       		.byte	0x91
 1774 0319 72       		.sleb128 -14
 1775 031a 00       		.byte	0
 1776 031b 14       		.uleb128 0x14
 1777 031c 37020000 		.4byte	.LASF48
 1778 0320 01       		.byte	0x1
 1779 0321 D302     		.2byte	0x2d3
 1780 0323 00000000 		.4byte	.LFB15
 1781 0327 2C000000 		.4byte	.LFE15-.LFB15
 1782 032b 01       		.uleb128 0x1
 1783 032c 9C       		.byte	0x9c
 1784 032d 50030000 		.4byte	0x350
 1785 0331 10       		.uleb128 0x10
 1786 0332 51030000 		.4byte	.LASF34
 1787 0336 01       		.byte	0x1
 1788 0337 D302     		.2byte	0x2d3
 1789 0339 81000000 		.4byte	0x81
 1790 033d 02       		.uleb128 0x2
 1791 033e 91       		.byte	0x91
 1792 033f 74       		.sleb128 -12
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 48


 1793 0340 10       		.uleb128 0x10
 1794 0341 07000000 		.4byte	.LASF49
 1795 0345 01       		.byte	0x1
 1796 0346 D302     		.2byte	0x2d3
 1797 0348 97000000 		.4byte	0x97
 1798 034c 02       		.uleb128 0x2
 1799 034d 91       		.byte	0x91
 1800 034e 70       		.sleb128 -16
 1801 034f 00       		.byte	0
 1802 0350 12       		.uleb128 0x12
 1803 0351 C0010000 		.4byte	.LASF50
 1804 0355 01       		.byte	0x1
 1805 0356 F402     		.2byte	0x2f4
 1806 0358 8C000000 		.4byte	0x8c
 1807 035c 00000000 		.4byte	.LFB16
 1808 0360 A4000000 		.4byte	.LFE16-.LFB16
 1809 0364 01       		.uleb128 0x1
 1810 0365 9C       		.byte	0x9c
 1811 0366 98030000 		.4byte	0x398
 1812 036a 10       		.uleb128 0x10
 1813 036b 51030000 		.4byte	.LASF34
 1814 036f 01       		.byte	0x1
 1815 0370 F402     		.2byte	0x2f4
 1816 0372 81000000 		.4byte	0x81
 1817 0376 02       		.uleb128 0x2
 1818 0377 91       		.byte	0x91
 1819 0378 6C       		.sleb128 -20
 1820 0379 10       		.uleb128 0x10
 1821 037a 77030000 		.4byte	.LASF51
 1822 037e 01       		.byte	0x1
 1823 037f F402     		.2byte	0x2f4
 1824 0381 8C000000 		.4byte	0x8c
 1825 0385 02       		.uleb128 0x2
 1826 0386 91       		.byte	0x91
 1827 0387 6A       		.sleb128 -22
 1828 0388 11       		.uleb128 0x11
 1829 0389 FB010000 		.4byte	.LASF52
 1830 038d 01       		.byte	0x1
 1831 038e F602     		.2byte	0x2f6
 1832 0390 8C000000 		.4byte	0x8c
 1833 0394 02       		.uleb128 0x2
 1834 0395 91       		.byte	0x91
 1835 0396 76       		.sleb128 -10
 1836 0397 00       		.byte	0
 1837 0398 12       		.uleb128 0x12
 1838 0399 BB030000 		.4byte	.LASF53
 1839 039d 01       		.byte	0x1
 1840 039e 2A03     		.2byte	0x32a
 1841 03a0 97000000 		.4byte	0x97
 1842 03a4 00000000 		.4byte	.LFB17
 1843 03a8 98000000 		.4byte	.LFE17-.LFB17
 1844 03ac 01       		.uleb128 0x1
 1845 03ad 9C       		.byte	0x9c
 1846 03ae E0030000 		.4byte	0x3e0
 1847 03b2 10       		.uleb128 0x10
 1848 03b3 51030000 		.4byte	.LASF34
 1849 03b7 01       		.byte	0x1
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 49


 1850 03b8 2A03     		.2byte	0x32a
 1851 03ba 81000000 		.4byte	0x81
 1852 03be 02       		.uleb128 0x2
 1853 03bf 91       		.byte	0x91
 1854 03c0 64       		.sleb128 -28
 1855 03c1 10       		.uleb128 0x10
 1856 03c2 77030000 		.4byte	.LASF51
 1857 03c6 01       		.byte	0x1
 1858 03c7 2A03     		.2byte	0x32a
 1859 03c9 8C000000 		.4byte	0x8c
 1860 03cd 02       		.uleb128 0x2
 1861 03ce 91       		.byte	0x91
 1862 03cf 62       		.sleb128 -30
 1863 03d0 11       		.uleb128 0x11
 1864 03d1 2F010000 		.4byte	.LASF54
 1865 03d5 01       		.byte	0x1
 1866 03d6 2C03     		.2byte	0x32c
 1867 03d8 BB000000 		.4byte	0xbb
 1868 03dc 02       		.uleb128 0x2
 1869 03dd 91       		.byte	0x91
 1870 03de 68       		.sleb128 -24
 1871 03df 00       		.byte	0
 1872 03e0 12       		.uleb128 0x12
 1873 03e1 5B030000 		.4byte	.LASF55
 1874 03e5 01       		.byte	0x1
 1875 03e6 5703     		.2byte	0x357
 1876 03e8 A2000000 		.4byte	0xa2
 1877 03ec 00000000 		.4byte	.LFB18
 1878 03f0 80000000 		.4byte	.LFE18-.LFB18
 1879 03f4 01       		.uleb128 0x1
 1880 03f5 9C       		.byte	0x9c
 1881 03f6 28040000 		.4byte	0x428
 1882 03fa 10       		.uleb128 0x10
 1883 03fb 51030000 		.4byte	.LASF34
 1884 03ff 01       		.byte	0x1
 1885 0400 5703     		.2byte	0x357
 1886 0402 81000000 		.4byte	0x81
 1887 0406 02       		.uleb128 0x2
 1888 0407 91       		.byte	0x91
 1889 0408 64       		.sleb128 -28
 1890 0409 10       		.uleb128 0x10
 1891 040a 77030000 		.4byte	.LASF51
 1892 040e 01       		.byte	0x1
 1893 040f 5703     		.2byte	0x357
 1894 0411 8C000000 		.4byte	0x8c
 1895 0415 02       		.uleb128 0x2
 1896 0416 91       		.byte	0x91
 1897 0417 62       		.sleb128 -30
 1898 0418 11       		.uleb128 0x11
 1899 0419 5B010000 		.4byte	.LASF56
 1900 041d 01       		.byte	0x1
 1901 041e 5903     		.2byte	0x359
 1902 0420 A2000000 		.4byte	0xa2
 1903 0424 02       		.uleb128 0x2
 1904 0425 91       		.byte	0x91
 1905 0426 6C       		.sleb128 -20
 1906 0427 00       		.byte	0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 50


 1907 0428 0A       		.uleb128 0xa
 1908 0429 81000000 		.4byte	0x81
 1909 042d 38040000 		.4byte	0x438
 1910 0431 0B       		.uleb128 0xb
 1911 0432 DE000000 		.4byte	0xde
 1912 0436 01       		.byte	0x1
 1913 0437 00       		.byte	0
 1914 0438 09       		.uleb128 0x9
 1915 0439 22020000 		.4byte	.LASF57
 1916 043d 01       		.byte	0x1
 1917 043e 21       		.byte	0x21
 1918 043f 49040000 		.4byte	0x449
 1919 0443 05       		.uleb128 0x5
 1920 0444 03       		.byte	0x3
 1921 0445 00000000 		.4byte	ADC_1_channelsConfig
 1922 0449 0C       		.uleb128 0xc
 1923 044a 28040000 		.4byte	0x428
 1924 044e 15       		.uleb128 0x15
 1925 044f DE000000 		.4byte	.LASF58
 1926 0453 01       		.byte	0x1
 1927 0454 18       		.byte	0x18
 1928 0455 6B000000 		.4byte	0x6b
 1929 0459 05       		.uleb128 0x5
 1930 045a 03       		.byte	0x3
 1931 045b 00000000 		.4byte	ADC_1_initVar
 1932 045f 0A       		.uleb128 0xa
 1933 0460 8C000000 		.4byte	0x8c
 1934 0464 6F040000 		.4byte	0x46f
 1935 0468 0B       		.uleb128 0xb
 1936 0469 DE000000 		.4byte	0xde
 1937 046d 01       		.byte	0x1
 1938 046e 00       		.byte	0
 1939 046f 15       		.uleb128 0x15
 1940 0470 D7020000 		.4byte	.LASF59
 1941 0474 01       		.byte	0x1
 1942 0475 19       		.byte	0x19
 1943 0476 80040000 		.4byte	0x480
 1944 047a 05       		.uleb128 0x5
 1945 047b 03       		.byte	0x3
 1946 047c 00000000 		.4byte	ADC_1_offset
 1947 0480 06       		.uleb128 0x6
 1948 0481 5F040000 		.4byte	0x45f
 1949 0485 0A       		.uleb128 0xa
 1950 0486 97000000 		.4byte	0x97
 1951 048a 95040000 		.4byte	0x495
 1952 048e 0B       		.uleb128 0xb
 1953 048f DE000000 		.4byte	0xde
 1954 0493 01       		.byte	0x1
 1955 0494 00       		.byte	0
 1956 0495 15       		.uleb128 0x15
 1957 0496 2B030000 		.4byte	.LASF60
 1958 049a 01       		.byte	0x1
 1959 049b 1A       		.byte	0x1a
 1960 049c A6040000 		.4byte	0x4a6
 1961 04a0 05       		.uleb128 0x5
 1962 04a1 03       		.byte	0x3
 1963 04a2 00000000 		.4byte	ADC_1_countsPer10Volt
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 51


 1964 04a6 06       		.uleb128 0x6
 1965 04a7 85040000 		.4byte	0x485
 1966 04ab 00       		.byte	0
 1967              		.section	.debug_abbrev,"",%progbits
 1968              	.Ldebug_abbrev0:
 1969 0000 01       		.uleb128 0x1
 1970 0001 11       		.uleb128 0x11
 1971 0002 01       		.byte	0x1
 1972 0003 25       		.uleb128 0x25
 1973 0004 0E       		.uleb128 0xe
 1974 0005 13       		.uleb128 0x13
 1975 0006 0B       		.uleb128 0xb
 1976 0007 03       		.uleb128 0x3
 1977 0008 0E       		.uleb128 0xe
 1978 0009 1B       		.uleb128 0x1b
 1979 000a 0E       		.uleb128 0xe
 1980 000b 55       		.uleb128 0x55
 1981 000c 17       		.uleb128 0x17
 1982 000d 11       		.uleb128 0x11
 1983 000e 01       		.uleb128 0x1
 1984 000f 10       		.uleb128 0x10
 1985 0010 17       		.uleb128 0x17
 1986 0011 00       		.byte	0
 1987 0012 00       		.byte	0
 1988 0013 02       		.uleb128 0x2
 1989 0014 24       		.uleb128 0x24
 1990 0015 00       		.byte	0
 1991 0016 0B       		.uleb128 0xb
 1992 0017 0B       		.uleb128 0xb
 1993 0018 3E       		.uleb128 0x3e
 1994 0019 0B       		.uleb128 0xb
 1995 001a 03       		.uleb128 0x3
 1996 001b 0E       		.uleb128 0xe
 1997 001c 00       		.byte	0
 1998 001d 00       		.byte	0
 1999 001e 03       		.uleb128 0x3
 2000 001f 24       		.uleb128 0x24
 2001 0020 00       		.byte	0
 2002 0021 0B       		.uleb128 0xb
 2003 0022 0B       		.uleb128 0xb
 2004 0023 3E       		.uleb128 0x3e
 2005 0024 0B       		.uleb128 0xb
 2006 0025 03       		.uleb128 0x3
 2007 0026 08       		.uleb128 0x8
 2008 0027 00       		.byte	0
 2009 0028 00       		.byte	0
 2010 0029 04       		.uleb128 0x4
 2011 002a 16       		.uleb128 0x16
 2012 002b 00       		.byte	0
 2013 002c 03       		.uleb128 0x3
 2014 002d 0E       		.uleb128 0xe
 2015 002e 3A       		.uleb128 0x3a
 2016 002f 0B       		.uleb128 0xb
 2017 0030 3B       		.uleb128 0x3b
 2018 0031 0B       		.uleb128 0xb
 2019 0032 49       		.uleb128 0x49
 2020 0033 13       		.uleb128 0x13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 52


 2021 0034 00       		.byte	0
 2022 0035 00       		.byte	0
 2023 0036 05       		.uleb128 0x5
 2024 0037 16       		.uleb128 0x16
 2025 0038 00       		.byte	0
 2026 0039 03       		.uleb128 0x3
 2027 003a 0E       		.uleb128 0xe
 2028 003b 3A       		.uleb128 0x3a
 2029 003c 0B       		.uleb128 0xb
 2030 003d 3B       		.uleb128 0x3b
 2031 003e 05       		.uleb128 0x5
 2032 003f 49       		.uleb128 0x49
 2033 0040 13       		.uleb128 0x13
 2034 0041 00       		.byte	0
 2035 0042 00       		.byte	0
 2036 0043 06       		.uleb128 0x6
 2037 0044 35       		.uleb128 0x35
 2038 0045 00       		.byte	0
 2039 0046 49       		.uleb128 0x49
 2040 0047 13       		.uleb128 0x13
 2041 0048 00       		.byte	0
 2042 0049 00       		.byte	0
 2043 004a 07       		.uleb128 0x7
 2044 004b 2E       		.uleb128 0x2e
 2045 004c 00       		.byte	0
 2046 004d 3F       		.uleb128 0x3f
 2047 004e 19       		.uleb128 0x19
 2048 004f 03       		.uleb128 0x3
 2049 0050 0E       		.uleb128 0xe
 2050 0051 3A       		.uleb128 0x3a
 2051 0052 0B       		.uleb128 0xb
 2052 0053 3B       		.uleb128 0x3b
 2053 0054 0B       		.uleb128 0xb
 2054 0055 27       		.uleb128 0x27
 2055 0056 19       		.uleb128 0x19
 2056 0057 11       		.uleb128 0x11
 2057 0058 01       		.uleb128 0x1
 2058 0059 12       		.uleb128 0x12
 2059 005a 06       		.uleb128 0x6
 2060 005b 40       		.uleb128 0x40
 2061 005c 18       		.uleb128 0x18
 2062 005d 9642     		.uleb128 0x2116
 2063 005f 19       		.uleb128 0x19
 2064 0060 00       		.byte	0
 2065 0061 00       		.byte	0
 2066 0062 08       		.uleb128 0x8
 2067 0063 2E       		.uleb128 0x2e
 2068 0064 01       		.byte	0x1
 2069 0065 3F       		.uleb128 0x3f
 2070 0066 19       		.uleb128 0x19
 2071 0067 03       		.uleb128 0x3
 2072 0068 0E       		.uleb128 0xe
 2073 0069 3A       		.uleb128 0x3a
 2074 006a 0B       		.uleb128 0xb
 2075 006b 3B       		.uleb128 0x3b
 2076 006c 0B       		.uleb128 0xb
 2077 006d 27       		.uleb128 0x27
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 53


 2078 006e 19       		.uleb128 0x19
 2079 006f 11       		.uleb128 0x11
 2080 0070 01       		.uleb128 0x1
 2081 0071 12       		.uleb128 0x12
 2082 0072 06       		.uleb128 0x6
 2083 0073 40       		.uleb128 0x40
 2084 0074 18       		.uleb128 0x18
 2085 0075 9642     		.uleb128 0x2116
 2086 0077 19       		.uleb128 0x19
 2087 0078 01       		.uleb128 0x1
 2088 0079 13       		.uleb128 0x13
 2089 007a 00       		.byte	0
 2090 007b 00       		.byte	0
 2091 007c 09       		.uleb128 0x9
 2092 007d 34       		.uleb128 0x34
 2093 007e 00       		.byte	0
 2094 007f 03       		.uleb128 0x3
 2095 0080 0E       		.uleb128 0xe
 2096 0081 3A       		.uleb128 0x3a
 2097 0082 0B       		.uleb128 0xb
 2098 0083 3B       		.uleb128 0x3b
 2099 0084 0B       		.uleb128 0xb
 2100 0085 49       		.uleb128 0x49
 2101 0086 13       		.uleb128 0x13
 2102 0087 02       		.uleb128 0x2
 2103 0088 18       		.uleb128 0x18
 2104 0089 00       		.byte	0
 2105 008a 00       		.byte	0
 2106 008b 0A       		.uleb128 0xa
 2107 008c 01       		.uleb128 0x1
 2108 008d 01       		.byte	0x1
 2109 008e 49       		.uleb128 0x49
 2110 008f 13       		.uleb128 0x13
 2111 0090 01       		.uleb128 0x1
 2112 0091 13       		.uleb128 0x13
 2113 0092 00       		.byte	0
 2114 0093 00       		.byte	0
 2115 0094 0B       		.uleb128 0xb
 2116 0095 21       		.uleb128 0x21
 2117 0096 00       		.byte	0
 2118 0097 49       		.uleb128 0x49
 2119 0098 13       		.uleb128 0x13
 2120 0099 2F       		.uleb128 0x2f
 2121 009a 0B       		.uleb128 0xb
 2122 009b 00       		.byte	0
 2123 009c 00       		.byte	0
 2124 009d 0C       		.uleb128 0xc
 2125 009e 26       		.uleb128 0x26
 2126 009f 00       		.byte	0
 2127 00a0 49       		.uleb128 0x49
 2128 00a1 13       		.uleb128 0x13
 2129 00a2 00       		.byte	0
 2130 00a3 00       		.byte	0
 2131 00a4 0D       		.uleb128 0xd
 2132 00a5 2E       		.uleb128 0x2e
 2133 00a6 00       		.byte	0
 2134 00a7 3F       		.uleb128 0x3f
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 54


 2135 00a8 19       		.uleb128 0x19
 2136 00a9 03       		.uleb128 0x3
 2137 00aa 0E       		.uleb128 0xe
 2138 00ab 3A       		.uleb128 0x3a
 2139 00ac 0B       		.uleb128 0xb
 2140 00ad 3B       		.uleb128 0x3b
 2141 00ae 05       		.uleb128 0x5
 2142 00af 27       		.uleb128 0x27
 2143 00b0 19       		.uleb128 0x19
 2144 00b1 11       		.uleb128 0x11
 2145 00b2 01       		.uleb128 0x1
 2146 00b3 12       		.uleb128 0x12
 2147 00b4 06       		.uleb128 0x6
 2148 00b5 40       		.uleb128 0x40
 2149 00b6 18       		.uleb128 0x18
 2150 00b7 9642     		.uleb128 0x2116
 2151 00b9 19       		.uleb128 0x19
 2152 00ba 00       		.byte	0
 2153 00bb 00       		.byte	0
 2154 00bc 0E       		.uleb128 0xe
 2155 00bd 2E       		.uleb128 0x2e
 2156 00be 00       		.byte	0
 2157 00bf 3F       		.uleb128 0x3f
 2158 00c0 19       		.uleb128 0x19
 2159 00c1 03       		.uleb128 0x3
 2160 00c2 0E       		.uleb128 0xe
 2161 00c3 3A       		.uleb128 0x3a
 2162 00c4 0B       		.uleb128 0xb
 2163 00c5 3B       		.uleb128 0x3b
 2164 00c6 05       		.uleb128 0x5
 2165 00c7 27       		.uleb128 0x27
 2166 00c8 19       		.uleb128 0x19
 2167 00c9 11       		.uleb128 0x11
 2168 00ca 01       		.uleb128 0x1
 2169 00cb 12       		.uleb128 0x12
 2170 00cc 06       		.uleb128 0x6
 2171 00cd 40       		.uleb128 0x40
 2172 00ce 18       		.uleb128 0x18
 2173 00cf 9742     		.uleb128 0x2117
 2174 00d1 19       		.uleb128 0x19
 2175 00d2 00       		.byte	0
 2176 00d3 00       		.byte	0
 2177 00d4 0F       		.uleb128 0xf
 2178 00d5 2E       		.uleb128 0x2e
 2179 00d6 01       		.byte	0x1
 2180 00d7 3F       		.uleb128 0x3f
 2181 00d8 19       		.uleb128 0x19
 2182 00d9 03       		.uleb128 0x3
 2183 00da 0E       		.uleb128 0xe
 2184 00db 3A       		.uleb128 0x3a
 2185 00dc 0B       		.uleb128 0xb
 2186 00dd 3B       		.uleb128 0x3b
 2187 00de 05       		.uleb128 0x5
 2188 00df 27       		.uleb128 0x27
 2189 00e0 19       		.uleb128 0x19
 2190 00e1 49       		.uleb128 0x49
 2191 00e2 13       		.uleb128 0x13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 55


 2192 00e3 11       		.uleb128 0x11
 2193 00e4 01       		.uleb128 0x1
 2194 00e5 12       		.uleb128 0x12
 2195 00e6 06       		.uleb128 0x6
 2196 00e7 40       		.uleb128 0x40
 2197 00e8 18       		.uleb128 0x18
 2198 00e9 9742     		.uleb128 0x2117
 2199 00eb 19       		.uleb128 0x19
 2200 00ec 01       		.uleb128 0x1
 2201 00ed 13       		.uleb128 0x13
 2202 00ee 00       		.byte	0
 2203 00ef 00       		.byte	0
 2204 00f0 10       		.uleb128 0x10
 2205 00f1 05       		.uleb128 0x5
 2206 00f2 00       		.byte	0
 2207 00f3 03       		.uleb128 0x3
 2208 00f4 0E       		.uleb128 0xe
 2209 00f5 3A       		.uleb128 0x3a
 2210 00f6 0B       		.uleb128 0xb
 2211 00f7 3B       		.uleb128 0x3b
 2212 00f8 05       		.uleb128 0x5
 2213 00f9 49       		.uleb128 0x49
 2214 00fa 13       		.uleb128 0x13
 2215 00fb 02       		.uleb128 0x2
 2216 00fc 18       		.uleb128 0x18
 2217 00fd 00       		.byte	0
 2218 00fe 00       		.byte	0
 2219 00ff 11       		.uleb128 0x11
 2220 0100 34       		.uleb128 0x34
 2221 0101 00       		.byte	0
 2222 0102 03       		.uleb128 0x3
 2223 0103 0E       		.uleb128 0xe
 2224 0104 3A       		.uleb128 0x3a
 2225 0105 0B       		.uleb128 0xb
 2226 0106 3B       		.uleb128 0x3b
 2227 0107 05       		.uleb128 0x5
 2228 0108 49       		.uleb128 0x49
 2229 0109 13       		.uleb128 0x13
 2230 010a 02       		.uleb128 0x2
 2231 010b 18       		.uleb128 0x18
 2232 010c 00       		.byte	0
 2233 010d 00       		.byte	0
 2234 010e 12       		.uleb128 0x12
 2235 010f 2E       		.uleb128 0x2e
 2236 0110 01       		.byte	0x1
 2237 0111 3F       		.uleb128 0x3f
 2238 0112 19       		.uleb128 0x19
 2239 0113 03       		.uleb128 0x3
 2240 0114 0E       		.uleb128 0xe
 2241 0115 3A       		.uleb128 0x3a
 2242 0116 0B       		.uleb128 0xb
 2243 0117 3B       		.uleb128 0x3b
 2244 0118 05       		.uleb128 0x5
 2245 0119 27       		.uleb128 0x27
 2246 011a 19       		.uleb128 0x19
 2247 011b 49       		.uleb128 0x49
 2248 011c 13       		.uleb128 0x13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 56


 2249 011d 11       		.uleb128 0x11
 2250 011e 01       		.uleb128 0x1
 2251 011f 12       		.uleb128 0x12
 2252 0120 06       		.uleb128 0x6
 2253 0121 40       		.uleb128 0x40
 2254 0122 18       		.uleb128 0x18
 2255 0123 9642     		.uleb128 0x2116
 2256 0125 19       		.uleb128 0x19
 2257 0126 01       		.uleb128 0x1
 2258 0127 13       		.uleb128 0x13
 2259 0128 00       		.byte	0
 2260 0129 00       		.byte	0
 2261 012a 13       		.uleb128 0x13
 2262 012b 2E       		.uleb128 0x2e
 2263 012c 01       		.byte	0x1
 2264 012d 3F       		.uleb128 0x3f
 2265 012e 19       		.uleb128 0x19
 2266 012f 03       		.uleb128 0x3
 2267 0130 0E       		.uleb128 0xe
 2268 0131 3A       		.uleb128 0x3a
 2269 0132 0B       		.uleb128 0xb
 2270 0133 3B       		.uleb128 0x3b
 2271 0134 05       		.uleb128 0x5
 2272 0135 27       		.uleb128 0x27
 2273 0136 19       		.uleb128 0x19
 2274 0137 11       		.uleb128 0x11
 2275 0138 01       		.uleb128 0x1
 2276 0139 12       		.uleb128 0x12
 2277 013a 06       		.uleb128 0x6
 2278 013b 40       		.uleb128 0x40
 2279 013c 18       		.uleb128 0x18
 2280 013d 9742     		.uleb128 0x2117
 2281 013f 19       		.uleb128 0x19
 2282 0140 01       		.uleb128 0x1
 2283 0141 13       		.uleb128 0x13
 2284 0142 00       		.byte	0
 2285 0143 00       		.byte	0
 2286 0144 14       		.uleb128 0x14
 2287 0145 2E       		.uleb128 0x2e
 2288 0146 01       		.byte	0x1
 2289 0147 3F       		.uleb128 0x3f
 2290 0148 19       		.uleb128 0x19
 2291 0149 03       		.uleb128 0x3
 2292 014a 0E       		.uleb128 0xe
 2293 014b 3A       		.uleb128 0x3a
 2294 014c 0B       		.uleb128 0xb
 2295 014d 3B       		.uleb128 0x3b
 2296 014e 05       		.uleb128 0x5
 2297 014f 27       		.uleb128 0x27
 2298 0150 19       		.uleb128 0x19
 2299 0151 11       		.uleb128 0x11
 2300 0152 01       		.uleb128 0x1
 2301 0153 12       		.uleb128 0x12
 2302 0154 06       		.uleb128 0x6
 2303 0155 40       		.uleb128 0x40
 2304 0156 18       		.uleb128 0x18
 2305 0157 9642     		.uleb128 0x2116
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 57


 2306 0159 19       		.uleb128 0x19
 2307 015a 01       		.uleb128 0x1
 2308 015b 13       		.uleb128 0x13
 2309 015c 00       		.byte	0
 2310 015d 00       		.byte	0
 2311 015e 15       		.uleb128 0x15
 2312 015f 34       		.uleb128 0x34
 2313 0160 00       		.byte	0
 2314 0161 03       		.uleb128 0x3
 2315 0162 0E       		.uleb128 0xe
 2316 0163 3A       		.uleb128 0x3a
 2317 0164 0B       		.uleb128 0xb
 2318 0165 3B       		.uleb128 0x3b
 2319 0166 0B       		.uleb128 0xb
 2320 0167 49       		.uleb128 0x49
 2321 0168 13       		.uleb128 0x13
 2322 0169 3F       		.uleb128 0x3f
 2323 016a 19       		.uleb128 0x19
 2324 016b 02       		.uleb128 0x2
 2325 016c 18       		.uleb128 0x18
 2326 016d 00       		.byte	0
 2327 016e 00       		.byte	0
 2328 016f 00       		.byte	0
 2329              		.section	.debug_aranges,"",%progbits
 2330 0000 AC000000 		.4byte	0xac
 2331 0004 0200     		.2byte	0x2
 2332 0006 00000000 		.4byte	.Ldebug_info0
 2333 000a 04       		.byte	0x4
 2334 000b 00       		.byte	0
 2335 000c 0000     		.2byte	0
 2336 000e 0000     		.2byte	0
 2337 0010 00000000 		.4byte	.LFB0
 2338 0014 24000000 		.4byte	.LFE0-.LFB0
 2339 0018 00000000 		.4byte	.LFB1
 2340 001c 58020000 		.4byte	.LFE1-.LFB1
 2341 0020 00000000 		.4byte	.LFB2
 2342 0024 28000000 		.4byte	.LFE2-.LFB2
 2343 0028 00000000 		.4byte	.LFB3
 2344 002c 18000000 		.4byte	.LFE3-.LFB3
 2345 0030 00000000 		.4byte	.LFB4
 2346 0034 1C000000 		.4byte	.LFE4-.LFB4
 2347 0038 00000000 		.4byte	.LFB5
 2348 003c 1C000000 		.4byte	.LFE5-.LFB5
 2349 0040 00000000 		.4byte	.LFB6
 2350 0044 7C000000 		.4byte	.LFE6-.LFB6
 2351 0048 00000000 		.4byte	.LFB7
 2352 004c 4C000000 		.4byte	.LFE7-.LFB7
 2353 0050 00000000 		.4byte	.LFB8
 2354 0054 1C000000 		.4byte	.LFE8-.LFB8
 2355 0058 00000000 		.4byte	.LFB9
 2356 005c 1C000000 		.4byte	.LFE9-.LFB9
 2357 0060 00000000 		.4byte	.LFB10
 2358 0064 30000000 		.4byte	.LFE10-.LFB10
 2359 0068 00000000 		.4byte	.LFB11
 2360 006c 2C000000 		.4byte	.LFE11-.LFB11
 2361 0070 00000000 		.4byte	.LFB12
 2362 0074 1C000000 		.4byte	.LFE12-.LFB12
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 58


 2363 0078 00000000 		.4byte	.LFB13
 2364 007c 1C000000 		.4byte	.LFE13-.LFB13
 2365 0080 00000000 		.4byte	.LFB14
 2366 0084 30000000 		.4byte	.LFE14-.LFB14
 2367 0088 00000000 		.4byte	.LFB15
 2368 008c 2C000000 		.4byte	.LFE15-.LFB15
 2369 0090 00000000 		.4byte	.LFB16
 2370 0094 A4000000 		.4byte	.LFE16-.LFB16
 2371 0098 00000000 		.4byte	.LFB17
 2372 009c 98000000 		.4byte	.LFE17-.LFB17
 2373 00a0 00000000 		.4byte	.LFB18
 2374 00a4 80000000 		.4byte	.LFE18-.LFB18
 2375 00a8 00000000 		.4byte	0
 2376 00ac 00000000 		.4byte	0
 2377              		.section	.debug_ranges,"",%progbits
 2378              	.Ldebug_ranges0:
 2379 0000 00000000 		.4byte	.LFB0
 2380 0004 24000000 		.4byte	.LFE0
 2381 0008 00000000 		.4byte	.LFB1
 2382 000c 58020000 		.4byte	.LFE1
 2383 0010 00000000 		.4byte	.LFB2
 2384 0014 28000000 		.4byte	.LFE2
 2385 0018 00000000 		.4byte	.LFB3
 2386 001c 18000000 		.4byte	.LFE3
 2387 0020 00000000 		.4byte	.LFB4
 2388 0024 1C000000 		.4byte	.LFE4
 2389 0028 00000000 		.4byte	.LFB5
 2390 002c 1C000000 		.4byte	.LFE5
 2391 0030 00000000 		.4byte	.LFB6
 2392 0034 7C000000 		.4byte	.LFE6
 2393 0038 00000000 		.4byte	.LFB7
 2394 003c 4C000000 		.4byte	.LFE7
 2395 0040 00000000 		.4byte	.LFB8
 2396 0044 1C000000 		.4byte	.LFE8
 2397 0048 00000000 		.4byte	.LFB9
 2398 004c 1C000000 		.4byte	.LFE9
 2399 0050 00000000 		.4byte	.LFB10
 2400 0054 30000000 		.4byte	.LFE10
 2401 0058 00000000 		.4byte	.LFB11
 2402 005c 2C000000 		.4byte	.LFE11
 2403 0060 00000000 		.4byte	.LFB12
 2404 0064 1C000000 		.4byte	.LFE12
 2405 0068 00000000 		.4byte	.LFB13
 2406 006c 1C000000 		.4byte	.LFE13
 2407 0070 00000000 		.4byte	.LFB14
 2408 0074 30000000 		.4byte	.LFE14
 2409 0078 00000000 		.4byte	.LFB15
 2410 007c 2C000000 		.4byte	.LFE15
 2411 0080 00000000 		.4byte	.LFB16
 2412 0084 A4000000 		.4byte	.LFE16
 2413 0088 00000000 		.4byte	.LFB17
 2414 008c 98000000 		.4byte	.LFE17
 2415 0090 00000000 		.4byte	.LFB18
 2416 0094 80000000 		.4byte	.LFE18
 2417 0098 00000000 		.4byte	0
 2418 009c 00000000 		.4byte	0
 2419              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 59


 2420              	.Ldebug_line0:
 2421 0000 AC020000 		.section	.debug_str,"MS",%progbits,1
 2421      02004400 
 2421      00000201 
 2421      FB0E0D00 
 2421      01010101 
 2422              	.LASF10:
 2423 0000 75696E74 		.ascii	"uint16\000"
 2423      313600
 2424              	.LASF49:
 2425 0007 61646347 		.ascii	"adcGain\000"
 2425      61696E00 
 2426              	.LASF23:
 2427 000f 636F756E 		.ascii	"counts\000"
 2427      747300
 2428              	.LASF29:
 2429 0016 4144435F 		.ascii	"ADC_1_StopConvert\000"
 2429      315F5374 
 2429      6F70436F 
 2429      6E766572 
 2429      7400
 2430              	.LASF62:
 2431 0028 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_1.c\000"
 2431      6E657261 
 2431      7465645F 
 2431      536F7572 
 2431      63655C50 
 2432              	.LASF26:
 2433 0049 4144435F 		.ascii	"ADC_1_Enable\000"
 2433      315F456E 
 2433      61626C65 
 2433      00
 2434              	.LASF6:
 2435 0056 6C6F6E67 		.ascii	"long long int\000"
 2435      206C6F6E 
 2435      6720696E 
 2435      7400
 2436              	.LASF0:
 2437 0064 7369676E 		.ascii	"signed char\000"
 2437      65642063 
 2437      68617200 
 2438              	.LASF36:
 2439 0070 4144435F 		.ascii	"ADC_1_Init\000"
 2439      315F496E 
 2439      697400
 2440              	.LASF7:
 2441 007b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2441      206C6F6E 
 2441      6720756E 
 2441      7369676E 
 2441      65642069 
 2442              	.LASF27:
 2443 0092 4144435F 		.ascii	"ADC_1_Stop\000"
 2443      315F5374 
 2443      6F7000
 2444              	.LASF13:
 2445 009d 696E7433 		.ascii	"int32\000"
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 60


 2445      3200
 2446              	.LASF4:
 2447 00a3 6C6F6E67 		.ascii	"long int\000"
 2447      20696E74 
 2447      00
 2448              	.LASF9:
 2449 00ac 75696E74 		.ascii	"uint8\000"
 2449      3800
 2450              	.LASF16:
 2451 00b2 646F7562 		.ascii	"double\000"
 2451      6C6500
 2452              	.LASF37:
 2453 00b9 4144435F 		.ascii	"ADC_1_SetChanMask\000"
 2453      315F5365 
 2453      74436861 
 2453      6E4D6173 
 2453      6B00
 2454              	.LASF44:
 2455 00cb 4144435F 		.ascii	"ADC_1_SetLimitMask\000"
 2455      315F5365 
 2455      744C696D 
 2455      69744D61 
 2455      736B00
 2456              	.LASF58:
 2457 00de 4144435F 		.ascii	"ADC_1_initVar\000"
 2457      315F696E 
 2457      69745661 
 2457      7200
 2458              	.LASF11:
 2459 00ec 75696E74 		.ascii	"uint32\000"
 2459      333200
 2460              	.LASF38:
 2461 00f3 6D61736B 		.ascii	"mask\000"
 2461      00
 2462              	.LASF25:
 2463 00f8 4144435F 		.ascii	"ADC_1_Start\000"
 2463      315F5374 
 2463      61727400 
 2464              	.LASF39:
 2465 0104 4144435F 		.ascii	"ADC_1_EnableInjection\000"
 2465      315F456E 
 2465      61626C65 
 2465      496E6A65 
 2465      6374696F 
 2466              	.LASF33:
 2467 011a 7265744D 		.ascii	"retMode\000"
 2467      6F646500 
 2468              	.LASF8:
 2469 0122 756E7369 		.ascii	"unsigned int\000"
 2469      676E6564 
 2469      20696E74 
 2469      00
 2470              	.LASF54:
 2471 012f 75566F6C 		.ascii	"uVolts\000"
 2471      747300
 2472              	.LASF28:
 2473 0136 4144435F 		.ascii	"ADC_1_StartConvert\000"
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 61


 2473      315F5374 
 2473      61727443 
 2473      6F6E7665 
 2473      727400
 2474              	.LASF5:
 2475 0149 6C6F6E67 		.ascii	"long unsigned int\000"
 2475      20756E73 
 2475      69676E65 
 2475      6420696E 
 2475      7400
 2476              	.LASF56:
 2477 015b 766F6C74 		.ascii	"volts\000"
 2477      7300
 2478              	.LASF22:
 2479 0161 746D7052 		.ascii	"tmpRegVal\000"
 2479      65675661 
 2479      6C00
 2480              	.LASF63:
 2481 016b 443A5C70 		.ascii	"D:\\patternagents\\PSoC_Workshop\\projects\\LAB_THR"
 2481      61747465 
 2481      726E6167 
 2481      656E7473 
 2481      5C50536F 
 2482 019a 45455C4C 		.ascii	"EE\\LAB_THREE.cydsn\000"
 2482      41425F54 
 2482      48524545 
 2482      2E637964 
 2482      736E00
 2483              	.LASF3:
 2484 01ad 73686F72 		.ascii	"short unsigned int\000"
 2484      7420756E 
 2484      7369676E 
 2484      65642069 
 2484      6E7400
 2485              	.LASF50:
 2486 01c0 4144435F 		.ascii	"ADC_1_CountsTo_mVolts\000"
 2486      315F436F 
 2486      756E7473 
 2486      546F5F6D 
 2486      566F6C74 
 2487              	.LASF40:
 2488 01d6 4144435F 		.ascii	"ADC_1_SetLowLimit\000"
 2488      315F5365 
 2488      744C6F77 
 2488      4C696D69 
 2488      7400
 2489              	.LASF42:
 2490 01e8 4144435F 		.ascii	"ADC_1_SetHighLimit\000"
 2490      315F5365 
 2490      74486967 
 2490      684C696D 
 2490      697400
 2491              	.LASF52:
 2492 01fb 6D566F6C 		.ascii	"mVolts\000"
 2492      747300
 2493              	.LASF19:
 2494 0202 72656733 		.ascii	"reg32\000"
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 62


 2494      3200
 2495              	.LASF14:
 2496 0208 666C6F61 		.ascii	"float32\000"
 2496      74333200 
 2497              	.LASF20:
 2498 0210 73697A65 		.ascii	"sizetype\000"
 2498      74797065 
 2498      00
 2499              	.LASF41:
 2500 0219 6C6F774C 		.ascii	"lowLimit\000"
 2500      696D6974 
 2500      00
 2501              	.LASF57:
 2502 0222 4144435F 		.ascii	"ADC_1_channelsConfig\000"
 2502      315F6368 
 2502      616E6E65 
 2502      6C73436F 
 2502      6E666967 
 2503              	.LASF48:
 2504 0237 4144435F 		.ascii	"ADC_1_SetGain\000"
 2504      315F5365 
 2504      74476169 
 2504      6E00
 2505              	.LASF17:
 2506 0245 696E7436 		.ascii	"int64\000"
 2506      3400
 2507              	.LASF15:
 2508 024b 666C6F61 		.ascii	"float\000"
 2508      7400
 2509              	.LASF61:
 2510 0251 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2510      4320342E 
 2510      382E3420 
 2510      32303134 
 2510      30353236 
 2511 0284 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2511      20726576 
 2511      6973696F 
 2511      6E203231 
 2511      31333538 
 2512 02b7 30202D66 		.ascii	"0 -ffunction-sections\000"
 2512      66756E63 
 2512      74696F6E 
 2512      2D736563 
 2512      74696F6E 
 2513              	.LASF43:
 2514 02cd 68696768 		.ascii	"highLimit\000"
 2514      4C696D69 
 2514      7400
 2515              	.LASF59:
 2516 02d7 4144435F 		.ascii	"ADC_1_offset\000"
 2516      315F6F66 
 2516      66736574 
 2516      00
 2517              	.LASF31:
 2518 02e4 4144435F 		.ascii	"ADC_1_IsEndConversion\000"
 2518      315F4973 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 63


 2518      456E6443 
 2518      6F6E7665 
 2518      7273696F 
 2519              	.LASF45:
 2520 02fa 4144435F 		.ascii	"ADC_1_SetSatMask\000"
 2520      315F5365 
 2520      74536174 
 2520      4D61736B 
 2520      00
 2521              	.LASF1:
 2522 030b 756E7369 		.ascii	"unsigned char\000"
 2522      676E6564 
 2522      20636861 
 2522      7200
 2523              	.LASF32:
 2524 0319 4144435F 		.ascii	"ADC_1_GetResult16\000"
 2524      315F4765 
 2524      74526573 
 2524      756C7431 
 2524      3600
 2525              	.LASF60:
 2526 032b 4144435F 		.ascii	"ADC_1_countsPer10Volt\000"
 2526      315F636F 
 2526      756E7473 
 2526      50657231 
 2526      30566F6C 
 2527              	.LASF2:
 2528 0341 73686F72 		.ascii	"short int\000"
 2528      7420696E 
 2528      7400
 2529              	.LASF21:
 2530 034b 63684E75 		.ascii	"chNum\000"
 2530      6D00
 2531              	.LASF34:
 2532 0351 6368616E 		.ascii	"chan\000"
 2532      00
 2533              	.LASF18:
 2534 0356 63686172 		.ascii	"char\000"
 2534      00
 2535              	.LASF55:
 2536 035b 4144435F 		.ascii	"ADC_1_CountsTo_Volts\000"
 2536      315F436F 
 2536      756E7473 
 2536      546F5F56 
 2536      6F6C7473 
 2537              	.LASF47:
 2538 0370 6F666673 		.ascii	"offset\000"
 2538      657400
 2539              	.LASF51:
 2540 0377 61646343 		.ascii	"adcCounts\000"
 2540      6F756E74 
 2540      7300
 2541              	.LASF30:
 2542 0381 73746174 		.ascii	"status\000"
 2542      757300
 2543              	.LASF24:
 2544 0388 4144435F 		.ascii	"ADC_1_InputsPlacement\000"
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccKGnzdN.s 			page 64


 2544      315F496E 
 2544      70757473 
 2544      506C6163 
 2544      656D656E 
 2545              	.LASF46:
 2546 039e 4144435F 		.ascii	"ADC_1_SetOffset\000"
 2546      315F5365 
 2546      744F6666 
 2546      73657400 
 2547              	.LASF12:
 2548 03ae 696E7431 		.ascii	"int16\000"
 2548      3600
 2549              	.LASF35:
 2550 03b4 72657375 		.ascii	"result\000"
 2550      6C7400
 2551              	.LASF53:
 2552 03bb 4144435F 		.ascii	"ADC_1_CountsTo_uVolts\000"
 2552      315F436F 
 2552      756E7473 
 2552      546F5F75 
 2552      566F6C74 
 2553              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
