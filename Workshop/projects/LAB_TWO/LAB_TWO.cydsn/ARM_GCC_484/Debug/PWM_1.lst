ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_1_initVar
  18              		.bss
  19              		.type	PWM_1_initVar, %object
  20              		.size	PWM_1_initVar, 1
  21              	PWM_1_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_1_Start,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_1_Start
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_1_Start, %function
  29              	PWM_1_Start:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\PWM_1.c"
   1:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM_1.c **** * File Name: PWM_1.c
   3:.\Generated_Source\PSoC4/PWM_1.c **** * Version 3.30
   4:.\Generated_Source\PSoC4/PWM_1.c **** *
   5:.\Generated_Source\PSoC4/PWM_1.c **** * Description:
   6:.\Generated_Source\PSoC4/PWM_1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC4/PWM_1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC4/PWM_1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC4/PWM_1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC4/PWM_1.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC4/PWM_1.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC4/PWM_1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC4/PWM_1.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC4/PWM_1.c **** *
  15:.\Generated_Source\PSoC4/PWM_1.c **** * Note:
  16:.\Generated_Source\PSoC4/PWM_1.c **** *
  17:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************
  18:.\Generated_Source\PSoC4/PWM_1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC4/PWM_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC4/PWM_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC4/PWM_1.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC4/PWM_1.c **** 
  24:.\Generated_Source\PSoC4/PWM_1.c **** #include "PWM_1.h"
  25:.\Generated_Source\PSoC4/PWM_1.c **** 
  26:.\Generated_Source\PSoC4/PWM_1.c **** /* Error message for removed <resource> through optimization */
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 2


  27:.\Generated_Source\PSoC4/PWM_1.c **** #ifdef PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC4/PWM_1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC4/PWM_1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* PWM_1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC4/PWM_1.c **** 
  32:.\Generated_Source\PSoC4/PWM_1.c **** uint8 PWM_1_initVar = 0u;
  33:.\Generated_Source\PSoC4/PWM_1.c **** 
  34:.\Generated_Source\PSoC4/PWM_1.c **** 
  35:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Start
  37:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
  38:.\Generated_Source\PSoC4/PWM_1.c **** *
  39:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
  40:.\Generated_Source\PSoC4/PWM_1.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC4/PWM_1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC4/PWM_1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC4/PWM_1.c **** *
  44:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
  45:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  46:.\Generated_Source\PSoC4/PWM_1.c **** *
  47:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
  48:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  49:.\Generated_Source\PSoC4/PWM_1.c **** *
  50:.\Generated_Source\PSoC4/PWM_1.c **** * Global variables:
  51:.\Generated_Source\PSoC4/PWM_1.c **** *  PWM_1_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC4/PWM_1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC4/PWM_1.c **** *
  54:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Start(void) 
  56:.\Generated_Source\PSoC4/PWM_1.c **** {
  32              		.loc 1 56 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  57:.\Generated_Source\PSoC4/PWM_1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC4/PWM_1.c ****     if(PWM_1_initVar == 0u)
  40              		.loc 1 58 0
  41 0004 064B     		ldr	r3, .L3
  42 0006 1B78     		ldrb	r3, [r3]
  43 0008 002B     		cmp	r3, #0
  44 000a 04D1     		bne	.L2
  59:.\Generated_Source\PSoC4/PWM_1.c ****     {
  60:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_Init();
  45              		.loc 1 60 0
  46 000c FFF7FEFF 		bl	PWM_1_Init
  61:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_initVar = 1u;
  47              		.loc 1 61 0
  48 0010 034B     		ldr	r3, .L3
  49 0012 0122     		mov	r2, #1
  50 0014 1A70     		strb	r2, [r3]
  51              	.L2:
  62:.\Generated_Source\PSoC4/PWM_1.c ****     }
  63:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_Enable();
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 3


  52              		.loc 1 63 0
  53 0016 FFF7FEFF 		bl	PWM_1_Enable
  64:.\Generated_Source\PSoC4/PWM_1.c **** 
  65:.\Generated_Source\PSoC4/PWM_1.c **** }
  54              		.loc 1 65 0
  55 001a BD46     		mov	sp, r7
  56              		@ sp needed
  57 001c 80BD     		pop	{r7, pc}
  58              	.L4:
  59 001e C046     		.align	2
  60              	.L3:
  61 0020 00000000 		.word	PWM_1_initVar
  62              		.cfi_endproc
  63              	.LFE0:
  64              		.size	PWM_1_Start, .-PWM_1_Start
  65              		.section	.text.PWM_1_Init,"ax",%progbits
  66              		.align	2
  67              		.global	PWM_1_Init
  68              		.code	16
  69              		.thumb_func
  70              		.type	PWM_1_Init, %function
  71              	PWM_1_Init:
  72              	.LFB1:
  66:.\Generated_Source\PSoC4/PWM_1.c **** 
  67:.\Generated_Source\PSoC4/PWM_1.c **** 
  68:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Init
  70:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
  71:.\Generated_Source\PSoC4/PWM_1.c **** *
  72:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
  73:.\Generated_Source\PSoC4/PWM_1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC4/PWM_1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC4/PWM_1.c **** *  PWM_1_Start().
  76:.\Generated_Source\PSoC4/PWM_1.c **** *
  77:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
  78:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  79:.\Generated_Source\PSoC4/PWM_1.c **** *
  80:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
  81:.\Generated_Source\PSoC4/PWM_1.c **** *  None
  82:.\Generated_Source\PSoC4/PWM_1.c **** *
  83:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Init(void) 
  85:.\Generated_Source\PSoC4/PWM_1.c **** {
  73              		.loc 1 85 0
  74              		.cfi_startproc
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
  86:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UsingFixedFunction || PWM_1_UseControl)
  87:.\Generated_Source\PSoC4/PWM_1.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction || PWM_1_UseControl) */
  89:.\Generated_Source\PSoC4/PWM_1.c **** 
  90:.\Generated_Source\PSoC4/PWM_1.c ****     #if(!PWM_1_UsingFixedFunction)
  91:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UseStatus)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 4


  92:.\Generated_Source\PSoC4/PWM_1.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC4/PWM_1.c ****             uint8 PWM_1_interruptState;
  94:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
  95:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
  96:.\Generated_Source\PSoC4/PWM_1.c **** 
  97:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
  98:.\Generated_Source\PSoC4/PWM_1.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CFG0_MODE;
 100:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_DeadBand2_4)
 101:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL |= PWM_1_CFG0_DB;
 102:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_DeadBand2_4) */
 103:.\Generated_Source\PSoC4/PWM_1.c **** 
 104:.\Generated_Source\PSoC4/PWM_1.c ****         ctrl = PWM_1_CONTROL3 & ((uint8 )(~PWM_1_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL3 = ctrl | PWM_1_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC4/PWM_1.c **** 
 107:.\Generated_Source\PSoC4/PWM_1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_RT1_MASK));
 109:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNC;
 110:.\Generated_Source\PSoC4/PWM_1.c **** 
 111:.\Generated_Source\PSoC4/PWM_1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_RT1 &= ((uint8)(~PWM_1_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_RT1 |= PWM_1_SYNCDSI_EN;
 114:.\Generated_Source\PSoC4/PWM_1.c **** 
 115:.\Generated_Source\PSoC4/PWM_1.c ****     #elif (PWM_1_UseControl)
 116:.\Generated_Source\PSoC4/PWM_1.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC4/PWM_1.c ****         ctrl = PWM_1_CONTROL & ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC4/PWM_1.c ****                 ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL = ctrl | PWM_1_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC4/PWM_1.c ****                                    PWM_1_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 122:.\Generated_Source\PSoC4/PWM_1.c **** 
 123:.\Generated_Source\PSoC4/PWM_1.c ****     #if (!PWM_1_UsingFixedFunction)
 124:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_Resolution == 8)
 125:.\Generated_Source\PSoC4/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
  81              		.loc 1 126 0
  82 0004 094B     		ldr	r3, .L6
  83 0006 094A     		ldr	r2, .L6
  84 0008 1278     		ldrb	r2, [r2]
  85 000a D2B2     		uxtb	r2, r2
  86 000c 0121     		mov	r1, #1
  87 000e 0A43     		orr	r2, r1
  88 0010 D2B2     		uxtb	r2, r2
  89 0012 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC4/PWM_1.c ****         #else /* (PWM_1_Resolution == 16)*/
 128:.\Generated_Source\PSoC4/PWM_1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_AUX_CONTROLDP0 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_AUX_CONTROLDP1 |= (PWM_1_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_Resolution == 8) */
 132:.\Generated_Source\PSoC4/PWM_1.c **** 
 133:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_WriteCounter(PWM_1_INIT_PERIOD_VALUE);
  90              		.loc 1 133 0
  91 0014 FE20     		mov	r0, #254
  92 0016 FFF7FEFF 		bl	PWM_1_WriteCounter
 134:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (!PWM_1_UsingFixedFunction) */
 135:.\Generated_Source\PSoC4/PWM_1.c **** 
 136:.\Generated_Source\PSoC4/PWM_1.c ****     PWM_1_WritePeriod(PWM_1_INIT_PERIOD_VALUE);
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 5


  93              		.loc 1 136 0
  94 001a FE20     		mov	r0, #254
  95 001c FFF7FEFF 		bl	PWM_1_WritePeriod
 137:.\Generated_Source\PSoC4/PWM_1.c **** 
 138:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_UseOneCompareMode)
 139:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompare(PWM_1_INIT_COMPARE_VALUE1);
  96              		.loc 1 139 0
  97 0020 7F20     		mov	r0, #127
  98 0022 FFF7FEFF 		bl	PWM_1_WriteCompare
 140:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 141:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompare1(PWM_1_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteCompare2(PWM_1_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UseOneCompareMode) */
 144:.\Generated_Source\PSoC4/PWM_1.c **** 
 145:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_KillModeMinTime)
 146:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteKillTime(PWM_1_MinimumKillTime);
 147:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_KillModeMinTime) */
 148:.\Generated_Source\PSoC4/PWM_1.c **** 
 149:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_DeadBandUsed)
 150:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_WriteDeadTime(PWM_1_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_DeadBandUsed) */
 152:.\Generated_Source\PSoC4/PWM_1.c **** 
 153:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 154:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_SetInterruptMode(PWM_1_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 156:.\Generated_Source\PSoC4/PWM_1.c **** 
 157:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 158:.\Generated_Source\PSoC4/PWM_1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC4/PWM_1.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL2 |= PWM_1_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 163:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UseStatus)
 164:.\Generated_Source\PSoC4/PWM_1.c **** 
 165:.\Generated_Source\PSoC4/PWM_1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC4/PWM_1.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC4/PWM_1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_STATUS_AUX_CTRL |= PWM_1_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC4/PWM_1.c **** 
 171:.\Generated_Source\PSoC4/PWM_1.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC4/PWM_1.c ****             CyExitCriticalSection(PWM_1_interruptState);
 173:.\Generated_Source\PSoC4/PWM_1.c **** 
 174:.\Generated_Source\PSoC4/PWM_1.c ****             /* Clear the FIFO to enable the PWM_1_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC4/PWM_1.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_ClearFIFO();
 177:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UseStatus) */
 178:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 179:.\Generated_Source\PSoC4/PWM_1.c **** }
  99              		.loc 1 179 0
 100 0026 BD46     		mov	sp, r7
 101              		@ sp needed
 102 0028 80BD     		pop	{r7, pc}
 103              	.L7:
 104 002a C046     		.align	2
 105              	.L6:
 106 002c 93000F40 		.word	1074725011
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 6


 107              		.cfi_endproc
 108              	.LFE1:
 109              		.size	PWM_1_Init, .-PWM_1_Init
 110              		.section	.text.PWM_1_Enable,"ax",%progbits
 111              		.align	2
 112              		.global	PWM_1_Enable
 113              		.code	16
 114              		.thumb_func
 115              		.type	PWM_1_Enable, %function
 116              	PWM_1_Enable:
 117              	.LFB2:
 180:.\Generated_Source\PSoC4/PWM_1.c **** 
 181:.\Generated_Source\PSoC4/PWM_1.c **** 
 182:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Enable
 184:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 185:.\Generated_Source\PSoC4/PWM_1.c **** *
 186:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 187:.\Generated_Source\PSoC4/PWM_1.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC4/PWM_1.c **** *
 189:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 190:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 191:.\Generated_Source\PSoC4/PWM_1.c **** *
 192:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 193:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 194:.\Generated_Source\PSoC4/PWM_1.c **** *
 195:.\Generated_Source\PSoC4/PWM_1.c **** * Side Effects:
 196:.\Generated_Source\PSoC4/PWM_1.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC4/PWM_1.c **** *
 198:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Enable(void) 
 200:.\Generated_Source\PSoC4/PWM_1.c **** {
 118              		.loc 1 200 0
 119              		.cfi_startproc
 120 0000 80B5     		push	{r7, lr}
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 7, -8
 123              		.cfi_offset 14, -4
 124 0002 00AF     		add	r7, sp, #0
 125              		.cfi_def_cfa_register 7
 201:.\Generated_Source\PSoC4/PWM_1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 203:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_GLOBAL_ENABLE |= PWM_1_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE |= PWM_1_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 206:.\Generated_Source\PSoC4/PWM_1.c **** 
 207:.\Generated_Source\PSoC4/PWM_1.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 209:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL |= PWM_1_CTRL_ENABLE;
 210:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 211:.\Generated_Source\PSoC4/PWM_1.c **** }
 126              		.loc 1 211 0
 127 0004 BD46     		mov	sp, r7
 128              		@ sp needed
 129 0006 80BD     		pop	{r7, pc}
 130              		.cfi_endproc
 131              	.LFE2:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 7


 132              		.size	PWM_1_Enable, .-PWM_1_Enable
 133              		.section	.text.PWM_1_Stop,"ax",%progbits
 134              		.align	2
 135              		.global	PWM_1_Stop
 136              		.code	16
 137              		.thumb_func
 138              		.type	PWM_1_Stop, %function
 139              	PWM_1_Stop:
 140              	.LFB3:
 212:.\Generated_Source\PSoC4/PWM_1.c **** 
 213:.\Generated_Source\PSoC4/PWM_1.c **** 
 214:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_Stop
 216:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 217:.\Generated_Source\PSoC4/PWM_1.c **** *
 218:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 219:.\Generated_Source\PSoC4/PWM_1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC4/PWM_1.c **** *  interrupts.
 221:.\Generated_Source\PSoC4/PWM_1.c **** *
 222:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 223:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 224:.\Generated_Source\PSoC4/PWM_1.c **** *
 225:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 226:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 227:.\Generated_Source\PSoC4/PWM_1.c **** *
 228:.\Generated_Source\PSoC4/PWM_1.c **** * Side Effects:
 229:.\Generated_Source\PSoC4/PWM_1.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC4/PWM_1.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC4/PWM_1.c **** *
 232:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_Stop(void) 
 234:.\Generated_Source\PSoC4/PWM_1.c **** {
 141              		.loc 1 234 0
 142              		.cfi_startproc
 143 0000 80B5     		push	{r7, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 00AF     		add	r7, sp, #0
 148              		.cfi_def_cfa_register 7
 235:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UseControl || PWM_1_UsingFixedFunction)
 236:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_ENABLE));
 237:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UseControl || PWM_1_UsingFixedFunction) */
 238:.\Generated_Source\PSoC4/PWM_1.c **** 
 239:.\Generated_Source\PSoC4/PWM_1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UsingFixedFunction)
 241:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_GLOBAL_ENABLE &= ((uint8)(~PWM_1_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC4/PWM_1.c ****         PWM_1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_1_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 244:.\Generated_Source\PSoC4/PWM_1.c **** }
 149              		.loc 1 244 0
 150 0004 BD46     		mov	sp, r7
 151              		@ sp needed
 152 0006 80BD     		pop	{r7, pc}
 153              		.cfi_endproc
 154              	.LFE3:
 155              		.size	PWM_1_Stop, .-PWM_1_Stop
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 8


 156              		.section	.text.PWM_1_WriteCounter,"ax",%progbits
 157              		.align	2
 158              		.global	PWM_1_WriteCounter
 159              		.code	16
 160              		.thumb_func
 161              		.type	PWM_1_WriteCounter, %function
 162              	PWM_1_WriteCounter:
 163              	.LFB4:
 245:.\Generated_Source\PSoC4/PWM_1.c **** 
 246:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 247:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 248:.\Generated_Source\PSoC4/PWM_1.c **** 
 249:.\Generated_Source\PSoC4/PWM_1.c **** 
 250:.\Generated_Source\PSoC4/PWM_1.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC4/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode
 252:.\Generated_Source\PSoC4/PWM_1.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC4/PWM_1.c ****         *
 254:.\Generated_Source\PSoC4/PWM_1.c ****         * Summary:
 255:.\Generated_Source\PSoC4/PWM_1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC4/PWM_1.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC4/PWM_1.c ****         *
 258:.\Generated_Source\PSoC4/PWM_1.c ****         * Parameters:
 259:.\Generated_Source\PSoC4/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC4/PWM_1.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC4/PWM_1.c ****         *
 262:.\Generated_Source\PSoC4/PWM_1.c ****         * Return:
 263:.\Generated_Source\PSoC4/PWM_1.c ****         *  None
 264:.\Generated_Source\PSoC4/PWM_1.c ****         *
 265:.\Generated_Source\PSoC4/PWM_1.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC4/PWM_1.c ****         void PWM_1_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC4/PWM_1.c ****         {
 268:.\Generated_Source\PSoC4/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 269:.\Generated_Source\PSoC4/PWM_1.c **** 
 270:.\Generated_Source\PSoC4/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SH
 272:.\Generated_Source\PSoC4/PWM_1.c ****                 #else
 273:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC4/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC4/PWM_1.c **** 
 276:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL3 &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC4/PWM_1.c **** 
 279:.\Generated_Source\PSoC4/PWM_1.c ****             #elif (PWM_1_UseControl)
 280:.\Generated_Source\PSoC4/PWM_1.c **** 
 281:.\Generated_Source\PSoC4/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_S
 283:.\Generated_Source\PSoC4/PWM_1.c ****                                                 PWM_1_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC4/PWM_1.c ****                 #else
 285:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemode1masked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC4/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC4/PWM_1.c **** 
 288:.\Generated_Source\PSoC4/PWM_1.c ****                 #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_S
 290:.\Generated_Source\PSoC4/PWM_1.c ****                                                PWM_1_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC4/PWM_1.c ****                 #else
 292:.\Generated_Source\PSoC4/PWM_1.c ****                     uint8 comparemode2masked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC4/PWM_1.c ****                 #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 9


 294:.\Generated_Source\PSoC4/PWM_1.c **** 
 295:.\Generated_Source\PSoC4/PWM_1.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~(PWM_1_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC4/PWM_1.c ****                                             PWM_1_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC4/PWM_1.c **** 
 300:.\Generated_Source\PSoC4/PWM_1.c ****             #else
 301:.\Generated_Source\PSoC4/PWM_1.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 303:.\Generated_Source\PSoC4/PWM_1.c ****         }
 304:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 305:.\Generated_Source\PSoC4/PWM_1.c **** 
 306:.\Generated_Source\PSoC4/PWM_1.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC4/PWM_1.c **** 
 308:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_CompareMode1SW)
 309:.\Generated_Source\PSoC4/PWM_1.c **** 
 310:.\Generated_Source\PSoC4/PWM_1.c **** 
 311:.\Generated_Source\PSoC4/PWM_1.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC4/PWM_1.c ****         * Function Name: PWM_1_SetCompareMode1
 313:.\Generated_Source\PSoC4/PWM_1.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC4/PWM_1.c ****         *
 315:.\Generated_Source\PSoC4/PWM_1.c ****         * Summary:
 316:.\Generated_Source\PSoC4/PWM_1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC4/PWM_1.c ****         *
 318:.\Generated_Source\PSoC4/PWM_1.c ****         * Parameters:
 319:.\Generated_Source\PSoC4/PWM_1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC4/PWM_1.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC4/PWM_1.c ****         *
 322:.\Generated_Source\PSoC4/PWM_1.c ****         * Return:
 323:.\Generated_Source\PSoC4/PWM_1.c ****         *  None
 324:.\Generated_Source\PSoC4/PWM_1.c ****         *
 325:.\Generated_Source\PSoC4/PWM_1.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC4/PWM_1.c ****         void PWM_1_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC4/PWM_1.c ****         {
 328:.\Generated_Source\PSoC4/PWM_1.c ****             #if(0 != PWM_1_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC4/PWM_1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE1_SHIFT)
 330:.\Generated_Source\PSoC4/PWM_1.c ****                                            PWM_1_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC4/PWM_1.c ****             #else
 332:.\Generated_Source\PSoC4/PWM_1.c ****                 uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (0 != PWM_1_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC4/PWM_1.c **** 
 335:.\Generated_Source\PSoC4/PWM_1.c ****             #if (PWM_1_UseControl)
 336:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (PWM_1_UseControl) */
 339:.\Generated_Source\PSoC4/PWM_1.c ****         }
 340:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* PWM_1_CompareMode1SW */
 341:.\Generated_Source\PSoC4/PWM_1.c **** 
 342:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_CompareMode2SW)
 343:.\Generated_Source\PSoC4/PWM_1.c **** 
 344:.\Generated_Source\PSoC4/PWM_1.c **** 
 345:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_SetCompareMode2
 347:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC4/PWM_1.c ****     *
 349:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 350:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 10


 351:.\Generated_Source\PSoC4/PWM_1.c ****     *
 352:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 353:.\Generated_Source\PSoC4/PWM_1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC4/PWM_1.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC4/PWM_1.c ****     *
 356:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 357:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 358:.\Generated_Source\PSoC4/PWM_1.c ****     *
 359:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC4/PWM_1.c ****     {
 362:.\Generated_Source\PSoC4/PWM_1.c **** 
 363:.\Generated_Source\PSoC4/PWM_1.c ****         #if(0 != PWM_1_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC4/PWM_1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_1_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC4/PWM_1.c ****                                                  PWM_1_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 367:.\Generated_Source\PSoC4/PWM_1.c ****             uint8 comparemodemasked = comparemode & PWM_1_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (0 != PWM_1_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC4/PWM_1.c **** 
 370:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_UseControl)
 371:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL &= ((uint8)(~PWM_1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UseControl) */
 374:.\Generated_Source\PSoC4/PWM_1.c ****     }
 375:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /*PWM_1_CompareMode2SW */
 376:.\Generated_Source\PSoC4/PWM_1.c **** 
 377:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC4/PWM_1.c **** 
 379:.\Generated_Source\PSoC4/PWM_1.c **** 
 380:.\Generated_Source\PSoC4/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 381:.\Generated_Source\PSoC4/PWM_1.c **** 
 382:.\Generated_Source\PSoC4/PWM_1.c **** 
 383:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteCounter
 385:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC4/PWM_1.c ****     *
 387:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 388:.\Generated_Source\PSoC4/PWM_1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC4/PWM_1.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC4/PWM_1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC4/PWM_1.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC4/PWM_1.c ****     *
 393:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 394:.\Generated_Source\PSoC4/PWM_1.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC4/PWM_1.c ****     *
 396:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 397:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 398:.\Generated_Source\PSoC4/PWM_1.c ****     *
 399:.\Generated_Source\PSoC4/PWM_1.c ****     * Side Effects:
 400:.\Generated_Source\PSoC4/PWM_1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC4/PWM_1.c ****     *
 402:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteCounter(uint8 counter) \
 404:.\Generated_Source\PSoC4/PWM_1.c ****                                        
 405:.\Generated_Source\PSoC4/PWM_1.c ****     {
 164              		.loc 1 405 0
 165              		.cfi_startproc
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 11


 166 0000 80B5     		push	{r7, lr}
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 0002 82B0     		sub	sp, sp, #8
 171              		.cfi_def_cfa_offset 16
 172 0004 00AF     		add	r7, sp, #0
 173              		.cfi_def_cfa_register 7
 174 0006 021C     		mov	r2, r0
 175 0008 FB1D     		add	r3, r7, #7
 176 000a 1A70     		strb	r2, [r3]
 406:.\Generated_Source\PSoC4/PWM_1.c ****         CY_SET_REG8(PWM_1_COUNTER_LSB_PTR, counter);
 177              		.loc 1 406 0
 178 000c 034B     		ldr	r3, .L11
 179 000e FA1D     		add	r2, r7, #7
 180 0010 1278     		ldrb	r2, [r2]
 181 0012 1A70     		strb	r2, [r3]
 407:.\Generated_Source\PSoC4/PWM_1.c ****     }
 182              		.loc 1 407 0
 183 0014 BD46     		mov	sp, r7
 184 0016 02B0     		add	sp, sp, #8
 185              		@ sp needed
 186 0018 80BD     		pop	{r7, pc}
 187              	.L12:
 188 001a C046     		.align	2
 189              	.L11:
 190 001c 03000F40 		.word	1074724867
 191              		.cfi_endproc
 192              	.LFE4:
 193              		.size	PWM_1_WriteCounter, .-PWM_1_WriteCounter
 194              		.section	.text.PWM_1_ReadCounter,"ax",%progbits
 195              		.align	2
 196              		.global	PWM_1_ReadCounter
 197              		.code	16
 198              		.thumb_func
 199              		.type	PWM_1_ReadCounter, %function
 200              	PWM_1_ReadCounter:
 201              	.LFB5:
 408:.\Generated_Source\PSoC4/PWM_1.c **** 
 409:.\Generated_Source\PSoC4/PWM_1.c **** 
 410:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadCounter
 412:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC4/PWM_1.c ****     *
 414:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 415:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC4/PWM_1.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC4/PWM_1.c ****     *
 418:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 419:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 420:.\Generated_Source\PSoC4/PWM_1.c ****     *
 421:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 422:.\Generated_Source\PSoC4/PWM_1.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC4/PWM_1.c ****     *
 424:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadCounter(void) 
 426:.\Generated_Source\PSoC4/PWM_1.c ****     {
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 12


 202              		.loc 1 426 0
 203              		.cfi_startproc
 204 0000 80B5     		push	{r7, lr}
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 00AF     		add	r7, sp, #0
 209              		.cfi_def_cfa_register 7
 427:.\Generated_Source\PSoC4/PWM_1.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC4/PWM_1.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC4/PWM_1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC4/PWM_1.c ****           (void)CY_GET_REG8(PWM_1_COUNTERCAP_LSB_PTR_8BIT);
 210              		.loc 1 430 0
 211 0004 034B     		ldr	r3, .L15
 212 0006 1B78     		ldrb	r3, [r3]
 431:.\Generated_Source\PSoC4/PWM_1.c **** 
 432:.\Generated_Source\PSoC4/PWM_1.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_CAPTURE_LSB_PTR));
 213              		.loc 1 433 0
 214 0008 034B     		ldr	r3, .L15+4
 215 000a 1B78     		ldrb	r3, [r3]
 216 000c DBB2     		uxtb	r3, r3
 434:.\Generated_Source\PSoC4/PWM_1.c ****     }
 217              		.loc 1 434 0
 218 000e 181C     		mov	r0, r3
 219 0010 BD46     		mov	sp, r7
 220              		@ sp needed
 221 0012 80BD     		pop	{r7, pc}
 222              	.L16:
 223              		.align	2
 224              	.L15:
 225 0014 13000F40 		.word	1074724883
 226 0018 53000F40 		.word	1074724947
 227              		.cfi_endproc
 228              	.LFE5:
 229              		.size	PWM_1_ReadCounter, .-PWM_1_ReadCounter
 230              		.section	.text.PWM_1_WritePeriod,"ax",%progbits
 231              		.align	2
 232              		.global	PWM_1_WritePeriod
 233              		.code	16
 234              		.thumb_func
 235              		.type	PWM_1_WritePeriod, %function
 236              	PWM_1_WritePeriod:
 237              	.LFB6:
 435:.\Generated_Source\PSoC4/PWM_1.c **** 
 436:.\Generated_Source\PSoC4/PWM_1.c ****     #if (PWM_1_UseStatus)
 437:.\Generated_Source\PSoC4/PWM_1.c **** 
 438:.\Generated_Source\PSoC4/PWM_1.c **** 
 439:.\Generated_Source\PSoC4/PWM_1.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC4/PWM_1.c ****         * Function Name: PWM_1_ClearFIFO
 441:.\Generated_Source\PSoC4/PWM_1.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC4/PWM_1.c ****         *
 443:.\Generated_Source\PSoC4/PWM_1.c ****         * Summary:
 444:.\Generated_Source\PSoC4/PWM_1.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC4/PWM_1.c ****         *
 446:.\Generated_Source\PSoC4/PWM_1.c ****         * Parameters:
 447:.\Generated_Source\PSoC4/PWM_1.c ****         *  None
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 13


 448:.\Generated_Source\PSoC4/PWM_1.c ****         *
 449:.\Generated_Source\PSoC4/PWM_1.c ****         * Return:
 450:.\Generated_Source\PSoC4/PWM_1.c ****         *  None
 451:.\Generated_Source\PSoC4/PWM_1.c ****         *
 452:.\Generated_Source\PSoC4/PWM_1.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC4/PWM_1.c ****         void PWM_1_ClearFIFO(void) 
 454:.\Generated_Source\PSoC4/PWM_1.c ****         {
 455:.\Generated_Source\PSoC4/PWM_1.c ****             while(0u != (PWM_1_ReadStatusRegister() & PWM_1_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC4/PWM_1.c ****             {
 457:.\Generated_Source\PSoC4/PWM_1.c ****                 (void)PWM_1_ReadCapture();
 458:.\Generated_Source\PSoC4/PWM_1.c ****             }
 459:.\Generated_Source\PSoC4/PWM_1.c ****         }
 460:.\Generated_Source\PSoC4/PWM_1.c **** 
 461:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* PWM_1_UseStatus */
 462:.\Generated_Source\PSoC4/PWM_1.c **** 
 463:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* !PWM_1_UsingFixedFunction */
 464:.\Generated_Source\PSoC4/PWM_1.c **** 
 465:.\Generated_Source\PSoC4/PWM_1.c **** 
 466:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_WritePeriod
 468:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 469:.\Generated_Source\PSoC4/PWM_1.c **** *
 470:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 471:.\Generated_Source\PSoC4/PWM_1.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC4/PWM_1.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC4/PWM_1.c **** *
 474:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
 475:.\Generated_Source\PSoC4/PWM_1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC4/PWM_1.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC4/PWM_1.c **** *
 478:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 479:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 480:.\Generated_Source\PSoC4/PWM_1.c **** *
 481:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC4/PWM_1.c **** void PWM_1_WritePeriod(uint8 period) 
 483:.\Generated_Source\PSoC4/PWM_1.c **** {
 238              		.loc 1 483 0
 239              		.cfi_startproc
 240 0000 80B5     		push	{r7, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 82B0     		sub	sp, sp, #8
 245              		.cfi_def_cfa_offset 16
 246 0004 00AF     		add	r7, sp, #0
 247              		.cfi_def_cfa_register 7
 248 0006 021C     		mov	r2, r0
 249 0008 FB1D     		add	r3, r7, #7
 250 000a 1A70     		strb	r2, [r3]
 484:.\Generated_Source\PSoC4/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 485:.\Generated_Source\PSoC4/PWM_1.c ****         CY_SET_REG16(PWM_1_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 487:.\Generated_Source\PSoC4/PWM_1.c ****         CY_SET_REG8(PWM_1_PERIOD_LSB_PTR, period);
 251              		.loc 1 487 0
 252 000c 034B     		ldr	r3, .L18
 253 000e FA1D     		add	r2, r7, #7
 254 0010 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 14


 255 0012 1A70     		strb	r2, [r3]
 488:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 489:.\Generated_Source\PSoC4/PWM_1.c **** }
 256              		.loc 1 489 0
 257 0014 BD46     		mov	sp, r7
 258 0016 02B0     		add	sp, sp, #8
 259              		@ sp needed
 260 0018 80BD     		pop	{r7, pc}
 261              	.L19:
 262 001a C046     		.align	2
 263              	.L18:
 264 001c 43000F40 		.word	1074724931
 265              		.cfi_endproc
 266              	.LFE6:
 267              		.size	PWM_1_WritePeriod, .-PWM_1_WritePeriod
 268              		.section	.text.PWM_1_WriteCompare,"ax",%progbits
 269              		.align	2
 270              		.global	PWM_1_WriteCompare
 271              		.code	16
 272              		.thumb_func
 273              		.type	PWM_1_WriteCompare, %function
 274              	PWM_1_WriteCompare:
 275              	.LFB7:
 490:.\Generated_Source\PSoC4/PWM_1.c **** 
 491:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 492:.\Generated_Source\PSoC4/PWM_1.c **** 
 493:.\Generated_Source\PSoC4/PWM_1.c **** 
 494:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteCompare
 496:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC4/PWM_1.c ****     *
 498:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 499:.\Generated_Source\PSoC4/PWM_1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC4/PWM_1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC4/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC4/PWM_1.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC4/PWM_1.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC4/PWM_1.c ****     *
 505:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 506:.\Generated_Source\PSoC4/PWM_1.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC4/PWM_1.c ****     *
 508:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 509:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 510:.\Generated_Source\PSoC4/PWM_1.c ****     *
 511:.\Generated_Source\PSoC4/PWM_1.c ****     * Side Effects:
 512:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC4/PWM_1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC4/PWM_1.c ****     *
 515:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteCompare(uint8 compare) \
 517:.\Generated_Source\PSoC4/PWM_1.c ****                                        
 518:.\Generated_Source\PSoC4/PWM_1.c ****     {
 276              		.loc 1 518 0
 277              		.cfi_startproc
 278 0000 80B5     		push	{r7, lr}
 279              		.cfi_def_cfa_offset 8
 280              		.cfi_offset 7, -8
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 15


 281              		.cfi_offset 14, -4
 282 0002 82B0     		sub	sp, sp, #8
 283              		.cfi_def_cfa_offset 16
 284 0004 00AF     		add	r7, sp, #0
 285              		.cfi_def_cfa_register 7
 286 0006 021C     		mov	r2, r0
 287 0008 FB1D     		add	r3, r7, #7
 288 000a 1A70     		strb	r2, [r3]
 519:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 520:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 522:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE1_LSB_PTR, compare);
 289              		.loc 1 522 0
 290 000c 034B     		ldr	r3, .L21
 291 000e FA1D     		add	r2, r7, #7
 292 0010 1278     		ldrb	r2, [r2]
 293 0012 1A70     		strb	r2, [r3]
 523:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 524:.\Generated_Source\PSoC4/PWM_1.c **** 
 525:.\Generated_Source\PSoC4/PWM_1.c ****         #if (PWM_1_PWMMode == PWM_1__B_PWM__DITHER)
 526:.\Generated_Source\PSoC4/PWM_1.c ****             #if(PWM_1_UsingFixedFunction)
 527:.\Generated_Source\PSoC4/PWM_1.c ****                 CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC4/PWM_1.c ****             #else
 529:.\Generated_Source\PSoC4/PWM_1.c ****                 CY_SET_REG8(PWM_1_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (PWM_1_UsingFixedFunction) */
 531:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_PWMMode == PWM_1__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC4/PWM_1.c ****     }
 294              		.loc 1 532 0
 295 0014 BD46     		mov	sp, r7
 296 0016 02B0     		add	sp, sp, #8
 297              		@ sp needed
 298 0018 80BD     		pop	{r7, pc}
 299              	.L22:
 300 001a C046     		.align	2
 301              	.L21:
 302 001c 23000F40 		.word	1074724899
 303              		.cfi_endproc
 304              	.LFE7:
 305              		.size	PWM_1_WriteCompare, .-PWM_1_WriteCompare
 306              		.section	.text.PWM_1_ReadCapture,"ax",%progbits
 307              		.align	2
 308              		.global	PWM_1_ReadCapture
 309              		.code	16
 310              		.thumb_func
 311              		.type	PWM_1_ReadCapture, %function
 312              	PWM_1_ReadCapture:
 313              	.LFB8:
 533:.\Generated_Source\PSoC4/PWM_1.c **** 
 534:.\Generated_Source\PSoC4/PWM_1.c **** 
 535:.\Generated_Source\PSoC4/PWM_1.c **** #else
 536:.\Generated_Source\PSoC4/PWM_1.c **** 
 537:.\Generated_Source\PSoC4/PWM_1.c **** 
 538:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteCompare1
 540:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC4/PWM_1.c ****     *
 542:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 16


 543:.\Generated_Source\PSoC4/PWM_1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC4/PWM_1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC4/PWM_1.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC4/PWM_1.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC4/PWM_1.c ****     *
 548:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 549:.\Generated_Source\PSoC4/PWM_1.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC4/PWM_1.c ****     *
 551:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 552:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 553:.\Generated_Source\PSoC4/PWM_1.c ****     *
 554:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteCompare1(uint8 compare) \
 556:.\Generated_Source\PSoC4/PWM_1.c ****                                         
 557:.\Generated_Source\PSoC4/PWM_1.c ****     {
 558:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 559:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 561:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 563:.\Generated_Source\PSoC4/PWM_1.c ****     }
 564:.\Generated_Source\PSoC4/PWM_1.c **** 
 565:.\Generated_Source\PSoC4/PWM_1.c **** 
 566:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteCompare2
 568:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC4/PWM_1.c ****     *
 570:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 571:.\Generated_Source\PSoC4/PWM_1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC4/PWM_1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC4/PWM_1.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC4/PWM_1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC4/PWM_1.c ****     *  mode.
 576:.\Generated_Source\PSoC4/PWM_1.c ****     *
 577:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 578:.\Generated_Source\PSoC4/PWM_1.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC4/PWM_1.c ****     *
 580:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 581:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 582:.\Generated_Source\PSoC4/PWM_1.c ****     *
 583:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteCompare2(uint8 compare) \
 585:.\Generated_Source\PSoC4/PWM_1.c ****                                         
 586:.\Generated_Source\PSoC4/PWM_1.c ****     {
 587:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 588:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG16(PWM_1_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 590:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG8(PWM_1_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 592:.\Generated_Source\PSoC4/PWM_1.c ****     }
 593:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC4/PWM_1.c **** 
 595:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_DeadBandUsed)
 596:.\Generated_Source\PSoC4/PWM_1.c **** 
 597:.\Generated_Source\PSoC4/PWM_1.c **** 
 598:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteDeadTime
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 17


 600:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC4/PWM_1.c ****     *
 602:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 603:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC4/PWM_1.c ****     *
 605:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 606:.\Generated_Source\PSoC4/PWM_1.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC4/PWM_1.c ****     *
 608:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 609:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 610:.\Generated_Source\PSoC4/PWM_1.c ****     *
 611:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC4/PWM_1.c ****     {
 614:.\Generated_Source\PSoC4/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC4/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 616:.\Generated_Source\PSoC4/PWM_1.c ****             CY_SET_REG8(PWM_1_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 618:.\Generated_Source\PSoC4/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC4/PWM_1.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC4/PWM_1.c ****             PWM_1_DEADBAND_COUNT &= ((uint8)(~PWM_1_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC4/PWM_1.c **** 
 622:.\Generated_Source\PSoC4/PWM_1.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC4/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_1_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC4/PWM_1.c ****                                                     PWM_1_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC4/PWM_1.c ****             #else
 627:.\Generated_Source\PSoC4/PWM_1.c ****                 PWM_1_DEADBAND_COUNT |= deadtime & PWM_1_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC4/PWM_1.c **** 
 630:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 631:.\Generated_Source\PSoC4/PWM_1.c ****     }
 632:.\Generated_Source\PSoC4/PWM_1.c **** 
 633:.\Generated_Source\PSoC4/PWM_1.c **** 
 634:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadDeadTime
 636:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC4/PWM_1.c ****     *
 638:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 639:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC4/PWM_1.c ****     *
 641:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 642:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 643:.\Generated_Source\PSoC4/PWM_1.c ****     *
 644:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 645:.\Generated_Source\PSoC4/PWM_1.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC4/PWM_1.c ****     *
 647:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC4/PWM_1.c ****     {
 650:.\Generated_Source\PSoC4/PWM_1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC4/PWM_1.c ****         #if(!PWM_1_DeadBand2_4)
 652:.\Generated_Source\PSoC4/PWM_1.c ****             return (CY_GET_REG8(PWM_1_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 654:.\Generated_Source\PSoC4/PWM_1.c **** 
 655:.\Generated_Source\PSoC4/PWM_1.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC4/PWM_1.c ****             #if(PWM_1_DEADBAND_COUNT_SHIFT)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 18


 657:.\Generated_Source\PSoC4/PWM_1.c ****                 return ((uint8)(((uint8)(PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC4/PWM_1.c ****                                                                            PWM_1_DEADBAND_COUNT_SHI
 659:.\Generated_Source\PSoC4/PWM_1.c ****             #else
 660:.\Generated_Source\PSoC4/PWM_1.c ****                 return (PWM_1_DEADBAND_COUNT & PWM_1_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC4/PWM_1.c ****             #endif /* (PWM_1_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (!PWM_1_DeadBand2_4) */
 663:.\Generated_Source\PSoC4/PWM_1.c ****     }
 664:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC4/PWM_1.c **** 
 666:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_UseStatus || PWM_1_UsingFixedFunction)
 667:.\Generated_Source\PSoC4/PWM_1.c **** 
 668:.\Generated_Source\PSoC4/PWM_1.c **** 
 669:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_SetInterruptMode
 671:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC4/PWM_1.c ****     *
 673:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 674:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC4/PWM_1.c ****     *  source status register.
 676:.\Generated_Source\PSoC4/PWM_1.c ****     *
 677:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 678:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC4/PWM_1.c ****     *
 680:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 681:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 682:.\Generated_Source\PSoC4/PWM_1.c ****     *
 683:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC4/PWM_1.c ****     {
 686:.\Generated_Source\PSoC4/PWM_1.c ****         CY_SET_REG8(PWM_1_STATUS_MASK_PTR, interruptMode);
 687:.\Generated_Source\PSoC4/PWM_1.c ****     }
 688:.\Generated_Source\PSoC4/PWM_1.c **** 
 689:.\Generated_Source\PSoC4/PWM_1.c **** 
 690:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadStatusRegister
 692:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC4/PWM_1.c ****     *
 694:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 695:.\Generated_Source\PSoC4/PWM_1.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC4/PWM_1.c ****     *
 697:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 698:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 699:.\Generated_Source\PSoC4/PWM_1.c ****     *
 700:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 701:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC4/PWM_1.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC4/PWM_1.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC4/PWM_1.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC4/PWM_1.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC4/PWM_1.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC4/PWM_1.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC4/PWM_1.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC4/PWM_1.c ****     *
 710:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC4/PWM_1.c ****     {
 713:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_STATUS_PTR));
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 19


 714:.\Generated_Source\PSoC4/PWM_1.c ****     }
 715:.\Generated_Source\PSoC4/PWM_1.c **** 
 716:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* (PWM_1_UseStatus || PWM_1_UsingFixedFunction) */
 717:.\Generated_Source\PSoC4/PWM_1.c **** 
 718:.\Generated_Source\PSoC4/PWM_1.c **** 
 719:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_UseControl)
 720:.\Generated_Source\PSoC4/PWM_1.c **** 
 721:.\Generated_Source\PSoC4/PWM_1.c **** 
 722:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadControlRegister
 724:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC4/PWM_1.c ****     *
 726:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 727:.\Generated_Source\PSoC4/PWM_1.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC4/PWM_1.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC4/PWM_1.c ****     *
 730:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 731:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 732:.\Generated_Source\PSoC4/PWM_1.c ****     *
 733:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 734:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC4/PWM_1.c ****     *
 736:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC4/PWM_1.c ****     {
 739:.\Generated_Source\PSoC4/PWM_1.c ****         uint8 result;
 740:.\Generated_Source\PSoC4/PWM_1.c **** 
 741:.\Generated_Source\PSoC4/PWM_1.c ****         result = CY_GET_REG8(PWM_1_CONTROL_PTR);
 742:.\Generated_Source\PSoC4/PWM_1.c ****         return (result);
 743:.\Generated_Source\PSoC4/PWM_1.c ****     }
 744:.\Generated_Source\PSoC4/PWM_1.c **** 
 745:.\Generated_Source\PSoC4/PWM_1.c **** 
 746:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_WriteControlRegister
 748:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC4/PWM_1.c ****     *
 750:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 751:.\Generated_Source\PSoC4/PWM_1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC4/PWM_1.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC4/PWM_1.c ****     *
 754:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 755:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC4/PWM_1.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC4/PWM_1.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC4/PWM_1.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC4/PWM_1.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC4/PWM_1.c ****     *
 761:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 762:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 763:.\Generated_Source\PSoC4/PWM_1.c ****     *
 764:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC4/PWM_1.c ****     void PWM_1_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC4/PWM_1.c ****     {
 767:.\Generated_Source\PSoC4/PWM_1.c ****         CY_SET_REG8(PWM_1_CONTROL_PTR, control);
 768:.\Generated_Source\PSoC4/PWM_1.c ****     }
 769:.\Generated_Source\PSoC4/PWM_1.c **** 
 770:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* (PWM_1_UseControl) */
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 20


 771:.\Generated_Source\PSoC4/PWM_1.c **** 
 772:.\Generated_Source\PSoC4/PWM_1.c **** 
 773:.\Generated_Source\PSoC4/PWM_1.c **** #if (!PWM_1_UsingFixedFunction)
 774:.\Generated_Source\PSoC4/PWM_1.c **** 
 775:.\Generated_Source\PSoC4/PWM_1.c **** 
 776:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadCapture
 778:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC4/PWM_1.c ****     *
 780:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 781:.\Generated_Source\PSoC4/PWM_1.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC4/PWM_1.c ****     *
 783:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 784:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 785:.\Generated_Source\PSoC4/PWM_1.c ****     *
 786:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 787:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC4/PWM_1.c ****     *
 789:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadCapture(void) 
 791:.\Generated_Source\PSoC4/PWM_1.c ****     {
 314              		.loc 1 791 0
 315              		.cfi_startproc
 316 0000 80B5     		push	{r7, lr}
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 7, -8
 319              		.cfi_offset 14, -4
 320 0002 00AF     		add	r7, sp, #0
 321              		.cfi_def_cfa_register 7
 792:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_CAPTURE_LSB_PTR));
 322              		.loc 1 792 0
 323 0004 024B     		ldr	r3, .L25
 324 0006 1B78     		ldrb	r3, [r3]
 325 0008 DBB2     		uxtb	r3, r3
 793:.\Generated_Source\PSoC4/PWM_1.c ****     }
 326              		.loc 1 793 0
 327 000a 181C     		mov	r0, r3
 328 000c BD46     		mov	sp, r7
 329              		@ sp needed
 330 000e 80BD     		pop	{r7, pc}
 331              	.L26:
 332              		.align	2
 333              	.L25:
 334 0010 53000F40 		.word	1074724947
 335              		.cfi_endproc
 336              	.LFE8:
 337              		.size	PWM_1_ReadCapture, .-PWM_1_ReadCapture
 338              		.section	.text.PWM_1_ReadCompare,"ax",%progbits
 339              		.align	2
 340              		.global	PWM_1_ReadCompare
 341              		.code	16
 342              		.thumb_func
 343              		.type	PWM_1_ReadCompare, %function
 344              	PWM_1_ReadCompare:
 345              	.LFB9:
 794:.\Generated_Source\PSoC4/PWM_1.c **** 
 795:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* (!PWM_1_UsingFixedFunction) */
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 21


 796:.\Generated_Source\PSoC4/PWM_1.c **** 
 797:.\Generated_Source\PSoC4/PWM_1.c **** 
 798:.\Generated_Source\PSoC4/PWM_1.c **** #if (PWM_1_UseOneCompareMode)
 799:.\Generated_Source\PSoC4/PWM_1.c **** 
 800:.\Generated_Source\PSoC4/PWM_1.c **** 
 801:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadCompare
 803:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC4/PWM_1.c ****     *
 805:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 806:.\Generated_Source\PSoC4/PWM_1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC4/PWM_1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC4/PWM_1.c ****     *
 809:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 810:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 811:.\Generated_Source\PSoC4/PWM_1.c ****     *
 812:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 813:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC4/PWM_1.c ****     *
 815:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadCompare(void) 
 817:.\Generated_Source\PSoC4/PWM_1.c ****     {
 346              		.loc 1 817 0
 347              		.cfi_startproc
 348 0000 80B5     		push	{r7, lr}
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 00AF     		add	r7, sp, #0
 353              		.cfi_def_cfa_register 7
 818:.\Generated_Source\PSoC4/PWM_1.c ****         #if(PWM_1_UsingFixedFunction)
 819:.\Generated_Source\PSoC4/PWM_1.c ****             return ((uint8)CY_GET_REG16(PWM_1_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC4/PWM_1.c ****         #else
 821:.\Generated_Source\PSoC4/PWM_1.c ****             return (CY_GET_REG8(PWM_1_COMPARE1_LSB_PTR));
 354              		.loc 1 821 0
 355 0004 024B     		ldr	r3, .L29
 356 0006 1B78     		ldrb	r3, [r3]
 357 0008 DBB2     		uxtb	r3, r3
 822:.\Generated_Source\PSoC4/PWM_1.c ****         #endif /* (PWM_1_UsingFixedFunction) */
 823:.\Generated_Source\PSoC4/PWM_1.c ****     }
 358              		.loc 1 823 0
 359 000a 181C     		mov	r0, r3
 360 000c BD46     		mov	sp, r7
 361              		@ sp needed
 362 000e 80BD     		pop	{r7, pc}
 363              	.L30:
 364              		.align	2
 365              	.L29:
 366 0010 23000F40 		.word	1074724899
 367              		.cfi_endproc
 368              	.LFE9:
 369              		.size	PWM_1_ReadCompare, .-PWM_1_ReadCompare
 370              		.section	.text.PWM_1_ReadPeriod,"ax",%progbits
 371              		.align	2
 372              		.global	PWM_1_ReadPeriod
 373              		.code	16
 374              		.thumb_func
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 22


 375              		.type	PWM_1_ReadPeriod, %function
 376              	PWM_1_ReadPeriod:
 377              	.LFB10:
 824:.\Generated_Source\PSoC4/PWM_1.c **** 
 825:.\Generated_Source\PSoC4/PWM_1.c **** #else
 826:.\Generated_Source\PSoC4/PWM_1.c **** 
 827:.\Generated_Source\PSoC4/PWM_1.c **** 
 828:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadCompare1
 830:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC4/PWM_1.c ****     *
 832:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 833:.\Generated_Source\PSoC4/PWM_1.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC4/PWM_1.c ****     *
 835:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 836:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 837:.\Generated_Source\PSoC4/PWM_1.c ****     *
 838:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 839:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC4/PWM_1.c ****     *
 841:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadCompare1(void) 
 843:.\Generated_Source\PSoC4/PWM_1.c ****     {
 844:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC4/PWM_1.c ****     }
 846:.\Generated_Source\PSoC4/PWM_1.c **** 
 847:.\Generated_Source\PSoC4/PWM_1.c **** 
 848:.\Generated_Source\PSoC4/PWM_1.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC4/PWM_1.c ****     * Function Name: PWM_1_ReadCompare2
 850:.\Generated_Source\PSoC4/PWM_1.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC4/PWM_1.c ****     *
 852:.\Generated_Source\PSoC4/PWM_1.c ****     * Summary:
 853:.\Generated_Source\PSoC4/PWM_1.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC4/PWM_1.c ****     *
 855:.\Generated_Source\PSoC4/PWM_1.c ****     * Parameters:
 856:.\Generated_Source\PSoC4/PWM_1.c ****     *  None
 857:.\Generated_Source\PSoC4/PWM_1.c ****     *
 858:.\Generated_Source\PSoC4/PWM_1.c ****     * Return:
 859:.\Generated_Source\PSoC4/PWM_1.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC4/PWM_1.c ****     *
 861:.\Generated_Source\PSoC4/PWM_1.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC4/PWM_1.c ****     uint8 PWM_1_ReadCompare2(void) 
 863:.\Generated_Source\PSoC4/PWM_1.c ****     {
 864:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC4/PWM_1.c ****     }
 866:.\Generated_Source\PSoC4/PWM_1.c **** 
 867:.\Generated_Source\PSoC4/PWM_1.c **** #endif /* (PWM_1_UseOneCompareMode) */
 868:.\Generated_Source\PSoC4/PWM_1.c **** 
 869:.\Generated_Source\PSoC4/PWM_1.c **** 
 870:.\Generated_Source\PSoC4/PWM_1.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC4/PWM_1.c **** * Function Name: PWM_1_ReadPeriod
 872:.\Generated_Source\PSoC4/PWM_1.c **** ********************************************************************************
 873:.\Generated_Source\PSoC4/PWM_1.c **** *
 874:.\Generated_Source\PSoC4/PWM_1.c **** * Summary:
 875:.\Generated_Source\PSoC4/PWM_1.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC4/PWM_1.c **** *
 877:.\Generated_Source\PSoC4/PWM_1.c **** * Parameters:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 23


 878:.\Generated_Source\PSoC4/PWM_1.c **** *  None
 879:.\Generated_Source\PSoC4/PWM_1.c **** *
 880:.\Generated_Source\PSoC4/PWM_1.c **** * Return:
 881:.\Generated_Source\PSoC4/PWM_1.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC4/PWM_1.c **** *
 883:.\Generated_Source\PSoC4/PWM_1.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC4/PWM_1.c **** uint8 PWM_1_ReadPeriod(void) 
 885:.\Generated_Source\PSoC4/PWM_1.c **** {
 378              		.loc 1 885 0
 379              		.cfi_startproc
 380 0000 80B5     		push	{r7, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
 886:.\Generated_Source\PSoC4/PWM_1.c ****     #if(PWM_1_UsingFixedFunction)
 887:.\Generated_Source\PSoC4/PWM_1.c ****         return ((uint8)CY_GET_REG16(PWM_1_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC4/PWM_1.c ****     #else
 889:.\Generated_Source\PSoC4/PWM_1.c ****         return (CY_GET_REG8(PWM_1_PERIOD_LSB_PTR));
 386              		.loc 1 889 0
 387 0004 024B     		ldr	r3, .L33
 388 0006 1B78     		ldrb	r3, [r3]
 389 0008 DBB2     		uxtb	r3, r3
 890:.\Generated_Source\PSoC4/PWM_1.c ****     #endif /* (PWM_1_UsingFixedFunction) */
 891:.\Generated_Source\PSoC4/PWM_1.c **** }
 390              		.loc 1 891 0
 391 000a 181C     		mov	r0, r3
 392 000c BD46     		mov	sp, r7
 393              		@ sp needed
 394 000e 80BD     		pop	{r7, pc}
 395              	.L34:
 396              		.align	2
 397              	.L33:
 398 0010 43000F40 		.word	1074724931
 399              		.cfi_endproc
 400              	.LFE10:
 401              		.size	PWM_1_ReadPeriod, .-PWM_1_ReadPeriod
 402              		.text
 403              	.Letext0:
 404              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 405              		.section	.debug_info,"",%progbits
 406              	.Ldebug_info0:
 407 0000 BF010000 		.4byte	0x1bf
 408 0004 0400     		.2byte	0x4
 409 0006 00000000 		.4byte	.Ldebug_abbrev0
 410 000a 04       		.byte	0x4
 411 000b 01       		.uleb128 0x1
 412 000c 7E000000 		.4byte	.LASF29
 413 0010 01       		.byte	0x1
 414 0011 F1010000 		.4byte	.LASF30
 415 0015 3A000000 		.4byte	.LASF31
 416 0019 00000000 		.4byte	.Ldebug_ranges0+0
 417 001d 00000000 		.4byte	0
 418 0021 00000000 		.4byte	.Ldebug_line0
 419 0025 02       		.uleb128 0x2
 420 0026 01       		.byte	0x1
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 24


 421 0027 06       		.byte	0x6
 422 0028 38020000 		.4byte	.LASF0
 423 002c 02       		.uleb128 0x2
 424 002d 01       		.byte	0x1
 425 002e 08       		.byte	0x8
 426 002f FA000000 		.4byte	.LASF1
 427 0033 02       		.uleb128 0x2
 428 0034 02       		.byte	0x2
 429 0035 05       		.byte	0x5
 430 0036 65010000 		.4byte	.LASF2
 431 003a 02       		.uleb128 0x2
 432 003b 02       		.byte	0x2
 433 003c 07       		.byte	0x7
 434 003d 27000000 		.4byte	.LASF3
 435 0041 02       		.uleb128 0x2
 436 0042 04       		.byte	0x4
 437 0043 05       		.byte	0x5
 438 0044 2F020000 		.4byte	.LASF4
 439 0048 02       		.uleb128 0x2
 440 0049 04       		.byte	0x4
 441 004a 07       		.byte	0x7
 442 004b 1E010000 		.4byte	.LASF5
 443 004f 02       		.uleb128 0x2
 444 0050 08       		.byte	0x8
 445 0051 05       		.byte	0x5
 446 0052 CC010000 		.4byte	.LASF6
 447 0056 02       		.uleb128 0x2
 448 0057 08       		.byte	0x8
 449 0058 07       		.byte	0x7
 450 0059 99010000 		.4byte	.LASF7
 451 005d 03       		.uleb128 0x3
 452 005e 04       		.byte	0x4
 453 005f 05       		.byte	0x5
 454 0060 696E7400 		.ascii	"int\000"
 455 0064 02       		.uleb128 0x2
 456 0065 04       		.byte	0x4
 457 0066 07       		.byte	0x7
 458 0067 8C010000 		.4byte	.LASF8
 459 006b 04       		.uleb128 0x4
 460 006c 30010000 		.4byte	.LASF12
 461 0070 02       		.byte	0x2
 462 0071 C1       		.byte	0xc1
 463 0072 2C000000 		.4byte	0x2c
 464 0076 02       		.uleb128 0x2
 465 0077 04       		.byte	0x4
 466 0078 04       		.byte	0x4
 467 0079 78000000 		.4byte	.LASF9
 468 007d 02       		.uleb128 0x2
 469 007e 08       		.byte	0x8
 470 007f 04       		.byte	0x4
 471 0080 50010000 		.4byte	.LASF10
 472 0084 02       		.uleb128 0x2
 473 0085 01       		.byte	0x1
 474 0086 08       		.byte	0x8
 475 0087 DA010000 		.4byte	.LASF11
 476 008b 05       		.uleb128 0x5
 477 008c 08010000 		.4byte	.LASF13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 25


 478 0090 02       		.byte	0x2
 479 0091 6B01     		.2byte	0x16b
 480 0093 97000000 		.4byte	0x97
 481 0097 06       		.uleb128 0x6
 482 0098 6B000000 		.4byte	0x6b
 483 009c 02       		.uleb128 0x2
 484 009d 04       		.byte	0x4
 485 009e 07       		.byte	0x7
 486 009f B0010000 		.4byte	.LASF14
 487 00a3 07       		.uleb128 0x7
 488 00a4 4C020000 		.4byte	.LASF15
 489 00a8 01       		.byte	0x1
 490 00a9 37       		.byte	0x37
 491 00aa 00000000 		.4byte	.LFB0
 492 00ae 24000000 		.4byte	.LFE0-.LFB0
 493 00b2 01       		.uleb128 0x1
 494 00b3 9C       		.byte	0x9c
 495 00b4 07       		.uleb128 0x7
 496 00b5 81010000 		.4byte	.LASF16
 497 00b9 01       		.byte	0x1
 498 00ba 54       		.byte	0x54
 499 00bb 00000000 		.4byte	.LFB1
 500 00bf 30000000 		.4byte	.LFE1-.LFB1
 501 00c3 01       		.uleb128 0x1
 502 00c4 9C       		.byte	0x9c
 503 00c5 08       		.uleb128 0x8
 504 00c6 00000000 		.4byte	.LASF17
 505 00ca 01       		.byte	0x1
 506 00cb C7       		.byte	0xc7
 507 00cc 00000000 		.4byte	.LFB2
 508 00d0 08000000 		.4byte	.LFE2-.LFB2
 509 00d4 01       		.uleb128 0x1
 510 00d5 9C       		.byte	0x9c
 511 00d6 08       		.uleb128 0x8
 512 00d7 24020000 		.4byte	.LASF18
 513 00db 01       		.byte	0x1
 514 00dc E9       		.byte	0xe9
 515 00dd 00000000 		.4byte	.LFB3
 516 00e1 08000000 		.4byte	.LFE3-.LFB3
 517 00e5 01       		.uleb128 0x1
 518 00e6 9C       		.byte	0x9c
 519 00e7 09       		.uleb128 0x9
 520 00e8 0D000000 		.4byte	.LASF19
 521 00ec 01       		.byte	0x1
 522 00ed 9301     		.2byte	0x193
 523 00ef 00000000 		.4byte	.LFB4
 524 00f3 20000000 		.4byte	.LFE4-.LFB4
 525 00f7 01       		.uleb128 0x1
 526 00f8 9C       		.byte	0x9c
 527 00f9 0D010000 		.4byte	0x10d
 528 00fd 0A       		.uleb128 0xa
 529 00fe 36010000 		.4byte	.LASF21
 530 0102 01       		.byte	0x1
 531 0103 9301     		.2byte	0x193
 532 0105 6B000000 		.4byte	0x6b
 533 0109 02       		.uleb128 0x2
 534 010a 91       		.byte	0x91
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 26


 535 010b 77       		.sleb128 -9
 536 010c 00       		.byte	0
 537 010d 0B       		.uleb128 0xb
 538 010e 12020000 		.4byte	.LASF25
 539 0112 01       		.byte	0x1
 540 0113 A901     		.2byte	0x1a9
 541 0115 6B000000 		.4byte	0x6b
 542 0119 00000000 		.4byte	.LFB5
 543 011d 1C000000 		.4byte	.LFE5-.LFB5
 544 0121 01       		.uleb128 0x1
 545 0122 9C       		.byte	0x9c
 546 0123 09       		.uleb128 0x9
 547 0124 DF010000 		.4byte	.LASF20
 548 0128 01       		.byte	0x1
 549 0129 E201     		.2byte	0x1e2
 550 012b 00000000 		.4byte	.LFB6
 551 012f 20000000 		.4byte	.LFE6-.LFB6
 552 0133 01       		.uleb128 0x1
 553 0134 9C       		.byte	0x9c
 554 0135 49010000 		.4byte	0x149
 555 0139 0A       		.uleb128 0xa
 556 013a 20000000 		.4byte	.LASF22
 557 013e 01       		.byte	0x1
 558 013f E201     		.2byte	0x1e2
 559 0141 6B000000 		.4byte	0x6b
 560 0145 02       		.uleb128 0x2
 561 0146 91       		.byte	0x91
 562 0147 77       		.sleb128 -9
 563 0148 00       		.byte	0
 564 0149 09       		.uleb128 0x9
 565 014a B9010000 		.4byte	.LASF23
 566 014e 01       		.byte	0x1
 567 014f 0402     		.2byte	0x204
 568 0151 00000000 		.4byte	.LFB7
 569 0155 20000000 		.4byte	.LFE7-.LFB7
 570 0159 01       		.uleb128 0x1
 571 015a 9C       		.byte	0x9c
 572 015b 6F010000 		.4byte	0x16f
 573 015f 0A       		.uleb128 0xa
 574 0160 44020000 		.4byte	.LASF24
 575 0164 01       		.byte	0x1
 576 0165 0402     		.2byte	0x204
 577 0167 6B000000 		.4byte	0x6b
 578 016b 02       		.uleb128 0x2
 579 016c 91       		.byte	0x91
 580 016d 77       		.sleb128 -9
 581 016e 00       		.byte	0
 582 016f 0B       		.uleb128 0xb
 583 0170 6F010000 		.4byte	.LASF26
 584 0174 01       		.byte	0x1
 585 0175 1603     		.2byte	0x316
 586 0177 6B000000 		.4byte	0x6b
 587 017b 00000000 		.4byte	.LFB8
 588 017f 14000000 		.4byte	.LFE8-.LFB8
 589 0183 01       		.uleb128 0x1
 590 0184 9C       		.byte	0x9c
 591 0185 0B       		.uleb128 0xb
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 27


 592 0186 3E010000 		.4byte	.LASF27
 593 018a 01       		.byte	0x1
 594 018b 3003     		.2byte	0x330
 595 018d 6B000000 		.4byte	0x6b
 596 0191 00000000 		.4byte	.LFB9
 597 0195 14000000 		.4byte	.LFE9-.LFB9
 598 0199 01       		.uleb128 0x1
 599 019a 9C       		.byte	0x9c
 600 019b 0B       		.uleb128 0xb
 601 019c 0D010000 		.4byte	.LASF28
 602 01a0 01       		.byte	0x1
 603 01a1 7403     		.2byte	0x374
 604 01a3 6B000000 		.4byte	0x6b
 605 01a7 00000000 		.4byte	.LFB10
 606 01ab 14000000 		.4byte	.LFE10-.LFB10
 607 01af 01       		.uleb128 0x1
 608 01b0 9C       		.byte	0x9c
 609 01b1 0C       		.uleb128 0xc
 610 01b2 57010000 		.4byte	.LASF32
 611 01b6 01       		.byte	0x1
 612 01b7 20       		.byte	0x20
 613 01b8 6B000000 		.4byte	0x6b
 614 01bc 05       		.uleb128 0x5
 615 01bd 03       		.byte	0x3
 616 01be 00000000 		.4byte	PWM_1_initVar
 617 01c2 00       		.byte	0
 618              		.section	.debug_abbrev,"",%progbits
 619              	.Ldebug_abbrev0:
 620 0000 01       		.uleb128 0x1
 621 0001 11       		.uleb128 0x11
 622 0002 01       		.byte	0x1
 623 0003 25       		.uleb128 0x25
 624 0004 0E       		.uleb128 0xe
 625 0005 13       		.uleb128 0x13
 626 0006 0B       		.uleb128 0xb
 627 0007 03       		.uleb128 0x3
 628 0008 0E       		.uleb128 0xe
 629 0009 1B       		.uleb128 0x1b
 630 000a 0E       		.uleb128 0xe
 631 000b 55       		.uleb128 0x55
 632 000c 17       		.uleb128 0x17
 633 000d 11       		.uleb128 0x11
 634 000e 01       		.uleb128 0x1
 635 000f 10       		.uleb128 0x10
 636 0010 17       		.uleb128 0x17
 637 0011 00       		.byte	0
 638 0012 00       		.byte	0
 639 0013 02       		.uleb128 0x2
 640 0014 24       		.uleb128 0x24
 641 0015 00       		.byte	0
 642 0016 0B       		.uleb128 0xb
 643 0017 0B       		.uleb128 0xb
 644 0018 3E       		.uleb128 0x3e
 645 0019 0B       		.uleb128 0xb
 646 001a 03       		.uleb128 0x3
 647 001b 0E       		.uleb128 0xe
 648 001c 00       		.byte	0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 28


 649 001d 00       		.byte	0
 650 001e 03       		.uleb128 0x3
 651 001f 24       		.uleb128 0x24
 652 0020 00       		.byte	0
 653 0021 0B       		.uleb128 0xb
 654 0022 0B       		.uleb128 0xb
 655 0023 3E       		.uleb128 0x3e
 656 0024 0B       		.uleb128 0xb
 657 0025 03       		.uleb128 0x3
 658 0026 08       		.uleb128 0x8
 659 0027 00       		.byte	0
 660 0028 00       		.byte	0
 661 0029 04       		.uleb128 0x4
 662 002a 16       		.uleb128 0x16
 663 002b 00       		.byte	0
 664 002c 03       		.uleb128 0x3
 665 002d 0E       		.uleb128 0xe
 666 002e 3A       		.uleb128 0x3a
 667 002f 0B       		.uleb128 0xb
 668 0030 3B       		.uleb128 0x3b
 669 0031 0B       		.uleb128 0xb
 670 0032 49       		.uleb128 0x49
 671 0033 13       		.uleb128 0x13
 672 0034 00       		.byte	0
 673 0035 00       		.byte	0
 674 0036 05       		.uleb128 0x5
 675 0037 16       		.uleb128 0x16
 676 0038 00       		.byte	0
 677 0039 03       		.uleb128 0x3
 678 003a 0E       		.uleb128 0xe
 679 003b 3A       		.uleb128 0x3a
 680 003c 0B       		.uleb128 0xb
 681 003d 3B       		.uleb128 0x3b
 682 003e 05       		.uleb128 0x5
 683 003f 49       		.uleb128 0x49
 684 0040 13       		.uleb128 0x13
 685 0041 00       		.byte	0
 686 0042 00       		.byte	0
 687 0043 06       		.uleb128 0x6
 688 0044 35       		.uleb128 0x35
 689 0045 00       		.byte	0
 690 0046 49       		.uleb128 0x49
 691 0047 13       		.uleb128 0x13
 692 0048 00       		.byte	0
 693 0049 00       		.byte	0
 694 004a 07       		.uleb128 0x7
 695 004b 2E       		.uleb128 0x2e
 696 004c 00       		.byte	0
 697 004d 3F       		.uleb128 0x3f
 698 004e 19       		.uleb128 0x19
 699 004f 03       		.uleb128 0x3
 700 0050 0E       		.uleb128 0xe
 701 0051 3A       		.uleb128 0x3a
 702 0052 0B       		.uleb128 0xb
 703 0053 3B       		.uleb128 0x3b
 704 0054 0B       		.uleb128 0xb
 705 0055 27       		.uleb128 0x27
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 29


 706 0056 19       		.uleb128 0x19
 707 0057 11       		.uleb128 0x11
 708 0058 01       		.uleb128 0x1
 709 0059 12       		.uleb128 0x12
 710 005a 06       		.uleb128 0x6
 711 005b 40       		.uleb128 0x40
 712 005c 18       		.uleb128 0x18
 713 005d 9642     		.uleb128 0x2116
 714 005f 19       		.uleb128 0x19
 715 0060 00       		.byte	0
 716 0061 00       		.byte	0
 717 0062 08       		.uleb128 0x8
 718 0063 2E       		.uleb128 0x2e
 719 0064 00       		.byte	0
 720 0065 3F       		.uleb128 0x3f
 721 0066 19       		.uleb128 0x19
 722 0067 03       		.uleb128 0x3
 723 0068 0E       		.uleb128 0xe
 724 0069 3A       		.uleb128 0x3a
 725 006a 0B       		.uleb128 0xb
 726 006b 3B       		.uleb128 0x3b
 727 006c 0B       		.uleb128 0xb
 728 006d 27       		.uleb128 0x27
 729 006e 19       		.uleb128 0x19
 730 006f 11       		.uleb128 0x11
 731 0070 01       		.uleb128 0x1
 732 0071 12       		.uleb128 0x12
 733 0072 06       		.uleb128 0x6
 734 0073 40       		.uleb128 0x40
 735 0074 18       		.uleb128 0x18
 736 0075 9742     		.uleb128 0x2117
 737 0077 19       		.uleb128 0x19
 738 0078 00       		.byte	0
 739 0079 00       		.byte	0
 740 007a 09       		.uleb128 0x9
 741 007b 2E       		.uleb128 0x2e
 742 007c 01       		.byte	0x1
 743 007d 3F       		.uleb128 0x3f
 744 007e 19       		.uleb128 0x19
 745 007f 03       		.uleb128 0x3
 746 0080 0E       		.uleb128 0xe
 747 0081 3A       		.uleb128 0x3a
 748 0082 0B       		.uleb128 0xb
 749 0083 3B       		.uleb128 0x3b
 750 0084 05       		.uleb128 0x5
 751 0085 27       		.uleb128 0x27
 752 0086 19       		.uleb128 0x19
 753 0087 11       		.uleb128 0x11
 754 0088 01       		.uleb128 0x1
 755 0089 12       		.uleb128 0x12
 756 008a 06       		.uleb128 0x6
 757 008b 40       		.uleb128 0x40
 758 008c 18       		.uleb128 0x18
 759 008d 9742     		.uleb128 0x2117
 760 008f 19       		.uleb128 0x19
 761 0090 01       		.uleb128 0x1
 762 0091 13       		.uleb128 0x13
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 30


 763 0092 00       		.byte	0
 764 0093 00       		.byte	0
 765 0094 0A       		.uleb128 0xa
 766 0095 05       		.uleb128 0x5
 767 0096 00       		.byte	0
 768 0097 03       		.uleb128 0x3
 769 0098 0E       		.uleb128 0xe
 770 0099 3A       		.uleb128 0x3a
 771 009a 0B       		.uleb128 0xb
 772 009b 3B       		.uleb128 0x3b
 773 009c 05       		.uleb128 0x5
 774 009d 49       		.uleb128 0x49
 775 009e 13       		.uleb128 0x13
 776 009f 02       		.uleb128 0x2
 777 00a0 18       		.uleb128 0x18
 778 00a1 00       		.byte	0
 779 00a2 00       		.byte	0
 780 00a3 0B       		.uleb128 0xb
 781 00a4 2E       		.uleb128 0x2e
 782 00a5 00       		.byte	0
 783 00a6 3F       		.uleb128 0x3f
 784 00a7 19       		.uleb128 0x19
 785 00a8 03       		.uleb128 0x3
 786 00a9 0E       		.uleb128 0xe
 787 00aa 3A       		.uleb128 0x3a
 788 00ab 0B       		.uleb128 0xb
 789 00ac 3B       		.uleb128 0x3b
 790 00ad 05       		.uleb128 0x5
 791 00ae 27       		.uleb128 0x27
 792 00af 19       		.uleb128 0x19
 793 00b0 49       		.uleb128 0x49
 794 00b1 13       		.uleb128 0x13
 795 00b2 11       		.uleb128 0x11
 796 00b3 01       		.uleb128 0x1
 797 00b4 12       		.uleb128 0x12
 798 00b5 06       		.uleb128 0x6
 799 00b6 40       		.uleb128 0x40
 800 00b7 18       		.uleb128 0x18
 801 00b8 9742     		.uleb128 0x2117
 802 00ba 19       		.uleb128 0x19
 803 00bb 00       		.byte	0
 804 00bc 00       		.byte	0
 805 00bd 0C       		.uleb128 0xc
 806 00be 34       		.uleb128 0x34
 807 00bf 00       		.byte	0
 808 00c0 03       		.uleb128 0x3
 809 00c1 0E       		.uleb128 0xe
 810 00c2 3A       		.uleb128 0x3a
 811 00c3 0B       		.uleb128 0xb
 812 00c4 3B       		.uleb128 0x3b
 813 00c5 0B       		.uleb128 0xb
 814 00c6 49       		.uleb128 0x49
 815 00c7 13       		.uleb128 0x13
 816 00c8 3F       		.uleb128 0x3f
 817 00c9 19       		.uleb128 0x19
 818 00ca 02       		.uleb128 0x2
 819 00cb 18       		.uleb128 0x18
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 31


 820 00cc 00       		.byte	0
 821 00cd 00       		.byte	0
 822 00ce 00       		.byte	0
 823              		.section	.debug_aranges,"",%progbits
 824 0000 6C000000 		.4byte	0x6c
 825 0004 0200     		.2byte	0x2
 826 0006 00000000 		.4byte	.Ldebug_info0
 827 000a 04       		.byte	0x4
 828 000b 00       		.byte	0
 829 000c 0000     		.2byte	0
 830 000e 0000     		.2byte	0
 831 0010 00000000 		.4byte	.LFB0
 832 0014 24000000 		.4byte	.LFE0-.LFB0
 833 0018 00000000 		.4byte	.LFB1
 834 001c 30000000 		.4byte	.LFE1-.LFB1
 835 0020 00000000 		.4byte	.LFB2
 836 0024 08000000 		.4byte	.LFE2-.LFB2
 837 0028 00000000 		.4byte	.LFB3
 838 002c 08000000 		.4byte	.LFE3-.LFB3
 839 0030 00000000 		.4byte	.LFB4
 840 0034 20000000 		.4byte	.LFE4-.LFB4
 841 0038 00000000 		.4byte	.LFB5
 842 003c 1C000000 		.4byte	.LFE5-.LFB5
 843 0040 00000000 		.4byte	.LFB6
 844 0044 20000000 		.4byte	.LFE6-.LFB6
 845 0048 00000000 		.4byte	.LFB7
 846 004c 20000000 		.4byte	.LFE7-.LFB7
 847 0050 00000000 		.4byte	.LFB8
 848 0054 14000000 		.4byte	.LFE8-.LFB8
 849 0058 00000000 		.4byte	.LFB9
 850 005c 14000000 		.4byte	.LFE9-.LFB9
 851 0060 00000000 		.4byte	.LFB10
 852 0064 14000000 		.4byte	.LFE10-.LFB10
 853 0068 00000000 		.4byte	0
 854 006c 00000000 		.4byte	0
 855              		.section	.debug_ranges,"",%progbits
 856              	.Ldebug_ranges0:
 857 0000 00000000 		.4byte	.LFB0
 858 0004 24000000 		.4byte	.LFE0
 859 0008 00000000 		.4byte	.LFB1
 860 000c 30000000 		.4byte	.LFE1
 861 0010 00000000 		.4byte	.LFB2
 862 0014 08000000 		.4byte	.LFE2
 863 0018 00000000 		.4byte	.LFB3
 864 001c 08000000 		.4byte	.LFE3
 865 0020 00000000 		.4byte	.LFB4
 866 0024 20000000 		.4byte	.LFE4
 867 0028 00000000 		.4byte	.LFB5
 868 002c 1C000000 		.4byte	.LFE5
 869 0030 00000000 		.4byte	.LFB6
 870 0034 20000000 		.4byte	.LFE6
 871 0038 00000000 		.4byte	.LFB7
 872 003c 20000000 		.4byte	.LFE7
 873 0040 00000000 		.4byte	.LFB8
 874 0044 14000000 		.4byte	.LFE8
 875 0048 00000000 		.4byte	.LFB9
 876 004c 14000000 		.4byte	.LFE9
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 32


 877 0050 00000000 		.4byte	.LFB10
 878 0054 14000000 		.4byte	.LFE10
 879 0058 00000000 		.4byte	0
 880 005c 00000000 		.4byte	0
 881              		.section	.debug_line,"",%progbits
 882              	.Ldebug_line0:
 883 0000 1E010000 		.section	.debug_str,"MS",%progbits,1
 883      02004400 
 883      00000201 
 883      FB0E0D00 
 883      01010101 
 884              	.LASF17:
 885 0000 50574D5F 		.ascii	"PWM_1_Enable\000"
 885      315F456E 
 885      61626C65 
 885      00
 886              	.LASF19:
 887 000d 50574D5F 		.ascii	"PWM_1_WriteCounter\000"
 887      315F5772 
 887      69746543 
 887      6F756E74 
 887      657200
 888              	.LASF22:
 889 0020 70657269 		.ascii	"period\000"
 889      6F6400
 890              	.LASF3:
 891 0027 73686F72 		.ascii	"short unsigned int\000"
 891      7420756E 
 891      7369676E 
 891      65642069 
 891      6E7400
 892              	.LASF31:
 893 003a 443A5C70 		.ascii	"D:\\patternagents\\PSoC_Workshop\\projects\\LAB_TWO"
 893      61747465 
 893      726E6167 
 893      656E7473 
 893      5C50536F 
 894 0069 5C4C4142 		.ascii	"\\LAB_TWO.cydsn\000"
 894      5F54574F 
 894      2E637964 
 894      736E00
 895              	.LASF9:
 896 0078 666C6F61 		.ascii	"float\000"
 896      7400
 897              	.LASF29:
 898 007e 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 898      4320342E 
 898      382E3420 
 898      32303134 
 898      30353236 
 899 00b1 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 899      20726576 
 899      6973696F 
 899      6E203231 
 899      31333538 
 900 00e4 30202D66 		.ascii	"0 -ffunction-sections\000"
 900      66756E63 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 33


 900      74696F6E 
 900      2D736563 
 900      74696F6E 
 901              	.LASF1:
 902 00fa 756E7369 		.ascii	"unsigned char\000"
 902      676E6564 
 902      20636861 
 902      7200
 903              	.LASF13:
 904 0108 72656738 		.ascii	"reg8\000"
 904      00
 905              	.LASF28:
 906 010d 50574D5F 		.ascii	"PWM_1_ReadPeriod\000"
 906      315F5265 
 906      61645065 
 906      72696F64 
 906      00
 907              	.LASF5:
 908 011e 6C6F6E67 		.ascii	"long unsigned int\000"
 908      20756E73 
 908      69676E65 
 908      6420696E 
 908      7400
 909              	.LASF12:
 910 0130 75696E74 		.ascii	"uint8\000"
 910      3800
 911              	.LASF21:
 912 0136 636F756E 		.ascii	"counter\000"
 912      74657200 
 913              	.LASF27:
 914 013e 50574D5F 		.ascii	"PWM_1_ReadCompare\000"
 914      315F5265 
 914      6164436F 
 914      6D706172 
 914      6500
 915              	.LASF10:
 916 0150 646F7562 		.ascii	"double\000"
 916      6C6500
 917              	.LASF32:
 918 0157 50574D5F 		.ascii	"PWM_1_initVar\000"
 918      315F696E 
 918      69745661 
 918      7200
 919              	.LASF2:
 920 0165 73686F72 		.ascii	"short int\000"
 920      7420696E 
 920      7400
 921              	.LASF26:
 922 016f 50574D5F 		.ascii	"PWM_1_ReadCapture\000"
 922      315F5265 
 922      61644361 
 922      70747572 
 922      6500
 923              	.LASF16:
 924 0181 50574D5F 		.ascii	"PWM_1_Init\000"
 924      315F496E 
 924      697400
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 34


 925              	.LASF8:
 926 018c 756E7369 		.ascii	"unsigned int\000"
 926      676E6564 
 926      20696E74 
 926      00
 927              	.LASF7:
 928 0199 6C6F6E67 		.ascii	"long long unsigned int\000"
 928      206C6F6E 
 928      6720756E 
 928      7369676E 
 928      65642069 
 929              	.LASF14:
 930 01b0 73697A65 		.ascii	"sizetype\000"
 930      74797065 
 930      00
 931              	.LASF23:
 932 01b9 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 932      315F5772 
 932      69746543 
 932      6F6D7061 
 932      726500
 933              	.LASF6:
 934 01cc 6C6F6E67 		.ascii	"long long int\000"
 934      206C6F6E 
 934      6720696E 
 934      7400
 935              	.LASF11:
 936 01da 63686172 		.ascii	"char\000"
 936      00
 937              	.LASF20:
 938 01df 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 938      315F5772 
 938      69746550 
 938      6572696F 
 938      6400
 939              	.LASF30:
 940 01f1 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM_1.c\000"
 940      6E657261 
 940      7465645F 
 940      536F7572 
 940      63655C50 
 941              	.LASF25:
 942 0212 50574D5F 		.ascii	"PWM_1_ReadCounter\000"
 942      315F5265 
 942      6164436F 
 942      756E7465 
 942      7200
 943              	.LASF18:
 944 0224 50574D5F 		.ascii	"PWM_1_Stop\000"
 944      315F5374 
 944      6F7000
 945              	.LASF4:
 946 022f 6C6F6E67 		.ascii	"long int\000"
 946      20696E74 
 946      00
 947              	.LASF0:
 948 0238 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC222AR.s 			page 35


 948      65642063 
 948      68617200 
 949              	.LASF24:
 950 0244 636F6D70 		.ascii	"compare\000"
 950      61726500 
 951              	.LASF15:
 952 024c 50574D5F 		.ascii	"PWM_1_Start\000"
 952      315F5374 
 952      61727400 
 953              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
