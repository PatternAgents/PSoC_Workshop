ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_1_initVar
  18              		.bss
  19              		.type	ADC_1_initVar, %object
  20              		.size	ADC_1_initVar, 1
  21              	ADC_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_1_offset,6,4
  24              		.comm	ADC_1_countsPer10Volt,12,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_1_channelsConfig, %object
  28              		.size	ADC_1_channelsConfig, 12
  29              	ADC_1_channelsConfig:
  30 0000 02040000 		.word	1026
  31 0004 02040000 		.word	1026
  32 0008 00040000 		.word	1024
  33              		.section	.text.ADC_1_Start,"ax",%progbits
  34              		.align	2
  35              		.global	ADC_1_Start
  36              		.code	16
  37              		.thumb_func
  38              		.type	ADC_1_Start, %function
  39              	ADC_1_Start:
  40              	.LFB0:
  41              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_1.c"
   1:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_1.c **** * File Name: ADC_1.c
   3:.\Generated_Source\PSoC4/ADC_1.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 2


  17:.\Generated_Source\PSoC4/ADC_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_1.c **** #include "ADC_1.h"
  19:.\Generated_Source\PSoC4/ADC_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_1.c **** uint8 ADC_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_1.c **** volatile int16 ADC_1_offset[ADC_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_1.c **** volatile int32 ADC_1_countsPer10Volt[ADC_1_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_1.c **** static const uint32 CYCODE ADC_1_channelsConfig[] = { 0x00000402u, 0x00000402u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Start
  38:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_1.c **** *  to zero before call of ADC_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Init() and ADC_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_1.c **** {
  42              		.loc 1 64 0
  43              		.cfi_startproc
  44 0000 80B5     		push	{r7, lr}
  45              		.cfi_def_cfa_offset 8
  46              		.cfi_offset 7, -8
  47              		.cfi_offset 14, -4
  48 0002 00AF     		add	r7, sp, #0
  49              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_1.c ****     /* If not Initialized then initialize all required hardware and software */
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 3


  66:.\Generated_Source\PSoC4/ADC_1.c ****     if(ADC_1_initVar == 0u)
  50              		.loc 1 66 0
  51 0004 064B     		ldr	r3, .L3
  52 0006 1B78     		ldrb	r3, [r3]
  53 0008 002B     		cmp	r3, #0
  54 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_Init();
  55              		.loc 1 68 0
  56 000c FFF7FEFF 		bl	ADC_1_Init
  69:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_initVar = 1u;
  57              		.loc 1 69 0
  58 0010 034B     		ldr	r3, .L3
  59 0012 0122     		mov	r2, #1
  60 0014 1A70     		strb	r2, [r3]
  61              	.L2:
  70:.\Generated_Source\PSoC4/ADC_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_Enable();
  62              		.loc 1 71 0
  63 0016 FFF7FEFF 		bl	ADC_1_Enable
  72:.\Generated_Source\PSoC4/ADC_1.c **** }
  64              		.loc 1 72 0
  65 001a BD46     		mov	sp, r7
  66              		@ sp needed
  67 001c 80BD     		pop	{r7, pc}
  68              	.L4:
  69 001e C046     		.align	2
  70              	.L3:
  71 0020 00000000 		.word	ADC_1_initVar
  72              		.cfi_endproc
  73              	.LFE0:
  74              		.size	ADC_1_Start, .-ADC_1_Start
  75              		.section	.text.ADC_1_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_1_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_1_Init, %function
  81              	ADC_1_Init:
  82              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Init
  77:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Start().
  83:.\Generated_Source\PSoC4/ADC_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_1.c **** *
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 4


  90:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC_1.c **** *  The ADC_1_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_1.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 90B5     		push	{r4, r7, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_1.c ****         static const uint8 CYCODE ADC_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)(ADC_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_1.c ****             (uint8)ADC_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_1.c ****             ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_1.c ****              (uint8)ADC_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 9u)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 5


 136:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC_1.c ****                 ,(uint8)(ADC_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC_1.c ****                  (uint8)ADC_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC_1.c ****         };
 168:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC_1.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC_1.c ****         CyIntSetPriority(ADC_1_INTC_NUMBER, ADC_1_INTC_PRIOR_NUMBER);
  94              		.loc 1 172 0
  95 0006 0E20     		mov	r0, #14
  96 0008 0321     		mov	r1, #3
  97 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC_1.c ****         (void)CyIntSetVector(ADC_1_INTC_NUMBER, &ADC_1_ISR);
  98              		.loc 1 173 0
  99 000e 744B     		ldr	r3, .L20
 100 0010 0E20     		mov	r0, #14
 101 0012 191C     		mov	r1, r3
 102 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC_1.c ****     #endif   /* End ADC_1_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC_1.c **** 
 176:.\Generated_Source\PSoC4/ADC_1.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = ADC_1_DEFAULT_EN_CHANNELS;
 103              		.loc 1 177 0
 104 0018 724B     		ldr	r3, .L20+4
 105 001a 0322     		mov	r2, #3
 106 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 107              		.loc 1 178 0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 6


 108 001e 724B     		ldr	r3, .L20+8
 109 0020 714A     		ldr	r2, .L20+8
 110 0022 1168     		ldr	r1, [r2]
 179:.\Generated_Source\PSoC4/ADC_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC_1.c ****         (((ADC_1_PUMP_CTRL_REG & ADC_1_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 180 0
 112 0024 714A     		ldr	r2, .L20+12
 113 0026 1268     		ldr	r2, [r2]
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 178 0
 115 0028 002A     		cmp	r2, #0
 116 002a 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 178 0 is_stmt 0 discriminator 1
 118 002c 704A     		ldr	r2, .L20+16
 119 002e 00E0     		b	.L7
 120              	.L6:
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 178 0 discriminator 2
 122 0030 704A     		ldr	r2, .L20+20
 123              	.L7:
 178:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG |= ADC_1_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 178 0 discriminator 3
 125 0032 0A43     		orr	r2, r1
 126 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_CTRL_REG = ADC_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 127              		.loc 1 182 0 is_stmt 1 discriminator 3
 128 0036 704B     		ldr	r3, .L20+24
 129 0038 704A     		ldr	r2, .L20+28
 130 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG = ADC_1_DEFAULT_RANGE_THRES_REG_CFG;
 131              		.loc 1 183 0 discriminator 3
 132 003c 704B     		ldr	r3, .L20+32
 133 003e 714A     		ldr	r2, .L20+36
 134 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_COND_REG  = ADC_1_COMPARE_MODE;
 135              		.loc 1 184 0 discriminator 3
 136 0042 714B     		ldr	r3, .L20+40
 137 0044 8022     		mov	r2, #128
 138 0046 D205     		lsl	r2, r2, #23
 139 0048 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME01_REG = ADC_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 140              		.loc 1 185 0 discriminator 3
 141 004a 704B     		ldr	r3, .L20+44
 142 004c 704A     		ldr	r2, .L20+48
 143 004e 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SAMPLE_TIME23_REG = ADC_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 144              		.loc 1 186 0 discriminator 3
 145 0050 704B     		ldr	r3, .L20+52
 146 0052 6F4A     		ldr	r2, .L20+48
 147 0054 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_1.c ****     
 188:.\Generated_Source\PSoC4/ADC_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_MUX_SWITCH0_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 148              		.loc 1 190 0 discriminator 3
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 7


 149 0056 704B     		ldr	r3, .L20+56
 150 0058 6F4A     		ldr	r2, .L20+56
 151 005a 1268     		ldr	r2, [r2]
 152 005c 8021     		mov	r1, #128
 153 005e 4902     		lsl	r1, r1, #9
 154 0060 0A43     		orr	r2, r1
 155 0062 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_MUX_SWITCH_HW_CTRL_REG |= ADC_1_DEFAULT_MUX_SWITCH0;
 156              		.loc 1 193 0 discriminator 3
 157 0064 6D4B     		ldr	r3, .L20+60
 158 0066 6D4A     		ldr	r2, .L20+60
 159 0068 1268     		ldr	r2, [r2]
 160 006a 8021     		mov	r1, #128
 161 006c 4902     		lsl	r1, r1, #9
 162 006e 0A43     		orr	r2, r1
 163 0070 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /*ADC_1_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 164              		.loc 1 197 0 discriminator 3
 165 0072 6B4B     		ldr	r3, .L20+64
 166 0074 0022     		mov	r2, #0
 167 0076 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = 0u;
 168              		.loc 1 198 0 discriminator 3
 169 0078 6A4B     		ldr	r3, .L20+68
 170 007a 0022     		mov	r2, #0
 171 007c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_INTR_MASK_REG = ADC_1_SAR_INTR_MASK;
 172              		.loc 1 199 0 discriminator 3
 173 007e 6A4B     		ldr	r3, .L20+72
 174 0080 1122     		mov	r2, #17
 175 0082 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_1.c **** 
 201:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_ANA_TRIM_REG = ADC_1_TRIM_COEF;
 176              		.loc 1 202 0 discriminator 3
 177 0084 694B     		ldr	r3, .L20+76
 178 0086 0222     		mov	r2, #2
 179 0088 1A60     		str	r2, [r3]
 203:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC_1.c **** 
 205:.\Generated_Source\PSoC4/ADC_1.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal = ADC_1_SAR_DFT_CTRL_REG;
 180              		.loc 1 206 0 discriminator 3
 181 008a 694B     		ldr	r3, .L20+80
 182 008c 1B68     		ldr	r3, [r3]
 183 008e 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC_1.c ****     tmpRegVal &= (uint32)~ADC_1_DCEN;
 184              		.loc 1 207 0 discriminator 3
 185 0090 7A68     		ldr	r2, [r7, #4]
 186 0092 684B     		ldr	r3, .L20+84
 187 0094 1340     		and	r3, r2
 188 0096 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 8


 208:.\Generated_Source\PSoC4/ADC_1.c ****     
 209:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_NOMINAL_CLOCK_FREQ > (ADC_1_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC_1.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 189              		.loc 1 213 0 discriminator 3
 190 0098 7B68     		ldr	r3, [r7, #4]
 191 009a 0122     		mov	r2, #1
 192 009c 1343     		orr	r3, r2
 193 009e 7B60     		str	r3, [r7, #4]
 214:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC_1.c ****     #else
 216:.\Generated_Source\PSoC4/ADC_1.c ****         #if ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC_1.c ****              (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 220:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_DCEN;
 221:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)~ADC_1_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ((ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC_1.c ****                    (ADC_1_DEFAULT_VREF_SEL == ADC_1__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* (ADC_1_CY_SAR_IP_VER == ADC_1_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC_1.c ****     
 226:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_DFT_CTRL_REG = tmpRegVal;
 194              		.loc 1 226 0 discriminator 3
 195 00a0 634B     		ldr	r3, .L20+80
 196 00a2 7A68     		ldr	r2, [r7, #4]
 197 00a4 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC_1.c **** 
 228:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_WOUNDING_REG = ADC_1_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC_1.c **** 
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 198              		.loc 1 232 0 discriminator 3
 199 00a6 0023     		mov	r3, #0
 200 00a8 FB60     		str	r3, [r7, #12]
 201 00aa 92E0     		b	.L8
 202              	.L19:
 233:.\Generated_Source\PSoC4/ADC_1.c ****     {
 234:.\Generated_Source\PSoC4/ADC_1.c ****         tmpRegVal = (ADC_1_channelsConfig[chNum] & ADC_1_CHANNEL_CONFIG_MASK);
 203              		.loc 1 234 0
 204 00ac 624B     		ldr	r3, .L20+88
 205 00ae FA68     		ldr	r2, [r7, #12]
 206 00b0 9200     		lsl	r2, r2, #2
 207 00b2 D258     		ldr	r2, [r2, r3]
 208 00b4 DC23     		mov	r3, #220
 209 00b6 9B01     		lsl	r3, r3, #6
 210 00b8 1340     		and	r3, r2
 211 00ba 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal |= ADC_1_InputsPlacement[chNum];
 212              		.loc 1 236 0
 213 00bc 5F4A     		ldr	r2, .L20+92
 214 00be FB68     		ldr	r3, [r7, #12]
 215 00c0 D318     		add	r3, r2, r3
 216 00c2 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 9


 217 00c4 7A68     		ldr	r2, [r7, #4]
 218 00c6 1343     		orr	r3, r2
 219 00c8 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* End ADC_1_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC_1.c ****         
 239:.\Generated_Source\PSoC4/ADC_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC_1.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC_1.c ****         */
 244:.\Generated_Source\PSoC4/ADC_1.c ****         #if((ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC_1.c ****             (ADC_1_ALT_WOUNDING == ADC_1_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC_1.c ****             tmpRegVal &= (uint32)(~ADC_1_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_MAX_RESOLUTION != ADC_1_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC_1.c **** 
 249:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC_1.c ****         if(chNum < ADC_1_SEQUENCED_CHANNELS_NUM)
 220              		.loc 1 250 0
 221 00ca FB68     		ldr	r3, [r7, #12]
 222 00cc 012B     		cmp	r3, #1
 223 00ce 2AD8     		bhi	.L9
 251:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_1.c ****             CY_SET_REG32((reg32 *)(ADC_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 224              		.loc 1 253 0
 225 00d0 FB68     		ldr	r3, [r7, #12]
 226 00d2 9B00     		lsl	r3, r3, #2
 227 00d4 5A4A     		ldr	r2, .L20+96
 228 00d6 9B18     		add	r3, r3, r2
 229 00d8 7A68     		ldr	r2, [r7, #4]
 230 00da 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC_1.c **** 
 255:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 231              		.loc 1 255 0
 232 00dc 564B     		ldr	r3, .L20+88
 233 00de FA68     		ldr	r2, [r7, #12]
 234 00e0 9200     		lsl	r2, r2, #2
 235 00e2 D258     		ldr	r2, [r2, r3]
 236 00e4 0123     		mov	r3, #1
 237 00e6 1340     		and	r3, r2
 238 00e8 0AD0     		beq	.L10
 256:.\Generated_Source\PSoC4/ADC_1.c ****             {
 257:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 239              		.loc 1 257 0
 240 00ea 4D4B     		ldr	r3, .L20+64
 241 00ec 4C4A     		ldr	r2, .L20+64
 242 00ee 1168     		ldr	r1, [r2]
 243 00f0 FA68     		ldr	r2, [r7, #12]
 244 00f2 0120     		mov	r0, #1
 245 00f4 041C     		mov	r4, r0
 246 00f6 9440     		lsl	r4, r4, r2
 247 00f8 221C     		mov	r2, r4
 248 00fa 92B2     		uxth	r2, r2
 249 00fc 0A43     		orr	r2, r1
 250 00fe 1A60     		str	r2, [r3]
 251              	.L10:
 258:.\Generated_Source\PSoC4/ADC_1.c ****             }
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 10


 259:.\Generated_Source\PSoC4/ADC_1.c **** 
 260:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 252              		.loc 1 260 0
 253 0100 4D4B     		ldr	r3, .L20+88
 254 0102 FA68     		ldr	r2, [r7, #12]
 255 0104 9200     		lsl	r2, r2, #2
 256 0106 D258     		ldr	r2, [r2, r3]
 257 0108 0223     		mov	r3, #2
 258 010a 1340     		and	r3, r2
 259 010c 2BD0     		beq	.L12
 261:.\Generated_Source\PSoC4/ADC_1.c ****             {
 262:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 260              		.loc 1 262 0
 261 010e 454B     		ldr	r3, .L20+68
 262 0110 444A     		ldr	r2, .L20+68
 263 0112 1168     		ldr	r1, [r2]
 264 0114 FA68     		ldr	r2, [r7, #12]
 265 0116 0120     		mov	r0, #1
 266 0118 041C     		mov	r4, r0
 267 011a 9440     		lsl	r4, r4, r2
 268 011c 221C     		mov	r2, r4
 269 011e 92B2     		uxth	r2, r2
 270 0120 0A43     		orr	r2, r1
 271 0122 1A60     		str	r2, [r3]
 272 0124 1FE0     		b	.L12
 273              	.L9:
 263:.\Generated_Source\PSoC4/ADC_1.c ****             }
 264:.\Generated_Source\PSoC4/ADC_1.c ****         }
 265:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC_1.c ****             else
 267:.\Generated_Source\PSoC4/ADC_1.c ****             {
 268:.\Generated_Source\PSoC4/ADC_1.c ****                 CY_SET_REG32(ADC_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_1_INJ_TAILGATING);
 274              		.loc 1 268 0
 275 0126 474B     		ldr	r3, .L20+100
 276 0128 7A68     		ldr	r2, [r7, #4]
 277 012a 8021     		mov	r1, #128
 278 012c C905     		lsl	r1, r1, #23
 279 012e 0A43     		orr	r2, r1
 280 0130 1A60     		str	r2, [r3]
 269:.\Generated_Source\PSoC4/ADC_1.c **** 
 270:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_SATURATE_EN_MASK) != 0u)
 281              		.loc 1 270 0
 282 0132 414B     		ldr	r3, .L20+88
 283 0134 FA68     		ldr	r2, [r7, #12]
 284 0136 9200     		lsl	r2, r2, #2
 285 0138 D258     		ldr	r2, [r2, r3]
 286 013a 0123     		mov	r3, #1
 287 013c 1340     		and	r3, r2
 288 013e 05D0     		beq	.L13
 271:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 272:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_SATURATE_MASK;
 289              		.loc 1 272 0
 290 0140 394B     		ldr	r3, .L20+72
 291 0142 394A     		ldr	r2, .L20+72
 292 0144 1268     		ldr	r2, [r2]
 293 0146 2021     		mov	r1, #32
 294 0148 0A43     		orr	r2, r1
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 11


 295 014a 1A60     		str	r2, [r3]
 296              	.L13:
 273:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 274:.\Generated_Source\PSoC4/ADC_1.c **** 
 275:.\Generated_Source\PSoC4/ADC_1.c ****                 if((ADC_1_channelsConfig[chNum] & ADC_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 297              		.loc 1 275 0
 298 014c 3A4B     		ldr	r3, .L20+88
 299 014e FA68     		ldr	r2, [r7, #12]
 300 0150 9200     		lsl	r2, r2, #2
 301 0152 D258     		ldr	r2, [r2, r3]
 302 0154 0223     		mov	r3, #2
 303 0156 1340     		and	r3, r2
 304 0158 05D0     		beq	.L12
 276:.\Generated_Source\PSoC4/ADC_1.c ****                 {
 277:.\Generated_Source\PSoC4/ADC_1.c ****                     ADC_1_SAR_INTR_MASK_REG |= ADC_1_INJ_RANGE_MASK;
 305              		.loc 1 277 0
 306 015a 334B     		ldr	r3, .L20+72
 307 015c 324A     		ldr	r2, .L20+72
 308 015e 1268     		ldr	r2, [r2]
 309 0160 4021     		mov	r1, #64
 310 0162 0A43     		orr	r2, r1
 311 0164 1A60     		str	r2, [r3]
 312              	.L12:
 278:.\Generated_Source\PSoC4/ADC_1.c ****                 }
 279:.\Generated_Source\PSoC4/ADC_1.c ****             }
 280:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC_1.c **** 
 282:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_ALT_RESOLUTION_ON) != 0u)
 313              		.loc 1 282 0
 314 0166 344B     		ldr	r3, .L20+88
 315 0168 FA68     		ldr	r2, [r7, #12]
 316 016a 9200     		lsl	r2, r2, #2
 317 016c D258     		ldr	r2, [r2, r3]
 318 016e 8023     		mov	r3, #128
 319 0170 9B00     		lsl	r3, r3, #2
 320 0172 1340     		and	r3, r2
 321 0174 03D0     		beq	.L14
 283:.\Generated_Source\PSoC4/ADC_1.c ****         {
 284:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_DEFAULT_MAX_WRK_ALT;
 322              		.loc 1 284 0
 323 0176 8023     		mov	r3, #128
 324 0178 DB00     		lsl	r3, r3, #3
 325 017a BB60     		str	r3, [r7, #8]
 326 017c 02E0     		b	.L15
 327              	.L14:
 285:.\Generated_Source\PSoC4/ADC_1.c ****         }
 286:.\Generated_Source\PSoC4/ADC_1.c ****         else
 287:.\Generated_Source\PSoC4/ADC_1.c ****         {
 288:.\Generated_Source\PSoC4/ADC_1.c ****                counts = (int32)ADC_1_SAR_WRK_MAX_12BIT;
 328              		.loc 1 288 0
 329 017e 8023     		mov	r3, #128
 330 0180 5B01     		lsl	r3, r3, #5
 331 0182 BB60     		str	r3, [r7, #8]
 332              	.L15:
 289:.\Generated_Source\PSoC4/ADC_1.c ****         }
 290:.\Generated_Source\PSoC4/ADC_1.c **** 
 291:.\Generated_Source\PSoC4/ADC_1.c ****         if((ADC_1_channelsConfig[chNum] & ADC_1_DIFFERENTIAL_EN) == 0u)
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 12


 333              		.loc 1 291 0
 334 0184 2C4B     		ldr	r3, .L20+88
 335 0186 FA68     		ldr	r2, [r7, #12]
 336 0188 9200     		lsl	r2, r2, #2
 337 018a D258     		ldr	r2, [r2, r3]
 338 018c 8023     		mov	r3, #128
 339 018e 5B00     		lsl	r3, r3, #1
 340 0190 1340     		and	r3, r2
 341 0192 05D1     		bne	.L16
 292:.\Generated_Source\PSoC4/ADC_1.c ****         {
 293:.\Generated_Source\PSoC4/ADC_1.c ****             #if((ADC_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC_1.c ****                 (ADC_1_DEFAULT_NEG_INPUT_SEL == ADC_1__VREF))
 295:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 298:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 342              		.loc 1 298 0
 343 0194 2C4B     		ldr	r3, .L20+104
 344 0196 FA68     		ldr	r2, [r7, #12]
 345 0198 5200     		lsl	r2, r2, #1
 346 019a 0021     		mov	r1, #0
 347 019c D152     		strh	r1, [r2, r3]
 348 019e 04E0     		b	.L17
 349              	.L16:
 299:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_1__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC_1.c ****         }
 301:.\Generated_Source\PSoC4/ADC_1.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC_1.c ****         {
 303:.\Generated_Source\PSoC4/ADC_1.c ****             #if(ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC_1.c ****             #else
 307:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_offset[chNum] = 0;
 350              		.loc 1 307 0
 351 01a0 294B     		ldr	r3, .L20+104
 352 01a2 FA68     		ldr	r2, [r7, #12]
 353 01a4 5200     		lsl	r2, r2, #1
 354 01a6 0021     		mov	r1, #0
 355 01a8 D152     		strh	r1, [r2, r3]
 356              	.L17:
 308:.\Generated_Source\PSoC4/ADC_1.c ****             #endif /* end ADC_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_1__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC_1.c ****         }
 310:.\Generated_Source\PSoC4/ADC_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 357              		.loc 1 311 0
 358 01aa BB68     		ldr	r3, [r7, #8]
 359 01ac 274A     		ldr	r2, .L20+108
 360 01ae 5343     		mul	r3, r2
 361 01b0 8022     		mov	r2, #128
 362 01b2 D200     		lsl	r2, r2, #3
 363 01b4 9B18     		add	r3, r3, r2
 312:.\Generated_Source\PSoC4/ADC_1.c ****                             ADC_1_DEFAULT_VREF_MV_VALUE) / (ADC_1_DEFAULT_VREF_MV_VALUE * 2));
 364              		.loc 1 312 0
 365 01b6 002B     		cmp	r3, #0
 366 01b8 01DA     		bge	.L18
 367 01ba 254C     		ldr	r4, .L20+112
 368 01bc 1B19     		add	r3, r3, r4
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 13


 369              	.L18:
 370 01be DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_1_10MV_COUNTS) +
 371              		.loc 1 311 0
 372 01c0 9BB2     		uxth	r3, r3
 373 01c2 19B2     		sxth	r1, r3
 374 01c4 234B     		ldr	r3, .L20+116
 375 01c6 FA68     		ldr	r2, [r7, #12]
 376 01c8 9200     		lsl	r2, r2, #2
 377 01ca D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 378              		.loc 1 232 0
 379 01cc FB68     		ldr	r3, [r7, #12]
 380 01ce 0133     		add	r3, r3, #1
 381 01d0 FB60     		str	r3, [r7, #12]
 382              	.L8:
 232:.\Generated_Source\PSoC4/ADC_1.c ****     for(chNum = 0u; chNum < ADC_1_TOTAL_CHANNELS_NUM; chNum++)
 383              		.loc 1 232 0 is_stmt 0 discriminator 1
 384 01d2 FB68     		ldr	r3, [r7, #12]
 385 01d4 022B     		cmp	r3, #2
 386 01d6 00D8     		bhi	.LCB314
 387 01d8 68E7     		b	.L19	@long jump
 388              	.LCB314:
 313:.\Generated_Source\PSoC4/ADC_1.c ****     }
 314:.\Generated_Source\PSoC4/ADC_1.c **** }
 389              		.loc 1 314 0 is_stmt 1
 390 01da BD46     		mov	sp, r7
 391 01dc 05B0     		add	sp, sp, #20
 392              		@ sp needed
 393 01de 90BD     		pop	{r4, r7, pc}
 394              	.L21:
 395              		.align	2
 396              	.L20:
 397 01e0 00000000 		.word	ADC_1_ISR
 398 01e4 20001A40 		.word	1075445792
 399 01e8 00001A40 		.word	1075445760
 400 01ec 80031A40 		.word	1075446656
 401 01f0 40201013 		.word	319823936
 402 01f4 40200013 		.word	318775360
 403 01f8 04001A40 		.word	1075445764
 404 01fc CD000080 		.word	-2147483443
 405 0200 18001A40 		.word	1075445784
 406 0204 0000FF0F 		.word	268369920
 407 0208 1C001A40 		.word	1075445788
 408 020c 10001A40 		.word	1075445776
 409 0210 04000400 		.word	262148
 410 0214 14001A40 		.word	1075445780
 411 0218 00031A40 		.word	1075446528
 412 021c 40031A40 		.word	1075446592
 413 0220 28021A40 		.word	1075446312
 414 0224 38021A40 		.word	1075446328
 415 0228 18021A40 		.word	1075446296
 416 022c 000F1A40 		.word	1075449600
 417 0230 30001A40 		.word	1075445808
 418 0234 FFFFFFDF 		.word	-536870913
 419 0238 00000000 		.word	ADC_1_channelsConfig
 420 023c 0C000000 		.word	ADC_1_InputsPlacement.4745
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 14


 421 0240 80001A40 		.word	1075445888
 422 0244 80021A40 		.word	1075446400
 423 0248 00000000 		.word	ADC_1_offset
 424 024c 10270000 		.word	10000
 425 0250 FF070000 		.word	2047
 426 0254 00000000 		.word	ADC_1_countsPer10Volt
 427              		.cfi_endproc
 428              	.LFE1:
 429              		.size	ADC_1_Init, .-ADC_1_Init
 430              		.section	.text.ADC_1_Enable,"ax",%progbits
 431              		.align	2
 432              		.global	ADC_1_Enable
 433              		.code	16
 434              		.thumb_func
 435              		.type	ADC_1_Enable, %function
 436              	ADC_1_Enable:
 437              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC_1.c **** 
 316:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC_1.c **** *
 320:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Enable(void)
 331:.\Generated_Source\PSoC4/ADC_1.c **** {
 438              		.loc 1 331 0
 439              		.cfi_startproc
 440 0000 80B5     		push	{r7, lr}
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 7, -8
 443              		.cfi_offset 14, -4
 444 0002 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_1.c ****     if (0u == (ADC_1_SAR_CTRL_REG & ADC_1_ENABLE))
 446              		.loc 1 332 0
 447 0004 074B     		ldr	r3, .L24
 448 0006 1B68     		ldr	r3, [r3]
 449 0008 002B     		cmp	r3, #0
 450 000a 09DB     		blt	.L22
 333:.\Generated_Source\PSoC4/ADC_1.c ****     {
 334:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_1.c ****             while (0u != (ADC_1_SAR_STATUS_REG & ADC_1_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC_1.c ****             {
 338:.\Generated_Source\PSoC4/ADC_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC_1.c ****             }
 340:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* (ADC_1_CY_SAR_IP_VER != ADC_1_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC_1.c ****         
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 15


 342:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_CTRL_REG |= ADC_1_ENABLE;
 451              		.loc 1 342 0
 452 000c 054B     		ldr	r3, .L24
 453 000e 054A     		ldr	r2, .L24
 454 0010 1268     		ldr	r2, [r2]
 455 0012 8021     		mov	r1, #128
 456 0014 0906     		lsl	r1, r1, #24
 457 0016 0A43     		orr	r2, r1
 458 0018 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC_1.c ****         
 344:.\Generated_Source\PSoC4/ADC_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC_1.c ****         CyDelayUs(ADC_1_10US_DELAY);         
 459              		.loc 1 345 0
 460 001a 0A20     		mov	r0, #10
 461 001c FFF7FEFF 		bl	CyDelayUs
 462              	.L22:
 346:.\Generated_Source\PSoC4/ADC_1.c ****     }
 347:.\Generated_Source\PSoC4/ADC_1.c **** }
 463              		.loc 1 347 0
 464 0020 BD46     		mov	sp, r7
 465              		@ sp needed
 466 0022 80BD     		pop	{r7, pc}
 467              	.L25:
 468              		.align	2
 469              	.L24:
 470 0024 00001A40 		.word	1075445760
 471              		.cfi_endproc
 472              	.LFE2:
 473              		.size	ADC_1_Enable, .-ADC_1_Enable
 474              		.section	.text.ADC_1_Stop,"ax",%progbits
 475              		.align	2
 476              		.global	ADC_1_Stop
 477              		.code	16
 478              		.thumb_func
 479              		.type	ADC_1_Stop, %function
 480              	ADC_1_Stop:
 481              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC_1.c **** 
 349:.\Generated_Source\PSoC4/ADC_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_Stop
 352:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC_1.c **** *
 354:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC_1.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC_1.c **** *
 358:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC_1.c **** *
 361:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC_1.c **** *
 364:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_Stop(void)
 366:.\Generated_Source\PSoC4/ADC_1.c **** {
 482              		.loc 1 366 0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 16


 483              		.cfi_startproc
 484 0000 80B5     		push	{r7, lr}
 485              		.cfi_def_cfa_offset 8
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488 0002 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CTRL_REG &= (uint32)~ADC_1_ENABLE;
 490              		.loc 1 367 0
 491 0004 034B     		ldr	r3, .L27
 492 0006 034A     		ldr	r2, .L27
 493 0008 1268     		ldr	r2, [r2]
 494 000a 5200     		lsl	r2, r2, #1
 495 000c 5208     		lsr	r2, r2, #1
 496 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC_1.c **** }
 497              		.loc 1 368 0
 498 0010 BD46     		mov	sp, r7
 499              		@ sp needed
 500 0012 80BD     		pop	{r7, pc}
 501              	.L28:
 502              		.align	2
 503              	.L27:
 504 0014 00001A40 		.word	1075445760
 505              		.cfi_endproc
 506              	.LFE3:
 507              		.size	ADC_1_Stop, .-ADC_1_Stop
 508              		.section	.text.ADC_1_StartConvert,"ax",%progbits
 509              		.align	2
 510              		.global	ADC_1_StartConvert
 511              		.code	16
 512              		.thumb_func
 513              		.type	ADC_1_StartConvert, %function
 514              	ADC_1_StartConvert:
 515              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC_1.c **** 
 370:.\Generated_Source\PSoC4/ADC_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StartConvert
 373:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC_1.c **** *
 375:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC_1.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC_1.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC_1.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC_1.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC_1.c **** *
 384:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC_1.c **** *
 387:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC_1.c **** *
 390:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 17


 391:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC_1.c **** {
 516              		.loc 1 392 0
 517              		.cfi_startproc
 518 0000 80B5     		push	{r7, lr}
 519              		.cfi_def_cfa_offset 8
 520              		.cfi_offset 7, -8
 521              		.cfi_offset 14, -4
 522 0002 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG |= ADC_1_CONTINUOUS_EN;
 524              		.loc 1 394 0
 525 0004 044B     		ldr	r3, .L30
 526 0006 044A     		ldr	r2, .L30
 527 0008 1268     		ldr	r2, [r2]
 528 000a 8021     		mov	r1, #128
 529 000c 4902     		lsl	r1, r1, #9
 530 000e 0A43     		orr	r2, r1
 531 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC_1.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_START_CTRL_REG = ADC_1_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* End ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC_1.c **** 
 399:.\Generated_Source\PSoC4/ADC_1.c **** }
 532              		.loc 1 399 0
 533 0012 BD46     		mov	sp, r7
 534              		@ sp needed
 535 0014 80BD     		pop	{r7, pc}
 536              	.L31:
 537 0016 C046     		.align	2
 538              	.L30:
 539 0018 04001A40 		.word	1075445764
 540              		.cfi_endproc
 541              	.LFE4:
 542              		.size	ADC_1_StartConvert, .-ADC_1_StartConvert
 543              		.section	.text.ADC_1_StopConvert,"ax",%progbits
 544              		.align	2
 545              		.global	ADC_1_StopConvert
 546              		.code	16
 547              		.thumb_func
 548              		.type	ADC_1_StopConvert, %function
 549              	ADC_1_StopConvert:
 550              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC_1.c **** 
 401:.\Generated_Source\PSoC4/ADC_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_StopConvert
 404:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC_1.c **** *
 406:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC_1.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC_1.c **** *
 409:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC_1.c **** *
 412:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 18


 413:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC_1.c **** *
 415:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC_1.c **** {
 551              		.loc 1 417 0
 552              		.cfi_startproc
 553 0000 80B5     		push	{r7, lr}
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 7, -8
 556              		.cfi_offset 14, -4
 557 0002 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_DEFAULT_SAMPLE_MODE_SEL == ADC_1__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_1_CONTINUOUS_EN);
 559              		.loc 1 419 0
 560 0004 034B     		ldr	r3, .L33
 561 0006 034A     		ldr	r2, .L33
 562 0008 1168     		ldr	r1, [r2]
 563 000a 034A     		ldr	r2, .L33+4
 564 000c 0A40     		and	r2, r1
 565 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_DEFAULT_SAMPLE_MODE == ADC_1__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC_1.c **** }
 566              		.loc 1 421 0
 567 0010 BD46     		mov	sp, r7
 568              		@ sp needed
 569 0012 80BD     		pop	{r7, pc}
 570              	.L34:
 571              		.align	2
 572              	.L33:
 573 0014 04001A40 		.word	1075445764
 574 0018 FFFFFEFF 		.word	-65537
 575              		.cfi_endproc
 576              	.LFE5:
 577              		.size	ADC_1_StopConvert, .-ADC_1_StopConvert
 578              		.section	.text.ADC_1_IsEndConversion,"ax",%progbits
 579              		.align	2
 580              		.global	ADC_1_IsEndConversion
 581              		.code	16
 582              		.thumb_func
 583              		.type	ADC_1_IsEndConversion, %function
 584              	ADC_1_IsEndConversion:
 585              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC_1.c **** 
 423:.\Generated_Source\PSoC4/ADC_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_1.c **** *
 428:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC_1.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC_1.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC_1.c **** *  the function does not return (blocking) until the conversion has
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 19


 435:.\Generated_Source\PSoC4/ADC_1.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC_1.c **** *
 437:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC_1.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC_1.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC_1.c **** *
 445:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC_1.c **** *
 449:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC_1.c **** uint32 ADC_1_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC_1.c **** {
 586              		.loc 1 451 0
 587              		.cfi_startproc
 588 0000 80B5     		push	{r7, lr}
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 7, -8
 591              		.cfi_offset 14, -4
 592 0002 84B0     		sub	sp, sp, #16
 593              		.cfi_def_cfa_offset 24
 594 0004 00AF     		add	r7, sp, #0
 595              		.cfi_def_cfa_register 7
 596 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 status = 0u;
 597              		.loc 1 452 0
 598 0008 0023     		mov	r3, #0
 599 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_1.c ****     if((retMode & (ADC_1_RETURN_STATUS | ADC_1_WAIT_FOR_RESULT)) != 0u)
 600              		.loc 1 454 0
 601 000c 7A68     		ldr	r2, [r7, #4]
 602 000e 0323     		mov	r3, #3
 603 0010 1340     		and	r3, r2
 604 0012 11D0     		beq	.L36
 605              	.L38:
 455:.\Generated_Source\PSoC4/ADC_1.c ****     {
 456:.\Generated_Source\PSoC4/ADC_1.c ****         do
 457:.\Generated_Source\PSoC4/ADC_1.c ****         {
 458:.\Generated_Source\PSoC4/ADC_1.c ****             status = ADC_1_SAR_INTR_REG & ADC_1_EOS_MASK;
 606              		.loc 1 458 0 discriminator 1
 607 0014 184B     		ldr	r3, .L43
 608 0016 1A68     		ldr	r2, [r3]
 609 0018 0123     		mov	r3, #1
 610 001a 1340     		and	r3, r2
 611 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC_1.c ****         }while((status == 0u) && ((retMode & ADC_1_WAIT_FOR_RESULT) != 0u));
 612              		.loc 1 459 0 discriminator 1
 613 001e FB68     		ldr	r3, [r7, #12]
 614 0020 002B     		cmp	r3, #0
 615 0022 03D1     		bne	.L37
 616 0024 7A68     		ldr	r2, [r7, #4]
 617 0026 0223     		mov	r3, #2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 20


 618 0028 1340     		and	r3, r2
 619 002a F3D1     		bne	.L38
 620              	.L37:
 460:.\Generated_Source\PSoC4/ADC_1.c **** 
 461:.\Generated_Source\PSoC4/ADC_1.c ****         if(status != 0u)
 621              		.loc 1 461 0
 622 002c FB68     		ldr	r3, [r7, #12]
 623 002e 002B     		cmp	r3, #0
 624 0030 02D0     		beq	.L36
 462:.\Generated_Source\PSoC4/ADC_1.c ****         {
 463:.\Generated_Source\PSoC4/ADC_1.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC_1.c ****             ADC_1_SAR_INTR_REG = ADC_1_EOS_MASK;
 625              		.loc 1 464 0
 626 0032 114B     		ldr	r3, .L43
 627 0034 0122     		mov	r2, #1
 628 0036 1A60     		str	r2, [r3]
 629              	.L36:
 465:.\Generated_Source\PSoC4/ADC_1.c ****         }
 466:.\Generated_Source\PSoC4/ADC_1.c ****     }
 467:.\Generated_Source\PSoC4/ADC_1.c **** 
 468:.\Generated_Source\PSoC4/ADC_1.c ****     #if(ADC_1_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC_1.c ****         if((retMode & (ADC_1_RETURN_STATUS_INJ | ADC_1_WAIT_FOR_RESULT_INJ)) != 0u)
 630              		.loc 1 469 0
 631 0038 7A68     		ldr	r2, [r7, #4]
 632 003a 0C23     		mov	r3, #12
 633 003c 1340     		and	r3, r2
 634 003e 15D0     		beq	.L39
 635              	.L41:
 470:.\Generated_Source\PSoC4/ADC_1.c ****         {
 471:.\Generated_Source\PSoC4/ADC_1.c ****             do
 472:.\Generated_Source\PSoC4/ADC_1.c ****             {
 473:.\Generated_Source\PSoC4/ADC_1.c ****                 status |= ADC_1_SAR_INTR_REG & ADC_1_INJ_EOC_MASK;
 636              		.loc 1 473 0
 637 0040 0D4B     		ldr	r3, .L43
 638 0042 1A68     		ldr	r2, [r3]
 639 0044 1023     		mov	r3, #16
 640 0046 1340     		and	r3, r2
 641 0048 FA68     		ldr	r2, [r7, #12]
 642 004a 1343     		orr	r3, r2
 643 004c FB60     		str	r3, [r7, #12]
 474:.\Generated_Source\PSoC4/ADC_1.c ****             }while(((status & ADC_1_INJ_EOC_MASK) == 0u) &&
 644              		.loc 1 474 0
 645 004e FA68     		ldr	r2, [r7, #12]
 646 0050 1023     		mov	r3, #16
 647 0052 1340     		and	r3, r2
 475:.\Generated_Source\PSoC4/ADC_1.c ****                    ((retMode & ADC_1_WAIT_FOR_RESULT_INJ) != 0u));
 648              		.loc 1 475 0
 649 0054 03D1     		bne	.L40
 650              		.loc 1 475 0 is_stmt 0 discriminator 1
 651 0056 7A68     		ldr	r2, [r7, #4]
 652 0058 0823     		mov	r3, #8
 653 005a 1340     		and	r3, r2
 474:.\Generated_Source\PSoC4/ADC_1.c ****             }while(((status & ADC_1_INJ_EOC_MASK) == 0u) &&
 654              		.loc 1 474 0 is_stmt 1 discriminator 1
 655 005c F0D1     		bne	.L41
 656              	.L40:
 476:.\Generated_Source\PSoC4/ADC_1.c **** 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 21


 477:.\Generated_Source\PSoC4/ADC_1.c ****             if((status & ADC_1_INJ_EOC_MASK) != 0u)
 657              		.loc 1 477 0
 658 005e FA68     		ldr	r2, [r7, #12]
 659 0060 1023     		mov	r3, #16
 660 0062 1340     		and	r3, r2
 661 0064 02D0     		beq	.L39
 478:.\Generated_Source\PSoC4/ADC_1.c ****             {
 479:.\Generated_Source\PSoC4/ADC_1.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_SAR_INTR_REG = ADC_1_INJ_EOC_MASK;
 662              		.loc 1 480 0
 663 0066 044B     		ldr	r3, .L43
 664 0068 1022     		mov	r2, #16
 665 006a 1A60     		str	r2, [r3]
 666              	.L39:
 481:.\Generated_Source\PSoC4/ADC_1.c ****             }
 482:.\Generated_Source\PSoC4/ADC_1.c ****         }
 483:.\Generated_Source\PSoC4/ADC_1.c ****     #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC_1.c **** 
 485:.\Generated_Source\PSoC4/ADC_1.c ****     return (status);
 667              		.loc 1 485 0
 668 006c FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC_1.c **** }
 669              		.loc 1 486 0
 670 006e 181C     		mov	r0, r3
 671 0070 BD46     		mov	sp, r7
 672 0072 04B0     		add	sp, sp, #16
 673              		@ sp needed
 674 0074 80BD     		pop	{r7, pc}
 675              	.L44:
 676 0076 C046     		.align	2
 677              	.L43:
 678 0078 10021A40 		.word	1075446288
 679              		.cfi_endproc
 680              	.LFE6:
 681              		.size	ADC_1_IsEndConversion, .-ADC_1_IsEndConversion
 682              		.section	.text.ADC_1_GetResult16,"ax",%progbits
 683              		.align	2
 684              		.global	ADC_1_GetResult16
 685              		.code	16
 686              		.thumb_func
 687              		.type	ADC_1_GetResult16, %function
 688              	ADC_1_GetResult16:
 689              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC_1.c **** 
 488:.\Generated_Source\PSoC4/ADC_1.c **** 
 489:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_GetResult16
 491:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC_1.c **** *
 493:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC_1.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC_1.c **** *
 496:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC_1.c **** *
 500:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 22


 501:.\Generated_Source\PSoC4/ADC_1.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC_1.c **** *
 503:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC_1.c **** int16 ADC_1_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC_1.c **** {
 690              		.loc 1 505 0
 691              		.cfi_startproc
 692 0000 80B5     		push	{r7, lr}
 693              		.cfi_def_cfa_offset 8
 694              		.cfi_offset 7, -8
 695              		.cfi_offset 14, -4
 696 0002 84B0     		sub	sp, sp, #16
 697              		.cfi_def_cfa_offset 24
 698 0004 00AF     		add	r7, sp, #0
 699              		.cfi_def_cfa_register 7
 700 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC_1.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC_1.c **** 
 508:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 701              		.loc 1 509 0
 702 0008 7B68     		ldr	r3, [r7, #4]
 703 000a 022B     		cmp	r3, #2
 704 000c 02D9     		bls	.L46
 705              		.loc 1 509 0 is_stmt 0 discriminator 1
 706 000e 0020     		mov	r0, #0
 707 0010 FFF7FEFF 		bl	CyHalt
 708              	.L46:
 510:.\Generated_Source\PSoC4/ADC_1.c **** 
 511:.\Generated_Source\PSoC4/ADC_1.c ****     if(chan < ADC_1_SEQUENCED_CHANNELS_NUM)
 709              		.loc 1 511 0 is_stmt 1
 710 0014 7B68     		ldr	r3, [r7, #4]
 711 0016 012B     		cmp	r3, #1
 712 0018 08D8     		bhi	.L47
 512:.\Generated_Source\PSoC4/ADC_1.c ****     {
 513:.\Generated_Source\PSoC4/ADC_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 713              		.loc 1 513 0
 714 001a 7B68     		ldr	r3, [r7, #4]
 715 001c 9B00     		lsl	r3, r3, #2
 716 001e 094A     		ldr	r2, .L50
 717 0020 9B18     		add	r3, r3, r2
 718 0022 1B68     		ldr	r3, [r3]
 719 0024 1B04     		lsl	r3, r3, #16
 720 0026 1B0C     		lsr	r3, r3, #16
 721 0028 FB60     		str	r3, [r7, #12]
 722 002a 04E0     		b	.L48
 723              	.L47:
 514:.\Generated_Source\PSoC4/ADC_1.c ****                 ADC_1_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC_1.c ****     }
 516:.\Generated_Source\PSoC4/ADC_1.c ****     else
 517:.\Generated_Source\PSoC4/ADC_1.c ****     {
 518:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC_1.c ****             result = ADC_1_SAR_INJ_RESULT_REG & ADC_1_RESULT_MASK;
 724              		.loc 1 519 0
 725 002c 064B     		ldr	r3, .L50+4
 726 002e 1B68     		ldr	r3, [r3]
 727 0030 1B04     		lsl	r3, r3, #16
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 23


 728 0032 1B0C     		lsr	r3, r3, #16
 729 0034 FB60     		str	r3, [r7, #12]
 730              	.L48:
 520:.\Generated_Source\PSoC4/ADC_1.c ****         #else
 521:.\Generated_Source\PSoC4/ADC_1.c ****             result = 0u;
 522:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC_1.c ****     }
 524:.\Generated_Source\PSoC4/ADC_1.c **** 
 525:.\Generated_Source\PSoC4/ADC_1.c ****     return ( (int16)result );
 731              		.loc 1 525 0
 732 0036 FB68     		ldr	r3, [r7, #12]
 733 0038 9BB2     		uxth	r3, r3
 734 003a 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC_1.c **** }
 735              		.loc 1 526 0
 736 003c 181C     		mov	r0, r3
 737 003e BD46     		mov	sp, r7
 738 0040 04B0     		add	sp, sp, #16
 739              		@ sp needed
 740 0042 80BD     		pop	{r7, pc}
 741              	.L51:
 742              		.align	2
 743              	.L50:
 744 0044 80011A40 		.word	1075446144
 745 0048 90021A40 		.word	1075446416
 746              		.cfi_endproc
 747              	.LFE7:
 748              		.size	ADC_1_GetResult16, .-ADC_1_GetResult16
 749              		.section	.text.ADC_1_SetChanMask,"ax",%progbits
 750              		.align	2
 751              		.global	ADC_1_SetChanMask
 752              		.code	16
 753              		.thumb_func
 754              		.type	ADC_1_SetChanMask, %function
 755              	ADC_1_SetChanMask:
 756              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC_1.c **** 
 528:.\Generated_Source\PSoC4/ADC_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetChanMask
 531:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC_1.c **** *
 533:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC_1.c **** *
 536:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC_1.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC_1.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC_1.c **** *
 545:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_1.c **** *
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 24


 548:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC_1.c **** {
 757              		.loc 1 550 0
 758              		.cfi_startproc
 759 0000 80B5     		push	{r7, lr}
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 7, -8
 762              		.cfi_offset 14, -4
 763 0002 82B0     		sub	sp, sp, #8
 764              		.cfi_def_cfa_offset 16
 765 0004 00AF     		add	r7, sp, #0
 766              		.cfi_def_cfa_register 7
 767 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_CHAN_EN_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 768              		.loc 1 551 0
 769 0008 034B     		ldr	r3, .L53
 770 000a 7968     		ldr	r1, [r7, #4]
 771 000c 0322     		mov	r2, #3
 772 000e 0A40     		and	r2, r1
 773 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_1.c **** }
 774              		.loc 1 552 0
 775 0012 BD46     		mov	sp, r7
 776 0014 02B0     		add	sp, sp, #8
 777              		@ sp needed
 778 0016 80BD     		pop	{r7, pc}
 779              	.L54:
 780              		.align	2
 781              	.L53:
 782 0018 20001A40 		.word	1075445792
 783              		.cfi_endproc
 784              	.LFE8:
 785              		.size	ADC_1_SetChanMask, .-ADC_1_SetChanMask
 786              		.section	.text.ADC_1_EnableInjection,"ax",%progbits
 787              		.align	2
 788              		.global	ADC_1_EnableInjection
 789              		.code	16
 790              		.thumb_func
 791              		.type	ADC_1_EnableInjection, %function
 792              	ADC_1_EnableInjection:
 793              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC_1.c **** 
 554:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC_1.c **** 
 556:.\Generated_Source\PSoC4/ADC_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_EnableInjection
 559:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC_1.c ****     *
 561:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC_1.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC_1.c ****     *
 564:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC_1.c ****     *
 567:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 25


 568:.\Generated_Source\PSoC4/ADC_1.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC_1.c ****     *
 570:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC_1.c ****     void ADC_1_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC_1.c ****     {
 794              		.loc 1 572 0
 795              		.cfi_startproc
 796 0000 80B5     		push	{r7, lr}
 797              		.cfi_def_cfa_offset 8
 798              		.cfi_offset 7, -8
 799              		.cfi_offset 14, -4
 800 0002 00AF     		add	r7, sp, #0
 801              		.cfi_def_cfa_register 7
 573:.\Generated_Source\PSoC4/ADC_1.c ****         ADC_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_1_INJ_CHAN_EN;
 802              		.loc 1 573 0
 803 0004 044B     		ldr	r3, .L56
 804 0006 044A     		ldr	r2, .L56
 805 0008 1268     		ldr	r2, [r2]
 806 000a 8021     		mov	r1, #128
 807 000c 0906     		lsl	r1, r1, #24
 808 000e 0A43     		orr	r2, r1
 809 0010 1A60     		str	r2, [r3]
 574:.\Generated_Source\PSoC4/ADC_1.c ****     }
 810              		.loc 1 574 0
 811 0012 BD46     		mov	sp, r7
 812              		@ sp needed
 813 0014 80BD     		pop	{r7, pc}
 814              	.L57:
 815 0016 C046     		.align	2
 816              	.L56:
 817 0018 80021A40 		.word	1075446400
 818              		.cfi_endproc
 819              	.LFE9:
 820              		.size	ADC_1_EnableInjection, .-ADC_1_EnableInjection
 821              		.section	.text.ADC_1_SetLowLimit,"ax",%progbits
 822              		.align	2
 823              		.global	ADC_1_SetLowLimit
 824              		.code	16
 825              		.thumb_func
 826              		.type	ADC_1_SetLowLimit, %function
 827              	ADC_1_SetLowLimit:
 828              	.LFB10:
 575:.\Generated_Source\PSoC4/ADC_1.c **** 
 576:.\Generated_Source\PSoC4/ADC_1.c **** #endif /* ADC_1_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC_1.c **** 
 578:.\Generated_Source\PSoC4/ADC_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_1.c **** *
 583:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC_1.c **** *
 586:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_1.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC_1.c **** *
 589:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 26


 590:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC_1.c **** *
 592:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC_1.c **** {
 829              		.loc 1 594 0
 830              		.cfi_startproc
 831 0000 80B5     		push	{r7, lr}
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 7, -8
 834              		.cfi_offset 14, -4
 835 0002 82B0     		sub	sp, sp, #8
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_LOW_MASK);
 840              		.loc 1 595 0
 841 0008 084B     		ldr	r3, .L59
 842 000a 084A     		ldr	r2, .L59
 843 000c 1268     		ldr	r2, [r2]
 844 000e 120C     		lsr	r2, r2, #16
 845 0010 1204     		lsl	r2, r2, #16
 846 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_1_RANGE_LOW_MASK;
 847              		.loc 1 596 0
 848 0014 054B     		ldr	r3, .L59
 849 0016 054A     		ldr	r2, .L59
 850 0018 1168     		ldr	r1, [r2]
 851 001a 7A68     		ldr	r2, [r7, #4]
 852 001c 1204     		lsl	r2, r2, #16
 853 001e 120C     		lsr	r2, r2, #16
 854 0020 0A43     		orr	r2, r1
 855 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_1.c **** }
 856              		.loc 1 597 0
 857 0024 BD46     		mov	sp, r7
 858 0026 02B0     		add	sp, sp, #8
 859              		@ sp needed
 860 0028 80BD     		pop	{r7, pc}
 861              	.L60:
 862 002a C046     		.align	2
 863              	.L59:
 864 002c 18001A40 		.word	1075445784
 865              		.cfi_endproc
 866              	.LFE10:
 867              		.size	ADC_1_SetLowLimit, .-ADC_1_SetLowLimit
 868              		.section	.text.ADC_1_SetHighLimit,"ax",%progbits
 869              		.align	2
 870              		.global	ADC_1_SetHighLimit
 871              		.code	16
 872              		.thumb_func
 873              		.type	ADC_1_SetHighLimit, %function
 874              	ADC_1_SetHighLimit:
 875              	.LFB11:
 598:.\Generated_Source\PSoC4/ADC_1.c **** 
 599:.\Generated_Source\PSoC4/ADC_1.c **** 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 27


 600:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC_1.c **** *
 604:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC_1.c **** *
 607:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC_1.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC_1.c **** *
 610:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC_1.c **** {
 876              		.loc 1 615 0
 877              		.cfi_startproc
 878 0000 80B5     		push	{r7, lr}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 14, -4
 882 0002 82B0     		sub	sp, sp, #8
 883              		.cfi_def_cfa_offset 16
 884 0004 00AF     		add	r7, sp, #0
 885              		.cfi_def_cfa_register 7
 886 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_1_RANGE_HIGH_MASK);
 887              		.loc 1 616 0
 888 0008 074B     		ldr	r3, .L62
 889 000a 074A     		ldr	r2, .L62
 890 000c 1268     		ldr	r2, [r2]
 891 000e 1204     		lsl	r2, r2, #16
 892 0010 120C     		lsr	r2, r2, #16
 893 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_1_RANGE_HIGH_OFFSET);
 894              		.loc 1 617 0
 895 0014 044B     		ldr	r3, .L62
 896 0016 044A     		ldr	r2, .L62
 897 0018 1168     		ldr	r1, [r2]
 898 001a 7A68     		ldr	r2, [r7, #4]
 899 001c 1204     		lsl	r2, r2, #16
 900 001e 0A43     		orr	r2, r1
 901 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_1.c **** }
 902              		.loc 1 618 0
 903 0022 BD46     		mov	sp, r7
 904 0024 02B0     		add	sp, sp, #8
 905              		@ sp needed
 906 0026 80BD     		pop	{r7, pc}
 907              	.L63:
 908              		.align	2
 909              	.L62:
 910 0028 18001A40 		.word	1075445784
 911              		.cfi_endproc
 912              	.LFE11:
 913              		.size	ADC_1_SetHighLimit, .-ADC_1_SetHighLimit
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 28


 914              		.section	.text.ADC_1_SetLimitMask,"ax",%progbits
 915              		.align	2
 916              		.global	ADC_1_SetLimitMask
 917              		.code	16
 918              		.thumb_func
 919              		.type	ADC_1_SetLimitMask, %function
 920              	ADC_1_SetLimitMask:
 921              	.LFB12:
 619:.\Generated_Source\PSoC4/ADC_1.c **** 
 620:.\Generated_Source\PSoC4/ADC_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC_1.c **** *
 628:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC_1.c **** *
 634:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC_1.c **** *
 637:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC_1.c **** {
 922              		.loc 1 639 0
 923              		.cfi_startproc
 924 0000 80B5     		push	{r7, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 82B0     		sub	sp, sp, #8
 929              		.cfi_def_cfa_offset 16
 930 0004 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 933              		.loc 1 640 0
 934 0008 034B     		ldr	r3, .L65
 935 000a 7968     		ldr	r1, [r7, #4]
 936 000c 0322     		mov	r2, #3
 937 000e 0A40     		and	r2, r1
 938 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC_1.c **** }
 939              		.loc 1 641 0
 940 0012 BD46     		mov	sp, r7
 941 0014 02B0     		add	sp, sp, #8
 942              		@ sp needed
 943 0016 80BD     		pop	{r7, pc}
 944              	.L66:
 945              		.align	2
 946              	.L65:
 947 0018 38021A40 		.word	1075446328
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 29


 948              		.cfi_endproc
 949              	.LFE12:
 950              		.size	ADC_1_SetLimitMask, .-ADC_1_SetLimitMask
 951              		.section	.text.ADC_1_SetSatMask,"ax",%progbits
 952              		.align	2
 953              		.global	ADC_1_SetSatMask
 954              		.code	16
 955              		.thumb_func
 956              		.type	ADC_1_SetSatMask, %function
 957              	ADC_1_SetSatMask:
 958              	.LFB13:
 642:.\Generated_Source\PSoC4/ADC_1.c **** 
 643:.\Generated_Source\PSoC4/ADC_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetSatMask
 646:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC_1.c **** *
 648:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC_1.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC_1.c **** *
 651:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC_1.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC_1.c **** *
 657:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC_1.c **** *
 660:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC_1.c **** {
 959              		.loc 1 662 0
 960              		.cfi_startproc
 961 0000 80B5     		push	{r7, lr}
 962              		.cfi_def_cfa_offset 8
 963              		.cfi_offset 7, -8
 964              		.cfi_offset 14, -4
 965 0002 82B0     		sub	sp, sp, #8
 966              		.cfi_def_cfa_offset 16
 967 0004 00AF     		add	r7, sp, #0
 968              		.cfi_def_cfa_register 7
 969 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_1_MAX_CHANNELS_EN_MASK;
 970              		.loc 1 663 0
 971 0008 034B     		ldr	r3, .L68
 972 000a 7968     		ldr	r1, [r7, #4]
 973 000c 0322     		mov	r2, #3
 974 000e 0A40     		and	r2, r1
 975 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC_1.c **** }
 976              		.loc 1 664 0
 977 0012 BD46     		mov	sp, r7
 978 0014 02B0     		add	sp, sp, #8
 979              		@ sp needed
 980 0016 80BD     		pop	{r7, pc}
 981              	.L69:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 30


 982              		.align	2
 983              	.L68:
 984 0018 28021A40 		.word	1075446312
 985              		.cfi_endproc
 986              	.LFE13:
 987              		.size	ADC_1_SetSatMask, .-ADC_1_SetSatMask
 988              		.section	.text.ADC_1_SetOffset,"ax",%progbits
 989              		.align	2
 990              		.global	ADC_1_SetOffset
 991              		.code	16
 992              		.thumb_func
 993              		.type	ADC_1_SetOffset, %function
 994              	ADC_1_SetOffset:
 995              	.LFB14:
 665:.\Generated_Source\PSoC4/ADC_1.c **** 
 666:.\Generated_Source\PSoC4/ADC_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetOffset
 669:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC_1.c **** *
 671:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC_1.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC_1.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC_1.c **** *
 677:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC_1.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC_1.c **** *
 682:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC_1.c **** *
 685:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC_1.c **** *
 688:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC_1.c **** {
 996              		.loc 1 690 0
 997              		.cfi_startproc
 998 0000 80B5     		push	{r7, lr}
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 82B0     		sub	sp, sp, #8
 1003              		.cfi_def_cfa_offset 16
 1004 0004 00AF     		add	r7, sp, #0
 1005              		.cfi_def_cfa_register 7
 1006 0006 7860     		str	r0, [r7, #4]
 1007 0008 0A1C     		mov	r2, r1
 1008 000a BB1C     		add	r3, r7, #2
 1009 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1010              		.loc 1 692 0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 31


 1011 000e 7B68     		ldr	r3, [r7, #4]
 1012 0010 022B     		cmp	r3, #2
 1013 0012 02D9     		bls	.L71
 1014              		.loc 1 692 0 is_stmt 0 discriminator 1
 1015 0014 0020     		mov	r0, #0
 1016 0016 FFF7FEFF 		bl	CyHalt
 1017              	.L71:
 693:.\Generated_Source\PSoC4/ADC_1.c **** 
 694:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_offset[chan] = offset;
 1018              		.loc 1 694 0 is_stmt 1
 1019 001a 044B     		ldr	r3, .L72
 1020 001c 7A68     		ldr	r2, [r7, #4]
 1021 001e 5200     		lsl	r2, r2, #1
 1022 0020 B91C     		add	r1, r7, #2
 1023 0022 0988     		ldrh	r1, [r1]
 1024 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC_1.c **** }
 1025              		.loc 1 695 0
 1026 0026 BD46     		mov	sp, r7
 1027 0028 02B0     		add	sp, sp, #8
 1028              		@ sp needed
 1029 002a 80BD     		pop	{r7, pc}
 1030              	.L73:
 1031              		.align	2
 1032              	.L72:
 1033 002c 00000000 		.word	ADC_1_offset
 1034              		.cfi_endproc
 1035              	.LFE14:
 1036              		.size	ADC_1_SetOffset, .-ADC_1_SetOffset
 1037              		.section	.text.ADC_1_SetGain,"ax",%progbits
 1038              		.align	2
 1039              		.global	ADC_1_SetGain
 1040              		.code	16
 1041              		.thumb_func
 1042              		.type	ADC_1_SetGain, %function
 1043              	ADC_1_SetGain:
 1044              	.LFB15:
 696:.\Generated_Source\PSoC4/ADC_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_1.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC_1.c **** * Function Name: ADC_1_SetGain
 700:.\Generated_Source\PSoC4/ADC_1.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC_1.c **** *
 702:.\Generated_Source\PSoC4/ADC_1.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC_1.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC_1.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC_1.c **** *
 711:.\Generated_Source\PSoC4/ADC_1.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC_1.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC_1.c **** *
 715:.\Generated_Source\PSoC4/ADC_1.c **** * Return:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 32


 716:.\Generated_Source\PSoC4/ADC_1.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC_1.c **** *
 718:.\Generated_Source\PSoC4/ADC_1.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC_1.c **** *  ADC_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC_1.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC_1.c **** *
 722:.\Generated_Source\PSoC4/ADC_1.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC_1.c **** void ADC_1_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC_1.c **** {
 1045              		.loc 1 724 0
 1046              		.cfi_startproc
 1047 0000 80B5     		push	{r7, lr}
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 82B0     		sub	sp, sp, #8
 1052              		.cfi_def_cfa_offset 16
 1053 0004 00AF     		add	r7, sp, #0
 1054              		.cfi_def_cfa_register 7
 1055 0006 7860     		str	r0, [r7, #4]
 1056 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_1.c ****     CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1057              		.loc 1 726 0
 1058 000a 7B68     		ldr	r3, [r7, #4]
 1059 000c 022B     		cmp	r3, #2
 1060 000e 02D9     		bls	.L75
 1061              		.loc 1 726 0 is_stmt 0 discriminator 1
 1062 0010 0020     		mov	r0, #0
 1063 0012 FFF7FEFF 		bl	CyHalt
 1064              	.L75:
 727:.\Generated_Source\PSoC4/ADC_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_1.c ****     ADC_1_countsPer10Volt[chan] = adcGain;
 1065              		.loc 1 728 0 is_stmt 1
 1066 0016 044B     		ldr	r3, .L76
 1067 0018 7A68     		ldr	r2, [r7, #4]
 1068 001a 9200     		lsl	r2, r2, #2
 1069 001c 3968     		ldr	r1, [r7]
 1070 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC_1.c **** }
 1071              		.loc 1 729 0
 1072 0020 BD46     		mov	sp, r7
 1073 0022 02B0     		add	sp, sp, #8
 1074              		@ sp needed
 1075 0024 80BD     		pop	{r7, pc}
 1076              	.L77:
 1077 0026 C046     		.align	2
 1078              	.L76:
 1079 0028 00000000 		.word	ADC_1_countsPer10Volt
 1080              		.cfi_endproc
 1081              	.LFE15:
 1082              		.size	ADC_1_SetGain, .-ADC_1_SetGain
 1083              		.global	__aeabi_idiv
 1084              		.section	.text.ADC_1_CountsTo_mVolts,"ax",%progbits
 1085              		.align	2
 1086              		.global	ADC_1_CountsTo_mVolts
 1087              		.code	16
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 33


 1088              		.thumb_func
 1089              		.type	ADC_1_CountsTo_mVolts, %function
 1090              	ADC_1_CountsTo_mVolts:
 1091              	.LFB16:
 730:.\Generated_Source\PSoC4/ADC_1.c **** 
 731:.\Generated_Source\PSoC4/ADC_1.c **** 
 732:.\Generated_Source\PSoC4/ADC_1.c **** #if(ADC_1_DEFAULT_JUSTIFICATION_SEL == ADC_1__RIGHT)
 733:.\Generated_Source\PSoC4/ADC_1.c **** 
 734:.\Generated_Source\PSoC4/ADC_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC_1.c ****     *
 739:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC_1.c ****     *
 743:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC_1.c ****     *
 747:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC_1.c ****     *
 750:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC_1.c ****     int16 ADC_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1092              		.loc 1 757 0
 1093              		.cfi_startproc
 1094 0000 80B5     		push	{r7, lr}
 1095              		.cfi_def_cfa_offset 8
 1096              		.cfi_offset 7, -8
 1097              		.cfi_offset 14, -4
 1098 0002 84B0     		sub	sp, sp, #16
 1099              		.cfi_def_cfa_offset 24
 1100 0004 00AF     		add	r7, sp, #0
 1101              		.cfi_def_cfa_register 7
 1102 0006 7860     		str	r0, [r7, #4]
 1103 0008 0A1C     		mov	r2, r1
 1104 000a BB1C     		add	r3, r7, #2
 1105 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC_1.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC_1.c **** 
 760:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1106              		.loc 1 761 0
 1107 000e 7B68     		ldr	r3, [r7, #4]
 1108 0010 022B     		cmp	r3, #2
 1109 0012 02D9     		bls	.L79
 1110              		.loc 1 761 0 is_stmt 0 discriminator 1
 1111 0014 0020     		mov	r0, #0
 1112 0016 FFF7FEFF 		bl	CyHalt
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 34


 1113              	.L79:
 762:.\Generated_Source\PSoC4/ADC_1.c **** 
 763:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC_1.c ****             {
 767:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC_1.c ****             }
 769:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC_1.c **** 
 771:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1114              		.loc 1 772 0 is_stmt 1
 1115 001a BB1C     		add	r3, r7, #2
 1116 001c 1A88     		ldrh	r2, [r3]
 1117 001e 1E4B     		ldr	r3, .L85
 1118 0020 7968     		ldr	r1, [r7, #4]
 1119 0022 4900     		lsl	r1, r1, #1
 1120 0024 CB5A     		ldrh	r3, [r1, r3]
 1121 0026 9BB2     		uxth	r3, r3
 1122 0028 9BB2     		uxth	r3, r3
 1123 002a D31A     		sub	r3, r2, r3
 1124 002c 9AB2     		uxth	r2, r3
 1125 002e BB1C     		add	r3, r7, #2
 1126 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC_1.c **** 
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1127              		.loc 1 774 0
 1128 0032 BB1C     		add	r3, r7, #2
 1129 0034 0021     		mov	r1, #0
 1130 0036 5B5E     		ldrsh	r3, [r3, r1]
 1131 0038 184A     		ldr	r2, .L85+4
 1132 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC_1.c ****                  (ADC_1_countsPer10Volt[chan] / 2) : (-(ADC_1_countsPer10Volt[chan] / 2)) ))
 1133              		.loc 1 775 0
 1134 003c BB1C     		add	r3, r7, #2
 1135 003e 0021     		mov	r1, #0
 1136 0040 5B5E     		ldrsh	r3, [r3, r1]
 1137 0042 002B     		cmp	r3, #0
 1138 0044 08DD     		ble	.L80
 1139              		.loc 1 775 0 is_stmt 0 discriminator 1
 1140 0046 164B     		ldr	r3, .L85+8
 1141 0048 7968     		ldr	r1, [r7, #4]
 1142 004a 8900     		lsl	r1, r1, #2
 1143 004c CB58     		ldr	r3, [r1, r3]
 1144 004e 002B     		cmp	r3, #0
 1145 0050 00DA     		bge	.L81
 1146 0052 0133     		add	r3, r3, #1
 1147              	.L81:
 1148 0054 5B10     		asr	r3, r3, #1
 1149 0056 08E0     		b	.L82
 1150              	.L80:
 1151              		.loc 1 775 0 discriminator 2
 1152 0058 114B     		ldr	r3, .L85+8
 1153 005a 7968     		ldr	r1, [r7, #4]
 1154 005c 8900     		lsl	r1, r1, #2
 1155 005e CB58     		ldr	r3, [r1, r3]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 35


 1156 0060 002B     		cmp	r3, #0
 1157 0062 00DA     		bge	.L83
 1158 0064 0133     		add	r3, r3, #1
 1159              	.L83:
 1160 0066 5B10     		asr	r3, r3, #1
 1161 0068 5B42     		neg	r3, r3
 1162              	.L82:
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1163              		.loc 1 774 0 is_stmt 1
 1164 006a D218     		add	r2, r2, r3
 776:.\Generated_Source\PSoC4/ADC_1.c ****                  / ADC_1_countsPer10Volt[chan]);
 1165              		.loc 1 776 0
 1166 006c 0C4B     		ldr	r3, .L85+8
 1167 006e 7968     		ldr	r1, [r7, #4]
 1168 0070 8900     		lsl	r1, r1, #2
 1169 0072 CB58     		ldr	r3, [r1, r3]
 1170 0074 101C     		mov	r0, r2
 1171 0076 191C     		mov	r1, r3
 1172 0078 FFF7FEFF 		bl	__aeabi_idiv
 1173 007c 031C     		mov	r3, r0
 1174 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1175              		.loc 1 774 0
 1176 0080 3B1C     		mov	r3, r7
 1177 0082 0E33     		add	r3, r3, #14
 1178 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_1.c **** 
 778:.\Generated_Source\PSoC4/ADC_1.c ****         return( mVolts );
 1179              		.loc 1 778 0
 1180 0086 3B1C     		mov	r3, r7
 1181 0088 0E33     		add	r3, r3, #14
 1182 008a 1B88     		ldrh	r3, [r3]
 1183 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1184              		.loc 1 779 0
 1185 008e 181C     		mov	r0, r3
 1186 0090 BD46     		mov	sp, r7
 1187 0092 04B0     		add	sp, sp, #16
 1188              		@ sp needed
 1189 0094 80BD     		pop	{r7, pc}
 1190              	.L86:
 1191 0096 C046     		.align	2
 1192              	.L85:
 1193 0098 00000000 		.word	ADC_1_offset
 1194 009c 10270000 		.word	10000
 1195 00a0 00000000 		.word	ADC_1_countsPer10Volt
 1196              		.cfi_endproc
 1197              	.LFE16:
 1198              		.size	ADC_1_CountsTo_mVolts, .-ADC_1_CountsTo_mVolts
 1199              		.global	__aeabi_lmul
 1200              		.global	__aeabi_ldivmod
 1201              		.section	.text.ADC_1_CountsTo_uVolts,"ax",%progbits
 1202              		.align	2
 1203              		.global	ADC_1_CountsTo_uVolts
 1204              		.code	16
 1205              		.thumb_func
 1206              		.type	ADC_1_CountsTo_uVolts, %function
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 36


 1207              	ADC_1_CountsTo_uVolts:
 1208              	.LFB17:
 780:.\Generated_Source\PSoC4/ADC_1.c **** 
 781:.\Generated_Source\PSoC4/ADC_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC_1.c ****     *
 786:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC_1.c ****     *
 790:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC_1.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC_1.c ****     *
 794:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC_1.c ****     *
 797:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC_1.c ****     *
 802:.\Generated_Source\PSoC4/ADC_1.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC_1.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC_1.c ****     *
 809:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC_1.c ****     int32 ADC_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1209              		.loc 1 811 0
 1210              		.cfi_startproc
 1211 0000 B0B5     		push	{r4, r5, r7, lr}
 1212              		.cfi_def_cfa_offset 16
 1213              		.cfi_offset 4, -16
 1214              		.cfi_offset 5, -12
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 86B0     		sub	sp, sp, #24
 1218              		.cfi_def_cfa_offset 40
 1219 0004 00AF     		add	r7, sp, #0
 1220              		.cfi_def_cfa_register 7
 1221 0006 F860     		str	r0, [r7, #12]
 1222 0008 0A1C     		mov	r2, r1
 1223 000a 3B1C     		mov	r3, r7
 1224 000c 0A33     		add	r3, r3, #10
 1225 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC_1.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC_1.c **** 
 814:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1226              		.loc 1 815 0
 1227 0010 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 37


 1228 0012 022B     		cmp	r3, #2
 1229 0014 02D9     		bls	.L88
 1230              		.loc 1 815 0 is_stmt 0 discriminator 1
 1231 0016 0020     		mov	r0, #0
 1232 0018 FFF7FEFF 		bl	CyHalt
 1233              	.L88:
 816:.\Generated_Source\PSoC4/ADC_1.c **** 
 817:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC_1.c ****             {
 821:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC_1.c ****             }
 823:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC_1.c **** 
 825:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1234              		.loc 1 826 0 is_stmt 1
 1235 001c 3B1C     		mov	r3, r7
 1236 001e 0A33     		add	r3, r3, #10
 1237 0020 1A88     		ldrh	r2, [r3]
 1238 0022 1B4B     		ldr	r3, .L90+8
 1239 0024 F968     		ldr	r1, [r7, #12]
 1240 0026 4900     		lsl	r1, r1, #1
 1241 0028 CB5A     		ldrh	r3, [r1, r3]
 1242 002a 9BB2     		uxth	r3, r3
 1243 002c 9BB2     		uxth	r3, r3
 1244 002e D31A     		sub	r3, r2, r3
 1245 0030 9AB2     		uxth	r2, r3
 1246 0032 3B1C     		mov	r3, r7
 1247 0034 0A33     		add	r3, r3, #10
 1248 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC_1.c **** 
 828:.\Generated_Source\PSoC4/ADC_1.c ****         uVolts = ((int64)adcCounts * ADC_1_10UV_COUNTS) / ADC_1_countsPer10Volt[chan];
 1249              		.loc 1 828 0
 1250 0038 3B1C     		mov	r3, r7
 1251 003a 0A33     		add	r3, r3, #10
 1252 003c 1B88     		ldrh	r3, [r3]
 1253 003e 1BB2     		sxth	r3, r3
 1254 0040 3B60     		str	r3, [r7]
 1255 0042 DB17     		asr	r3, r3, #31
 1256 0044 7B60     		str	r3, [r7, #4]
 1257 0046 3868     		ldr	r0, [r7]
 1258 0048 7968     		ldr	r1, [r7, #4]
 1259 004a 104B     		ldr	r3, .L90+4
 1260 004c 0E4A     		ldr	r2, .L90
 1261 004e FFF7FEFF 		bl	__aeabi_lmul
 1262 0052 021C     		mov	r2, r0
 1263 0054 0B1C     		mov	r3, r1
 1264 0056 0F49     		ldr	r1, .L90+12
 1265 0058 F868     		ldr	r0, [r7, #12]
 1266 005a 8000     		lsl	r0, r0, #2
 1267 005c 4158     		ldr	r1, [r0, r1]
 1268 005e 0C1C     		mov	r4, r1
 1269 0060 C917     		asr	r1, r1, #31
 1270 0062 0D1C     		mov	r5, r1
 1271 0064 101C     		mov	r0, r2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 38


 1272 0066 191C     		mov	r1, r3
 1273 0068 221C     		mov	r2, r4
 1274 006a 2B1C     		mov	r3, r5
 1275 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1276 0070 031C     		mov	r3, r0
 1277 0072 0C1C     		mov	r4, r1
 1278 0074 3B61     		str	r3, [r7, #16]
 1279 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC_1.c **** 
 830:.\Generated_Source\PSoC4/ADC_1.c ****         return( (int32)uVolts );
 1280              		.loc 1 830 0
 1281 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1282              		.loc 1 831 0
 1283 007a 181C     		mov	r0, r3
 1284 007c BD46     		mov	sp, r7
 1285 007e 06B0     		add	sp, sp, #24
 1286              		@ sp needed
 1287 0080 B0BD     		pop	{r4, r5, r7, pc}
 1288              	.L91:
 1289 0082 C046C046 		.align	3
 1289      C046
 1290              	.L90:
 1291 0088 80969800 		.word	10000000
 1292 008c 00000000 		.word	0
 1293 0090 00000000 		.word	ADC_1_offset
 1294 0094 00000000 		.word	ADC_1_countsPer10Volt
 1295              		.cfi_endproc
 1296              	.LFE17:
 1297              		.size	ADC_1_CountsTo_uVolts, .-ADC_1_CountsTo_uVolts
 1298              		.global	__aeabi_i2f
 1299              		.global	__aeabi_fmul
 1300              		.global	__aeabi_fdiv
 1301              		.section	.text.ADC_1_CountsTo_Volts,"ax",%progbits
 1302              		.align	2
 1303              		.global	ADC_1_CountsTo_Volts
 1304              		.code	16
 1305              		.thumb_func
 1306              		.type	ADC_1_CountsTo_Volts, %function
 1307              	ADC_1_CountsTo_Volts:
 1308              	.LFB18:
 832:.\Generated_Source\PSoC4/ADC_1.c **** 
 833:.\Generated_Source\PSoC4/ADC_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_1.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC_1.c ****     * Function Name: ADC_1_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC_1.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC_1.c ****     *
 838:.\Generated_Source\PSoC4/ADC_1.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC_1.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC_1.c ****     *
 842:.\Generated_Source\PSoC4/ADC_1.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC_1.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC_1.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC_1.c ****     *
 846:.\Generated_Source\PSoC4/ADC_1.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC_1.c ****     *  Results in Volts
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 39


 848:.\Generated_Source\PSoC4/ADC_1.c ****     *
 849:.\Generated_Source\PSoC4/ADC_1.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC_1.c ****     *  ADC_1_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC_1.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC_1.c ****     *
 854:.\Generated_Source\PSoC4/ADC_1.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC_1.c ****     float32 ADC_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC_1.c ****     {
 1309              		.loc 1 856 0
 1310              		.cfi_startproc
 1311 0000 90B5     		push	{r4, r7, lr}
 1312              		.cfi_def_cfa_offset 12
 1313              		.cfi_offset 4, -12
 1314              		.cfi_offset 7, -8
 1315              		.cfi_offset 14, -4
 1316 0002 85B0     		sub	sp, sp, #20
 1317              		.cfi_def_cfa_offset 32
 1318 0004 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
 1320 0006 7860     		str	r0, [r7, #4]
 1321 0008 0A1C     		mov	r2, r1
 1322 000a BB1C     		add	r3, r7, #2
 1323 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC_1.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC_1.c **** 
 859:.\Generated_Source\PSoC4/ADC_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC_1.c ****         CYASSERT(chan < ADC_1_TOTAL_CHANNELS_NUM);
 1324              		.loc 1 860 0
 1325 000e 7B68     		ldr	r3, [r7, #4]
 1326 0010 022B     		cmp	r3, #2
 1327 0012 02D9     		bls	.L93
 1328              		.loc 1 860 0 is_stmt 0 discriminator 1
 1329 0014 0020     		mov	r0, #0
 1330 0016 FFF7FEFF 		bl	CyHalt
 1331              	.L93:
 861:.\Generated_Source\PSoC4/ADC_1.c **** 
 862:.\Generated_Source\PSoC4/ADC_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC_1.c ****         #if(ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC_1.c ****             if((ADC_1_channelsConfig[chan] & ADC_1_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC_1.c ****             {
 866:.\Generated_Source\PSoC4/ADC_1.c ****                 adcCounts /= ADC_1_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC_1.c ****             }
 868:.\Generated_Source\PSoC4/ADC_1.c ****         #endif /* ADC_1_DEFAULT_AVG_MODE == ADC_1__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC_1.c **** 
 870:.\Generated_Source\PSoC4/ADC_1.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC_1.c ****         adcCounts -= ADC_1_offset[chan];
 1332              		.loc 1 871 0 is_stmt 1
 1333 001a BB1C     		add	r3, r7, #2
 1334 001c 1A88     		ldrh	r2, [r3]
 1335 001e 154B     		ldr	r3, .L95
 1336 0020 7968     		ldr	r1, [r7, #4]
 1337 0022 4900     		lsl	r1, r1, #1
 1338 0024 CB5A     		ldrh	r3, [r1, r3]
 1339 0026 9BB2     		uxth	r3, r3
 1340 0028 9BB2     		uxth	r3, r3
 1341 002a D31A     		sub	r3, r2, r3
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 40


 1342 002c 9AB2     		uxth	r2, r3
 1343 002e BB1C     		add	r3, r7, #2
 1344 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC_1.c **** 
 873:.\Generated_Source\PSoC4/ADC_1.c ****         volts = ((float32)adcCounts * ADC_1_10V_COUNTS) / (float32)ADC_1_countsPer10Volt[chan];
 1345              		.loc 1 873 0
 1346 0032 BB1C     		add	r3, r7, #2
 1347 0034 0022     		mov	r2, #0
 1348 0036 9B5E     		ldrsh	r3, [r3, r2]
 1349 0038 181C     		mov	r0, r3
 1350 003a FFF7FEFF 		bl	__aeabi_i2f
 1351 003e 031C     		add	r3, r0, #0
 1352 0040 181C     		add	r0, r3, #0
 1353 0042 0D49     		ldr	r1, .L95+4
 1354 0044 FFF7FEFF 		bl	__aeabi_fmul
 1355 0048 031C     		add	r3, r0, #0
 1356 004a 1C1C     		add	r4, r3, #0
 1357 004c 0B4B     		ldr	r3, .L95+8
 1358 004e 7A68     		ldr	r2, [r7, #4]
 1359 0050 9200     		lsl	r2, r2, #2
 1360 0052 D358     		ldr	r3, [r2, r3]
 1361 0054 181C     		mov	r0, r3
 1362 0056 FFF7FEFF 		bl	__aeabi_i2f
 1363 005a 031C     		add	r3, r0, #0
 1364 005c 201C     		add	r0, r4, #0
 1365 005e 191C     		add	r1, r3, #0
 1366 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1367 0064 031C     		add	r3, r0, #0
 1368 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC_1.c **** 
 875:.\Generated_Source\PSoC4/ADC_1.c ****         return( volts );
 1369              		.loc 1 875 0
 1370 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC_1.c ****     }
 1371              		.loc 1 876 0
 1372 006a 181C     		add	r0, r3, #0
 1373 006c BD46     		mov	sp, r7
 1374 006e 05B0     		add	sp, sp, #20
 1375              		@ sp needed
 1376 0070 90BD     		pop	{r4, r7, pc}
 1377              	.L96:
 1378 0072 C046     		.align	2
 1379              	.L95:
 1380 0074 00000000 		.word	ADC_1_offset
 1381 0078 00002041 		.word	1092616192
 1382 007c 00000000 		.word	ADC_1_countsPer10Volt
 1383              		.cfi_endproc
 1384              	.LFE18:
 1385              		.size	ADC_1_CountsTo_Volts, .-ADC_1_CountsTo_Volts
 1386              		.section	.rodata
 1387              		.align	2
 1388              		.type	ADC_1_InputsPlacement.4745, %object
 1389              		.size	ADC_1_InputsPlacement.4745, 3
 1390              	ADC_1_InputsPlacement.4745:
 1391 000c 07       		.byte	7
 1392 000d 06       		.byte	6
 1393 000e 70       		.byte	112
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 41


 1394 000f 00       		.text
 1395              	.Letext0:
 1396              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1397              		.section	.debug_info,"",%progbits
 1398              	.Ldebug_info0:
 1399 0000 A8040000 		.4byte	0x4a8
 1400 0004 0400     		.2byte	0x4
 1401 0006 00000000 		.4byte	.Ldebug_abbrev0
 1402 000a 04       		.byte	0x4
 1403 000b 01       		.uleb128 0x1
 1404 000c 5A020000 		.4byte	.LASF61
 1405 0010 01       		.byte	0x1
 1406 0011 28000000 		.4byte	.LASF62
 1407 0015 C0010000 		.4byte	.LASF63
 1408 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1409 001d 00000000 		.4byte	0
 1410 0021 00000000 		.4byte	.Ldebug_line0
 1411 0025 02       		.uleb128 0x2
 1412 0026 01       		.byte	0x1
 1413 0027 06       		.byte	0x6
 1414 0028 64000000 		.4byte	.LASF0
 1415 002c 02       		.uleb128 0x2
 1416 002d 01       		.byte	0x1
 1417 002e 08       		.byte	0x8
 1418 002f 14030000 		.4byte	.LASF1
 1419 0033 02       		.uleb128 0x2
 1420 0034 02       		.byte	0x2
 1421 0035 05       		.byte	0x5
 1422 0036 4A030000 		.4byte	.LASF2
 1423 003a 02       		.uleb128 0x2
 1424 003b 02       		.byte	0x2
 1425 003c 07       		.byte	0x7
 1426 003d 6B010000 		.4byte	.LASF3
 1427 0041 02       		.uleb128 0x2
 1428 0042 04       		.byte	0x4
 1429 0043 05       		.byte	0x5
 1430 0044 A3000000 		.4byte	.LASF4
 1431 0048 02       		.uleb128 0x2
 1432 0049 04       		.byte	0x4
 1433 004a 07       		.byte	0x7
 1434 004b 49010000 		.4byte	.LASF5
 1435 004f 02       		.uleb128 0x2
 1436 0050 08       		.byte	0x8
 1437 0051 05       		.byte	0x5
 1438 0052 56000000 		.4byte	.LASF6
 1439 0056 02       		.uleb128 0x2
 1440 0057 08       		.byte	0x8
 1441 0058 07       		.byte	0x7
 1442 0059 7B000000 		.4byte	.LASF7
 1443 005d 03       		.uleb128 0x3
 1444 005e 04       		.byte	0x4
 1445 005f 05       		.byte	0x5
 1446 0060 696E7400 		.ascii	"int\000"
 1447 0064 02       		.uleb128 0x2
 1448 0065 04       		.byte	0x4
 1449 0066 07       		.byte	0x7
 1450 0067 22010000 		.4byte	.LASF8
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 42


 1451 006b 04       		.uleb128 0x4
 1452 006c AC000000 		.4byte	.LASF9
 1453 0070 02       		.byte	0x2
 1454 0071 C1       		.byte	0xc1
 1455 0072 2C000000 		.4byte	0x2c
 1456 0076 04       		.uleb128 0x4
 1457 0077 00000000 		.4byte	.LASF10
 1458 007b 02       		.byte	0x2
 1459 007c C2       		.byte	0xc2
 1460 007d 3A000000 		.4byte	0x3a
 1461 0081 04       		.uleb128 0x4
 1462 0082 EC000000 		.4byte	.LASF11
 1463 0086 02       		.byte	0x2
 1464 0087 C3       		.byte	0xc3
 1465 0088 48000000 		.4byte	0x48
 1466 008c 04       		.uleb128 0x4
 1467 008d B7030000 		.4byte	.LASF12
 1468 0091 02       		.byte	0x2
 1469 0092 C5       		.byte	0xc5
 1470 0093 33000000 		.4byte	0x33
 1471 0097 04       		.uleb128 0x4
 1472 0098 9D000000 		.4byte	.LASF13
 1473 009c 02       		.byte	0x2
 1474 009d C6       		.byte	0xc6
 1475 009e 41000000 		.4byte	0x41
 1476 00a2 04       		.uleb128 0x4
 1477 00a3 11020000 		.4byte	.LASF14
 1478 00a7 02       		.byte	0x2
 1479 00a8 C7       		.byte	0xc7
 1480 00a9 AD000000 		.4byte	0xad
 1481 00ad 02       		.uleb128 0x2
 1482 00ae 04       		.byte	0x4
 1483 00af 04       		.byte	0x4
 1484 00b0 54020000 		.4byte	.LASF15
 1485 00b4 02       		.uleb128 0x2
 1486 00b5 08       		.byte	0x8
 1487 00b6 04       		.byte	0x4
 1488 00b7 B2000000 		.4byte	.LASF16
 1489 00bb 04       		.uleb128 0x4
 1490 00bc 4E020000 		.4byte	.LASF17
 1491 00c0 02       		.byte	0x2
 1492 00c1 CC       		.byte	0xcc
 1493 00c2 4F000000 		.4byte	0x4f
 1494 00c6 02       		.uleb128 0x2
 1495 00c7 01       		.byte	0x1
 1496 00c8 08       		.byte	0x8
 1497 00c9 5F030000 		.4byte	.LASF18
 1498 00cd 05       		.uleb128 0x5
 1499 00ce 0B020000 		.4byte	.LASF19
 1500 00d2 02       		.byte	0x2
 1501 00d3 6D01     		.2byte	0x16d
 1502 00d5 D9000000 		.4byte	0xd9
 1503 00d9 06       		.uleb128 0x6
 1504 00da 81000000 		.4byte	0x81
 1505 00de 02       		.uleb128 0x2
 1506 00df 04       		.byte	0x4
 1507 00e0 07       		.byte	0x7
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 43


 1508 00e1 19020000 		.4byte	.LASF20
 1509 00e5 07       		.uleb128 0x7
 1510 00e6 F8000000 		.4byte	.LASF25
 1511 00ea 01       		.byte	0x1
 1512 00eb 3F       		.byte	0x3f
 1513 00ec 00000000 		.4byte	.LFB0
 1514 00f0 24000000 		.4byte	.LFE0-.LFB0
 1515 00f4 01       		.uleb128 0x1
 1516 00f5 9C       		.byte	0x9c
 1517 00f6 08       		.uleb128 0x8
 1518 00f7 70000000 		.4byte	.LASF36
 1519 00fb 01       		.byte	0x1
 1520 00fc 5E       		.byte	0x5e
 1521 00fd 00000000 		.4byte	.LFB1
 1522 0101 58020000 		.4byte	.LFE1-.LFB1
 1523 0105 01       		.uleb128 0x1
 1524 0106 9C       		.byte	0x9c
 1525 0107 47010000 		.4byte	0x147
 1526 010b 09       		.uleb128 0x9
 1527 010c 54030000 		.4byte	.LASF21
 1528 0110 01       		.byte	0x1
 1529 0111 60       		.byte	0x60
 1530 0112 81000000 		.4byte	0x81
 1531 0116 02       		.uleb128 0x2
 1532 0117 91       		.byte	0x91
 1533 0118 6C       		.sleb128 -20
 1534 0119 09       		.uleb128 0x9
 1535 011a 61010000 		.4byte	.LASF22
 1536 011e 01       		.byte	0x1
 1537 011f 61       		.byte	0x61
 1538 0120 81000000 		.4byte	0x81
 1539 0124 02       		.uleb128 0x2
 1540 0125 91       		.byte	0x91
 1541 0126 64       		.sleb128 -28
 1542 0127 09       		.uleb128 0x9
 1543 0128 0F000000 		.4byte	.LASF23
 1544 012c 01       		.byte	0x1
 1545 012d 62       		.byte	0x62
 1546 012e 97000000 		.4byte	0x97
 1547 0132 02       		.uleb128 0x2
 1548 0133 91       		.byte	0x91
 1549 0134 68       		.sleb128 -24
 1550 0135 09       		.uleb128 0x9
 1551 0136 91030000 		.4byte	.LASF24
 1552 013a 01       		.byte	0x1
 1553 013b 65       		.byte	0x65
 1554 013c 57010000 		.4byte	0x157
 1555 0140 05       		.uleb128 0x5
 1556 0141 03       		.byte	0x3
 1557 0142 0C000000 		.4byte	ADC_1_InputsPlacement.4745
 1558 0146 00       		.byte	0
 1559 0147 0A       		.uleb128 0xa
 1560 0148 6B000000 		.4byte	0x6b
 1561 014c 57010000 		.4byte	0x157
 1562 0150 0B       		.uleb128 0xb
 1563 0151 DE000000 		.4byte	0xde
 1564 0155 02       		.byte	0x2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 44


 1565 0156 00       		.byte	0
 1566 0157 0C       		.uleb128 0xc
 1567 0158 47010000 		.4byte	0x147
 1568 015c 0D       		.uleb128 0xd
 1569 015d 49000000 		.4byte	.LASF26
 1570 0161 01       		.byte	0x1
 1571 0162 4A01     		.2byte	0x14a
 1572 0164 00000000 		.4byte	.LFB2
 1573 0168 28000000 		.4byte	.LFE2-.LFB2
 1574 016c 01       		.uleb128 0x1
 1575 016d 9C       		.byte	0x9c
 1576 016e 0E       		.uleb128 0xe
 1577 016f 92000000 		.4byte	.LASF27
 1578 0173 01       		.byte	0x1
 1579 0174 6D01     		.2byte	0x16d
 1580 0176 00000000 		.4byte	.LFB3
 1581 017a 18000000 		.4byte	.LFE3-.LFB3
 1582 017e 01       		.uleb128 0x1
 1583 017f 9C       		.byte	0x9c
 1584 0180 0E       		.uleb128 0xe
 1585 0181 36010000 		.4byte	.LASF28
 1586 0185 01       		.byte	0x1
 1587 0186 8701     		.2byte	0x187
 1588 0188 00000000 		.4byte	.LFB4
 1589 018c 1C000000 		.4byte	.LFE4-.LFB4
 1590 0190 01       		.uleb128 0x1
 1591 0191 9C       		.byte	0x9c
 1592 0192 0E       		.uleb128 0xe
 1593 0193 16000000 		.4byte	.LASF29
 1594 0197 01       		.byte	0x1
 1595 0198 A001     		.2byte	0x1a0
 1596 019a 00000000 		.4byte	.LFB5
 1597 019e 1C000000 		.4byte	.LFE5-.LFB5
 1598 01a2 01       		.uleb128 0x1
 1599 01a3 9C       		.byte	0x9c
 1600 01a4 0F       		.uleb128 0xf
 1601 01a5 ED020000 		.4byte	.LASF31
 1602 01a9 01       		.byte	0x1
 1603 01aa C201     		.2byte	0x1c2
 1604 01ac 81000000 		.4byte	0x81
 1605 01b0 00000000 		.4byte	.LFB6
 1606 01b4 7C000000 		.4byte	.LFE6-.LFB6
 1607 01b8 01       		.uleb128 0x1
 1608 01b9 9C       		.byte	0x9c
 1609 01ba DD010000 		.4byte	0x1dd
 1610 01be 10       		.uleb128 0x10
 1611 01bf 1A010000 		.4byte	.LASF33
 1612 01c3 01       		.byte	0x1
 1613 01c4 C201     		.2byte	0x1c2
 1614 01c6 81000000 		.4byte	0x81
 1615 01ca 02       		.uleb128 0x2
 1616 01cb 91       		.byte	0x91
 1617 01cc 6C       		.sleb128 -20
 1618 01cd 11       		.uleb128 0x11
 1619 01ce 8A030000 		.4byte	.LASF30
 1620 01d2 01       		.byte	0x1
 1621 01d3 C401     		.2byte	0x1c4
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 45


 1622 01d5 81000000 		.4byte	0x81
 1623 01d9 02       		.uleb128 0x2
 1624 01da 91       		.byte	0x91
 1625 01db 74       		.sleb128 -12
 1626 01dc 00       		.byte	0
 1627 01dd 12       		.uleb128 0x12
 1628 01de 22030000 		.4byte	.LASF32
 1629 01e2 01       		.byte	0x1
 1630 01e3 F801     		.2byte	0x1f8
 1631 01e5 8C000000 		.4byte	0x8c
 1632 01e9 00000000 		.4byte	.LFB7
 1633 01ed 4C000000 		.4byte	.LFE7-.LFB7
 1634 01f1 01       		.uleb128 0x1
 1635 01f2 9C       		.byte	0x9c
 1636 01f3 16020000 		.4byte	0x216
 1637 01f7 10       		.uleb128 0x10
 1638 01f8 5A030000 		.4byte	.LASF34
 1639 01fc 01       		.byte	0x1
 1640 01fd F801     		.2byte	0x1f8
 1641 01ff 81000000 		.4byte	0x81
 1642 0203 02       		.uleb128 0x2
 1643 0204 91       		.byte	0x91
 1644 0205 6C       		.sleb128 -20
 1645 0206 11       		.uleb128 0x11
 1646 0207 BD030000 		.4byte	.LASF35
 1647 020b 01       		.byte	0x1
 1648 020c FA01     		.2byte	0x1fa
 1649 020e 81000000 		.4byte	0x81
 1650 0212 02       		.uleb128 0x2
 1651 0213 91       		.byte	0x91
 1652 0214 74       		.sleb128 -12
 1653 0215 00       		.byte	0
 1654 0216 13       		.uleb128 0x13
 1655 0217 B9000000 		.4byte	.LASF37
 1656 021b 01       		.byte	0x1
 1657 021c 2502     		.2byte	0x225
 1658 021e 00000000 		.4byte	.LFB8
 1659 0222 1C000000 		.4byte	.LFE8-.LFB8
 1660 0226 01       		.uleb128 0x1
 1661 0227 9C       		.byte	0x9c
 1662 0228 3C020000 		.4byte	0x23c
 1663 022c 10       		.uleb128 0x10
 1664 022d F3000000 		.4byte	.LASF38
 1665 0231 01       		.byte	0x1
 1666 0232 2502     		.2byte	0x225
 1667 0234 81000000 		.4byte	0x81
 1668 0238 02       		.uleb128 0x2
 1669 0239 91       		.byte	0x91
 1670 023a 74       		.sleb128 -12
 1671 023b 00       		.byte	0
 1672 023c 0E       		.uleb128 0xe
 1673 023d 04010000 		.4byte	.LASF39
 1674 0241 01       		.byte	0x1
 1675 0242 3B02     		.2byte	0x23b
 1676 0244 00000000 		.4byte	.LFB9
 1677 0248 1C000000 		.4byte	.LFE9-.LFB9
 1678 024c 01       		.uleb128 0x1
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 46


 1679 024d 9C       		.byte	0x9c
 1680 024e 13       		.uleb128 0x13
 1681 024f 94010000 		.4byte	.LASF40
 1682 0253 01       		.byte	0x1
 1683 0254 5102     		.2byte	0x251
 1684 0256 00000000 		.4byte	.LFB10
 1685 025a 30000000 		.4byte	.LFE10-.LFB10
 1686 025e 01       		.uleb128 0x1
 1687 025f 9C       		.byte	0x9c
 1688 0260 74020000 		.4byte	0x274
 1689 0264 10       		.uleb128 0x10
 1690 0265 22020000 		.4byte	.LASF41
 1691 0269 01       		.byte	0x1
 1692 026a 5102     		.2byte	0x251
 1693 026c 81000000 		.4byte	0x81
 1694 0270 02       		.uleb128 0x2
 1695 0271 91       		.byte	0x91
 1696 0272 74       		.sleb128 -12
 1697 0273 00       		.byte	0
 1698 0274 13       		.uleb128 0x13
 1699 0275 A6010000 		.4byte	.LASF42
 1700 0279 01       		.byte	0x1
 1701 027a 6602     		.2byte	0x266
 1702 027c 00000000 		.4byte	.LFB11
 1703 0280 2C000000 		.4byte	.LFE11-.LFB11
 1704 0284 01       		.uleb128 0x1
 1705 0285 9C       		.byte	0x9c
 1706 0286 9A020000 		.4byte	0x29a
 1707 028a 10       		.uleb128 0x10
 1708 028b D6020000 		.4byte	.LASF43
 1709 028f 01       		.byte	0x1
 1710 0290 6602     		.2byte	0x266
 1711 0292 81000000 		.4byte	0x81
 1712 0296 02       		.uleb128 0x2
 1713 0297 91       		.byte	0x91
 1714 0298 74       		.sleb128 -12
 1715 0299 00       		.byte	0
 1716 029a 13       		.uleb128 0x13
 1717 029b CB000000 		.4byte	.LASF44
 1718 029f 01       		.byte	0x1
 1719 02a0 7E02     		.2byte	0x27e
 1720 02a2 00000000 		.4byte	.LFB12
 1721 02a6 1C000000 		.4byte	.LFE12-.LFB12
 1722 02aa 01       		.uleb128 0x1
 1723 02ab 9C       		.byte	0x9c
 1724 02ac C0020000 		.4byte	0x2c0
 1725 02b0 10       		.uleb128 0x10
 1726 02b1 F3000000 		.4byte	.LASF38
 1727 02b5 01       		.byte	0x1
 1728 02b6 7E02     		.2byte	0x27e
 1729 02b8 81000000 		.4byte	0x81
 1730 02bc 02       		.uleb128 0x2
 1731 02bd 91       		.byte	0x91
 1732 02be 74       		.sleb128 -12
 1733 02bf 00       		.byte	0
 1734 02c0 13       		.uleb128 0x13
 1735 02c1 03030000 		.4byte	.LASF45
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 47


 1736 02c5 01       		.byte	0x1
 1737 02c6 9502     		.2byte	0x295
 1738 02c8 00000000 		.4byte	.LFB13
 1739 02cc 1C000000 		.4byte	.LFE13-.LFB13
 1740 02d0 01       		.uleb128 0x1
 1741 02d1 9C       		.byte	0x9c
 1742 02d2 E6020000 		.4byte	0x2e6
 1743 02d6 10       		.uleb128 0x10
 1744 02d7 F3000000 		.4byte	.LASF38
 1745 02db 01       		.byte	0x1
 1746 02dc 9502     		.2byte	0x295
 1747 02de 81000000 		.4byte	0x81
 1748 02e2 02       		.uleb128 0x2
 1749 02e3 91       		.byte	0x91
 1750 02e4 74       		.sleb128 -12
 1751 02e5 00       		.byte	0
 1752 02e6 14       		.uleb128 0x14
 1753 02e7 A7030000 		.4byte	.LASF46
 1754 02eb 01       		.byte	0x1
 1755 02ec B102     		.2byte	0x2b1
 1756 02ee 00000000 		.4byte	.LFB14
 1757 02f2 30000000 		.4byte	.LFE14-.LFB14
 1758 02f6 01       		.uleb128 0x1
 1759 02f7 9C       		.byte	0x9c
 1760 02f8 1B030000 		.4byte	0x31b
 1761 02fc 10       		.uleb128 0x10
 1762 02fd 5A030000 		.4byte	.LASF34
 1763 0301 01       		.byte	0x1
 1764 0302 B102     		.2byte	0x2b1
 1765 0304 81000000 		.4byte	0x81
 1766 0308 02       		.uleb128 0x2
 1767 0309 91       		.byte	0x91
 1768 030a 74       		.sleb128 -12
 1769 030b 10       		.uleb128 0x10
 1770 030c 79030000 		.4byte	.LASF47
 1771 0310 01       		.byte	0x1
 1772 0311 B102     		.2byte	0x2b1
 1773 0313 8C000000 		.4byte	0x8c
 1774 0317 02       		.uleb128 0x2
 1775 0318 91       		.byte	0x91
 1776 0319 72       		.sleb128 -14
 1777 031a 00       		.byte	0
 1778 031b 14       		.uleb128 0x14
 1779 031c 40020000 		.4byte	.LASF48
 1780 0320 01       		.byte	0x1
 1781 0321 D302     		.2byte	0x2d3
 1782 0323 00000000 		.4byte	.LFB15
 1783 0327 2C000000 		.4byte	.LFE15-.LFB15
 1784 032b 01       		.uleb128 0x1
 1785 032c 9C       		.byte	0x9c
 1786 032d 50030000 		.4byte	0x350
 1787 0331 10       		.uleb128 0x10
 1788 0332 5A030000 		.4byte	.LASF34
 1789 0336 01       		.byte	0x1
 1790 0337 D302     		.2byte	0x2d3
 1791 0339 81000000 		.4byte	0x81
 1792 033d 02       		.uleb128 0x2
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 48


 1793 033e 91       		.byte	0x91
 1794 033f 74       		.sleb128 -12
 1795 0340 10       		.uleb128 0x10
 1796 0341 07000000 		.4byte	.LASF49
 1797 0345 01       		.byte	0x1
 1798 0346 D302     		.2byte	0x2d3
 1799 0348 97000000 		.4byte	0x97
 1800 034c 02       		.uleb128 0x2
 1801 034d 91       		.byte	0x91
 1802 034e 70       		.sleb128 -16
 1803 034f 00       		.byte	0
 1804 0350 12       		.uleb128 0x12
 1805 0351 7E010000 		.4byte	.LASF50
 1806 0355 01       		.byte	0x1
 1807 0356 F402     		.2byte	0x2f4
 1808 0358 8C000000 		.4byte	0x8c
 1809 035c 00000000 		.4byte	.LFB16
 1810 0360 A4000000 		.4byte	.LFE16-.LFB16
 1811 0364 01       		.uleb128 0x1
 1812 0365 9C       		.byte	0x9c
 1813 0366 98030000 		.4byte	0x398
 1814 036a 10       		.uleb128 0x10
 1815 036b 5A030000 		.4byte	.LASF34
 1816 036f 01       		.byte	0x1
 1817 0370 F402     		.2byte	0x2f4
 1818 0372 81000000 		.4byte	0x81
 1819 0376 02       		.uleb128 0x2
 1820 0377 91       		.byte	0x91
 1821 0378 6C       		.sleb128 -20
 1822 0379 10       		.uleb128 0x10
 1823 037a 80030000 		.4byte	.LASF51
 1824 037e 01       		.byte	0x1
 1825 037f F402     		.2byte	0x2f4
 1826 0381 8C000000 		.4byte	0x8c
 1827 0385 02       		.uleb128 0x2
 1828 0386 91       		.byte	0x91
 1829 0387 6A       		.sleb128 -22
 1830 0388 11       		.uleb128 0x11
 1831 0389 B9010000 		.4byte	.LASF52
 1832 038d 01       		.byte	0x1
 1833 038e F602     		.2byte	0x2f6
 1834 0390 8C000000 		.4byte	0x8c
 1835 0394 02       		.uleb128 0x2
 1836 0395 91       		.byte	0x91
 1837 0396 76       		.sleb128 -10
 1838 0397 00       		.byte	0
 1839 0398 12       		.uleb128 0x12
 1840 0399 C4030000 		.4byte	.LASF53
 1841 039d 01       		.byte	0x1
 1842 039e 2A03     		.2byte	0x32a
 1843 03a0 97000000 		.4byte	0x97
 1844 03a4 00000000 		.4byte	.LFB17
 1845 03a8 98000000 		.4byte	.LFE17-.LFB17
 1846 03ac 01       		.uleb128 0x1
 1847 03ad 9C       		.byte	0x9c
 1848 03ae E0030000 		.4byte	0x3e0
 1849 03b2 10       		.uleb128 0x10
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 49


 1850 03b3 5A030000 		.4byte	.LASF34
 1851 03b7 01       		.byte	0x1
 1852 03b8 2A03     		.2byte	0x32a
 1853 03ba 81000000 		.4byte	0x81
 1854 03be 02       		.uleb128 0x2
 1855 03bf 91       		.byte	0x91
 1856 03c0 64       		.sleb128 -28
 1857 03c1 10       		.uleb128 0x10
 1858 03c2 80030000 		.4byte	.LASF51
 1859 03c6 01       		.byte	0x1
 1860 03c7 2A03     		.2byte	0x32a
 1861 03c9 8C000000 		.4byte	0x8c
 1862 03cd 02       		.uleb128 0x2
 1863 03ce 91       		.byte	0x91
 1864 03cf 62       		.sleb128 -30
 1865 03d0 11       		.uleb128 0x11
 1866 03d1 2F010000 		.4byte	.LASF54
 1867 03d5 01       		.byte	0x1
 1868 03d6 2C03     		.2byte	0x32c
 1869 03d8 BB000000 		.4byte	0xbb
 1870 03dc 02       		.uleb128 0x2
 1871 03dd 91       		.byte	0x91
 1872 03de 68       		.sleb128 -24
 1873 03df 00       		.byte	0
 1874 03e0 12       		.uleb128 0x12
 1875 03e1 64030000 		.4byte	.LASF55
 1876 03e5 01       		.byte	0x1
 1877 03e6 5703     		.2byte	0x357
 1878 03e8 A2000000 		.4byte	0xa2
 1879 03ec 00000000 		.4byte	.LFB18
 1880 03f0 80000000 		.4byte	.LFE18-.LFB18
 1881 03f4 01       		.uleb128 0x1
 1882 03f5 9C       		.byte	0x9c
 1883 03f6 28040000 		.4byte	0x428
 1884 03fa 10       		.uleb128 0x10
 1885 03fb 5A030000 		.4byte	.LASF34
 1886 03ff 01       		.byte	0x1
 1887 0400 5703     		.2byte	0x357
 1888 0402 81000000 		.4byte	0x81
 1889 0406 02       		.uleb128 0x2
 1890 0407 91       		.byte	0x91
 1891 0408 64       		.sleb128 -28
 1892 0409 10       		.uleb128 0x10
 1893 040a 80030000 		.4byte	.LASF51
 1894 040e 01       		.byte	0x1
 1895 040f 5703     		.2byte	0x357
 1896 0411 8C000000 		.4byte	0x8c
 1897 0415 02       		.uleb128 0x2
 1898 0416 91       		.byte	0x91
 1899 0417 62       		.sleb128 -30
 1900 0418 11       		.uleb128 0x11
 1901 0419 5B010000 		.4byte	.LASF56
 1902 041d 01       		.byte	0x1
 1903 041e 5903     		.2byte	0x359
 1904 0420 A2000000 		.4byte	0xa2
 1905 0424 02       		.uleb128 0x2
 1906 0425 91       		.byte	0x91
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 50


 1907 0426 6C       		.sleb128 -20
 1908 0427 00       		.byte	0
 1909 0428 0A       		.uleb128 0xa
 1910 0429 81000000 		.4byte	0x81
 1911 042d 38040000 		.4byte	0x438
 1912 0431 0B       		.uleb128 0xb
 1913 0432 DE000000 		.4byte	0xde
 1914 0436 02       		.byte	0x2
 1915 0437 00       		.byte	0
 1916 0438 09       		.uleb128 0x9
 1917 0439 2B020000 		.4byte	.LASF57
 1918 043d 01       		.byte	0x1
 1919 043e 21       		.byte	0x21
 1920 043f 49040000 		.4byte	0x449
 1921 0443 05       		.uleb128 0x5
 1922 0444 03       		.byte	0x3
 1923 0445 00000000 		.4byte	ADC_1_channelsConfig
 1924 0449 0C       		.uleb128 0xc
 1925 044a 28040000 		.4byte	0x428
 1926 044e 15       		.uleb128 0x15
 1927 044f DE000000 		.4byte	.LASF58
 1928 0453 01       		.byte	0x1
 1929 0454 18       		.byte	0x18
 1930 0455 6B000000 		.4byte	0x6b
 1931 0459 05       		.uleb128 0x5
 1932 045a 03       		.byte	0x3
 1933 045b 00000000 		.4byte	ADC_1_initVar
 1934 045f 0A       		.uleb128 0xa
 1935 0460 8C000000 		.4byte	0x8c
 1936 0464 6F040000 		.4byte	0x46f
 1937 0468 0B       		.uleb128 0xb
 1938 0469 DE000000 		.4byte	0xde
 1939 046d 02       		.byte	0x2
 1940 046e 00       		.byte	0
 1941 046f 15       		.uleb128 0x15
 1942 0470 E0020000 		.4byte	.LASF59
 1943 0474 01       		.byte	0x1
 1944 0475 19       		.byte	0x19
 1945 0476 80040000 		.4byte	0x480
 1946 047a 05       		.uleb128 0x5
 1947 047b 03       		.byte	0x3
 1948 047c 00000000 		.4byte	ADC_1_offset
 1949 0480 06       		.uleb128 0x6
 1950 0481 5F040000 		.4byte	0x45f
 1951 0485 0A       		.uleb128 0xa
 1952 0486 97000000 		.4byte	0x97
 1953 048a 95040000 		.4byte	0x495
 1954 048e 0B       		.uleb128 0xb
 1955 048f DE000000 		.4byte	0xde
 1956 0493 02       		.byte	0x2
 1957 0494 00       		.byte	0
 1958 0495 15       		.uleb128 0x15
 1959 0496 34030000 		.4byte	.LASF60
 1960 049a 01       		.byte	0x1
 1961 049b 1A       		.byte	0x1a
 1962 049c A6040000 		.4byte	0x4a6
 1963 04a0 05       		.uleb128 0x5
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 51


 1964 04a1 03       		.byte	0x3
 1965 04a2 00000000 		.4byte	ADC_1_countsPer10Volt
 1966 04a6 06       		.uleb128 0x6
 1967 04a7 85040000 		.4byte	0x485
 1968 04ab 00       		.byte	0
 1969              		.section	.debug_abbrev,"",%progbits
 1970              	.Ldebug_abbrev0:
 1971 0000 01       		.uleb128 0x1
 1972 0001 11       		.uleb128 0x11
 1973 0002 01       		.byte	0x1
 1974 0003 25       		.uleb128 0x25
 1975 0004 0E       		.uleb128 0xe
 1976 0005 13       		.uleb128 0x13
 1977 0006 0B       		.uleb128 0xb
 1978 0007 03       		.uleb128 0x3
 1979 0008 0E       		.uleb128 0xe
 1980 0009 1B       		.uleb128 0x1b
 1981 000a 0E       		.uleb128 0xe
 1982 000b 55       		.uleb128 0x55
 1983 000c 17       		.uleb128 0x17
 1984 000d 11       		.uleb128 0x11
 1985 000e 01       		.uleb128 0x1
 1986 000f 10       		.uleb128 0x10
 1987 0010 17       		.uleb128 0x17
 1988 0011 00       		.byte	0
 1989 0012 00       		.byte	0
 1990 0013 02       		.uleb128 0x2
 1991 0014 24       		.uleb128 0x24
 1992 0015 00       		.byte	0
 1993 0016 0B       		.uleb128 0xb
 1994 0017 0B       		.uleb128 0xb
 1995 0018 3E       		.uleb128 0x3e
 1996 0019 0B       		.uleb128 0xb
 1997 001a 03       		.uleb128 0x3
 1998 001b 0E       		.uleb128 0xe
 1999 001c 00       		.byte	0
 2000 001d 00       		.byte	0
 2001 001e 03       		.uleb128 0x3
 2002 001f 24       		.uleb128 0x24
 2003 0020 00       		.byte	0
 2004 0021 0B       		.uleb128 0xb
 2005 0022 0B       		.uleb128 0xb
 2006 0023 3E       		.uleb128 0x3e
 2007 0024 0B       		.uleb128 0xb
 2008 0025 03       		.uleb128 0x3
 2009 0026 08       		.uleb128 0x8
 2010 0027 00       		.byte	0
 2011 0028 00       		.byte	0
 2012 0029 04       		.uleb128 0x4
 2013 002a 16       		.uleb128 0x16
 2014 002b 00       		.byte	0
 2015 002c 03       		.uleb128 0x3
 2016 002d 0E       		.uleb128 0xe
 2017 002e 3A       		.uleb128 0x3a
 2018 002f 0B       		.uleb128 0xb
 2019 0030 3B       		.uleb128 0x3b
 2020 0031 0B       		.uleb128 0xb
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 52


 2021 0032 49       		.uleb128 0x49
 2022 0033 13       		.uleb128 0x13
 2023 0034 00       		.byte	0
 2024 0035 00       		.byte	0
 2025 0036 05       		.uleb128 0x5
 2026 0037 16       		.uleb128 0x16
 2027 0038 00       		.byte	0
 2028 0039 03       		.uleb128 0x3
 2029 003a 0E       		.uleb128 0xe
 2030 003b 3A       		.uleb128 0x3a
 2031 003c 0B       		.uleb128 0xb
 2032 003d 3B       		.uleb128 0x3b
 2033 003e 05       		.uleb128 0x5
 2034 003f 49       		.uleb128 0x49
 2035 0040 13       		.uleb128 0x13
 2036 0041 00       		.byte	0
 2037 0042 00       		.byte	0
 2038 0043 06       		.uleb128 0x6
 2039 0044 35       		.uleb128 0x35
 2040 0045 00       		.byte	0
 2041 0046 49       		.uleb128 0x49
 2042 0047 13       		.uleb128 0x13
 2043 0048 00       		.byte	0
 2044 0049 00       		.byte	0
 2045 004a 07       		.uleb128 0x7
 2046 004b 2E       		.uleb128 0x2e
 2047 004c 00       		.byte	0
 2048 004d 3F       		.uleb128 0x3f
 2049 004e 19       		.uleb128 0x19
 2050 004f 03       		.uleb128 0x3
 2051 0050 0E       		.uleb128 0xe
 2052 0051 3A       		.uleb128 0x3a
 2053 0052 0B       		.uleb128 0xb
 2054 0053 3B       		.uleb128 0x3b
 2055 0054 0B       		.uleb128 0xb
 2056 0055 27       		.uleb128 0x27
 2057 0056 19       		.uleb128 0x19
 2058 0057 11       		.uleb128 0x11
 2059 0058 01       		.uleb128 0x1
 2060 0059 12       		.uleb128 0x12
 2061 005a 06       		.uleb128 0x6
 2062 005b 40       		.uleb128 0x40
 2063 005c 18       		.uleb128 0x18
 2064 005d 9642     		.uleb128 0x2116
 2065 005f 19       		.uleb128 0x19
 2066 0060 00       		.byte	0
 2067 0061 00       		.byte	0
 2068 0062 08       		.uleb128 0x8
 2069 0063 2E       		.uleb128 0x2e
 2070 0064 01       		.byte	0x1
 2071 0065 3F       		.uleb128 0x3f
 2072 0066 19       		.uleb128 0x19
 2073 0067 03       		.uleb128 0x3
 2074 0068 0E       		.uleb128 0xe
 2075 0069 3A       		.uleb128 0x3a
 2076 006a 0B       		.uleb128 0xb
 2077 006b 3B       		.uleb128 0x3b
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 53


 2078 006c 0B       		.uleb128 0xb
 2079 006d 27       		.uleb128 0x27
 2080 006e 19       		.uleb128 0x19
 2081 006f 11       		.uleb128 0x11
 2082 0070 01       		.uleb128 0x1
 2083 0071 12       		.uleb128 0x12
 2084 0072 06       		.uleb128 0x6
 2085 0073 40       		.uleb128 0x40
 2086 0074 18       		.uleb128 0x18
 2087 0075 9642     		.uleb128 0x2116
 2088 0077 19       		.uleb128 0x19
 2089 0078 01       		.uleb128 0x1
 2090 0079 13       		.uleb128 0x13
 2091 007a 00       		.byte	0
 2092 007b 00       		.byte	0
 2093 007c 09       		.uleb128 0x9
 2094 007d 34       		.uleb128 0x34
 2095 007e 00       		.byte	0
 2096 007f 03       		.uleb128 0x3
 2097 0080 0E       		.uleb128 0xe
 2098 0081 3A       		.uleb128 0x3a
 2099 0082 0B       		.uleb128 0xb
 2100 0083 3B       		.uleb128 0x3b
 2101 0084 0B       		.uleb128 0xb
 2102 0085 49       		.uleb128 0x49
 2103 0086 13       		.uleb128 0x13
 2104 0087 02       		.uleb128 0x2
 2105 0088 18       		.uleb128 0x18
 2106 0089 00       		.byte	0
 2107 008a 00       		.byte	0
 2108 008b 0A       		.uleb128 0xa
 2109 008c 01       		.uleb128 0x1
 2110 008d 01       		.byte	0x1
 2111 008e 49       		.uleb128 0x49
 2112 008f 13       		.uleb128 0x13
 2113 0090 01       		.uleb128 0x1
 2114 0091 13       		.uleb128 0x13
 2115 0092 00       		.byte	0
 2116 0093 00       		.byte	0
 2117 0094 0B       		.uleb128 0xb
 2118 0095 21       		.uleb128 0x21
 2119 0096 00       		.byte	0
 2120 0097 49       		.uleb128 0x49
 2121 0098 13       		.uleb128 0x13
 2122 0099 2F       		.uleb128 0x2f
 2123 009a 0B       		.uleb128 0xb
 2124 009b 00       		.byte	0
 2125 009c 00       		.byte	0
 2126 009d 0C       		.uleb128 0xc
 2127 009e 26       		.uleb128 0x26
 2128 009f 00       		.byte	0
 2129 00a0 49       		.uleb128 0x49
 2130 00a1 13       		.uleb128 0x13
 2131 00a2 00       		.byte	0
 2132 00a3 00       		.byte	0
 2133 00a4 0D       		.uleb128 0xd
 2134 00a5 2E       		.uleb128 0x2e
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 54


 2135 00a6 00       		.byte	0
 2136 00a7 3F       		.uleb128 0x3f
 2137 00a8 19       		.uleb128 0x19
 2138 00a9 03       		.uleb128 0x3
 2139 00aa 0E       		.uleb128 0xe
 2140 00ab 3A       		.uleb128 0x3a
 2141 00ac 0B       		.uleb128 0xb
 2142 00ad 3B       		.uleb128 0x3b
 2143 00ae 05       		.uleb128 0x5
 2144 00af 27       		.uleb128 0x27
 2145 00b0 19       		.uleb128 0x19
 2146 00b1 11       		.uleb128 0x11
 2147 00b2 01       		.uleb128 0x1
 2148 00b3 12       		.uleb128 0x12
 2149 00b4 06       		.uleb128 0x6
 2150 00b5 40       		.uleb128 0x40
 2151 00b6 18       		.uleb128 0x18
 2152 00b7 9642     		.uleb128 0x2116
 2153 00b9 19       		.uleb128 0x19
 2154 00ba 00       		.byte	0
 2155 00bb 00       		.byte	0
 2156 00bc 0E       		.uleb128 0xe
 2157 00bd 2E       		.uleb128 0x2e
 2158 00be 00       		.byte	0
 2159 00bf 3F       		.uleb128 0x3f
 2160 00c0 19       		.uleb128 0x19
 2161 00c1 03       		.uleb128 0x3
 2162 00c2 0E       		.uleb128 0xe
 2163 00c3 3A       		.uleb128 0x3a
 2164 00c4 0B       		.uleb128 0xb
 2165 00c5 3B       		.uleb128 0x3b
 2166 00c6 05       		.uleb128 0x5
 2167 00c7 27       		.uleb128 0x27
 2168 00c8 19       		.uleb128 0x19
 2169 00c9 11       		.uleb128 0x11
 2170 00ca 01       		.uleb128 0x1
 2171 00cb 12       		.uleb128 0x12
 2172 00cc 06       		.uleb128 0x6
 2173 00cd 40       		.uleb128 0x40
 2174 00ce 18       		.uleb128 0x18
 2175 00cf 9742     		.uleb128 0x2117
 2176 00d1 19       		.uleb128 0x19
 2177 00d2 00       		.byte	0
 2178 00d3 00       		.byte	0
 2179 00d4 0F       		.uleb128 0xf
 2180 00d5 2E       		.uleb128 0x2e
 2181 00d6 01       		.byte	0x1
 2182 00d7 3F       		.uleb128 0x3f
 2183 00d8 19       		.uleb128 0x19
 2184 00d9 03       		.uleb128 0x3
 2185 00da 0E       		.uleb128 0xe
 2186 00db 3A       		.uleb128 0x3a
 2187 00dc 0B       		.uleb128 0xb
 2188 00dd 3B       		.uleb128 0x3b
 2189 00de 05       		.uleb128 0x5
 2190 00df 27       		.uleb128 0x27
 2191 00e0 19       		.uleb128 0x19
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 55


 2192 00e1 49       		.uleb128 0x49
 2193 00e2 13       		.uleb128 0x13
 2194 00e3 11       		.uleb128 0x11
 2195 00e4 01       		.uleb128 0x1
 2196 00e5 12       		.uleb128 0x12
 2197 00e6 06       		.uleb128 0x6
 2198 00e7 40       		.uleb128 0x40
 2199 00e8 18       		.uleb128 0x18
 2200 00e9 9742     		.uleb128 0x2117
 2201 00eb 19       		.uleb128 0x19
 2202 00ec 01       		.uleb128 0x1
 2203 00ed 13       		.uleb128 0x13
 2204 00ee 00       		.byte	0
 2205 00ef 00       		.byte	0
 2206 00f0 10       		.uleb128 0x10
 2207 00f1 05       		.uleb128 0x5
 2208 00f2 00       		.byte	0
 2209 00f3 03       		.uleb128 0x3
 2210 00f4 0E       		.uleb128 0xe
 2211 00f5 3A       		.uleb128 0x3a
 2212 00f6 0B       		.uleb128 0xb
 2213 00f7 3B       		.uleb128 0x3b
 2214 00f8 05       		.uleb128 0x5
 2215 00f9 49       		.uleb128 0x49
 2216 00fa 13       		.uleb128 0x13
 2217 00fb 02       		.uleb128 0x2
 2218 00fc 18       		.uleb128 0x18
 2219 00fd 00       		.byte	0
 2220 00fe 00       		.byte	0
 2221 00ff 11       		.uleb128 0x11
 2222 0100 34       		.uleb128 0x34
 2223 0101 00       		.byte	0
 2224 0102 03       		.uleb128 0x3
 2225 0103 0E       		.uleb128 0xe
 2226 0104 3A       		.uleb128 0x3a
 2227 0105 0B       		.uleb128 0xb
 2228 0106 3B       		.uleb128 0x3b
 2229 0107 05       		.uleb128 0x5
 2230 0108 49       		.uleb128 0x49
 2231 0109 13       		.uleb128 0x13
 2232 010a 02       		.uleb128 0x2
 2233 010b 18       		.uleb128 0x18
 2234 010c 00       		.byte	0
 2235 010d 00       		.byte	0
 2236 010e 12       		.uleb128 0x12
 2237 010f 2E       		.uleb128 0x2e
 2238 0110 01       		.byte	0x1
 2239 0111 3F       		.uleb128 0x3f
 2240 0112 19       		.uleb128 0x19
 2241 0113 03       		.uleb128 0x3
 2242 0114 0E       		.uleb128 0xe
 2243 0115 3A       		.uleb128 0x3a
 2244 0116 0B       		.uleb128 0xb
 2245 0117 3B       		.uleb128 0x3b
 2246 0118 05       		.uleb128 0x5
 2247 0119 27       		.uleb128 0x27
 2248 011a 19       		.uleb128 0x19
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 56


 2249 011b 49       		.uleb128 0x49
 2250 011c 13       		.uleb128 0x13
 2251 011d 11       		.uleb128 0x11
 2252 011e 01       		.uleb128 0x1
 2253 011f 12       		.uleb128 0x12
 2254 0120 06       		.uleb128 0x6
 2255 0121 40       		.uleb128 0x40
 2256 0122 18       		.uleb128 0x18
 2257 0123 9642     		.uleb128 0x2116
 2258 0125 19       		.uleb128 0x19
 2259 0126 01       		.uleb128 0x1
 2260 0127 13       		.uleb128 0x13
 2261 0128 00       		.byte	0
 2262 0129 00       		.byte	0
 2263 012a 13       		.uleb128 0x13
 2264 012b 2E       		.uleb128 0x2e
 2265 012c 01       		.byte	0x1
 2266 012d 3F       		.uleb128 0x3f
 2267 012e 19       		.uleb128 0x19
 2268 012f 03       		.uleb128 0x3
 2269 0130 0E       		.uleb128 0xe
 2270 0131 3A       		.uleb128 0x3a
 2271 0132 0B       		.uleb128 0xb
 2272 0133 3B       		.uleb128 0x3b
 2273 0134 05       		.uleb128 0x5
 2274 0135 27       		.uleb128 0x27
 2275 0136 19       		.uleb128 0x19
 2276 0137 11       		.uleb128 0x11
 2277 0138 01       		.uleb128 0x1
 2278 0139 12       		.uleb128 0x12
 2279 013a 06       		.uleb128 0x6
 2280 013b 40       		.uleb128 0x40
 2281 013c 18       		.uleb128 0x18
 2282 013d 9742     		.uleb128 0x2117
 2283 013f 19       		.uleb128 0x19
 2284 0140 01       		.uleb128 0x1
 2285 0141 13       		.uleb128 0x13
 2286 0142 00       		.byte	0
 2287 0143 00       		.byte	0
 2288 0144 14       		.uleb128 0x14
 2289 0145 2E       		.uleb128 0x2e
 2290 0146 01       		.byte	0x1
 2291 0147 3F       		.uleb128 0x3f
 2292 0148 19       		.uleb128 0x19
 2293 0149 03       		.uleb128 0x3
 2294 014a 0E       		.uleb128 0xe
 2295 014b 3A       		.uleb128 0x3a
 2296 014c 0B       		.uleb128 0xb
 2297 014d 3B       		.uleb128 0x3b
 2298 014e 05       		.uleb128 0x5
 2299 014f 27       		.uleb128 0x27
 2300 0150 19       		.uleb128 0x19
 2301 0151 11       		.uleb128 0x11
 2302 0152 01       		.uleb128 0x1
 2303 0153 12       		.uleb128 0x12
 2304 0154 06       		.uleb128 0x6
 2305 0155 40       		.uleb128 0x40
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 57


 2306 0156 18       		.uleb128 0x18
 2307 0157 9642     		.uleb128 0x2116
 2308 0159 19       		.uleb128 0x19
 2309 015a 01       		.uleb128 0x1
 2310 015b 13       		.uleb128 0x13
 2311 015c 00       		.byte	0
 2312 015d 00       		.byte	0
 2313 015e 15       		.uleb128 0x15
 2314 015f 34       		.uleb128 0x34
 2315 0160 00       		.byte	0
 2316 0161 03       		.uleb128 0x3
 2317 0162 0E       		.uleb128 0xe
 2318 0163 3A       		.uleb128 0x3a
 2319 0164 0B       		.uleb128 0xb
 2320 0165 3B       		.uleb128 0x3b
 2321 0166 0B       		.uleb128 0xb
 2322 0167 49       		.uleb128 0x49
 2323 0168 13       		.uleb128 0x13
 2324 0169 3F       		.uleb128 0x3f
 2325 016a 19       		.uleb128 0x19
 2326 016b 02       		.uleb128 0x2
 2327 016c 18       		.uleb128 0x18
 2328 016d 00       		.byte	0
 2329 016e 00       		.byte	0
 2330 016f 00       		.byte	0
 2331              		.section	.debug_aranges,"",%progbits
 2332 0000 AC000000 		.4byte	0xac
 2333 0004 0200     		.2byte	0x2
 2334 0006 00000000 		.4byte	.Ldebug_info0
 2335 000a 04       		.byte	0x4
 2336 000b 00       		.byte	0
 2337 000c 0000     		.2byte	0
 2338 000e 0000     		.2byte	0
 2339 0010 00000000 		.4byte	.LFB0
 2340 0014 24000000 		.4byte	.LFE0-.LFB0
 2341 0018 00000000 		.4byte	.LFB1
 2342 001c 58020000 		.4byte	.LFE1-.LFB1
 2343 0020 00000000 		.4byte	.LFB2
 2344 0024 28000000 		.4byte	.LFE2-.LFB2
 2345 0028 00000000 		.4byte	.LFB3
 2346 002c 18000000 		.4byte	.LFE3-.LFB3
 2347 0030 00000000 		.4byte	.LFB4
 2348 0034 1C000000 		.4byte	.LFE4-.LFB4
 2349 0038 00000000 		.4byte	.LFB5
 2350 003c 1C000000 		.4byte	.LFE5-.LFB5
 2351 0040 00000000 		.4byte	.LFB6
 2352 0044 7C000000 		.4byte	.LFE6-.LFB6
 2353 0048 00000000 		.4byte	.LFB7
 2354 004c 4C000000 		.4byte	.LFE7-.LFB7
 2355 0050 00000000 		.4byte	.LFB8
 2356 0054 1C000000 		.4byte	.LFE8-.LFB8
 2357 0058 00000000 		.4byte	.LFB9
 2358 005c 1C000000 		.4byte	.LFE9-.LFB9
 2359 0060 00000000 		.4byte	.LFB10
 2360 0064 30000000 		.4byte	.LFE10-.LFB10
 2361 0068 00000000 		.4byte	.LFB11
 2362 006c 2C000000 		.4byte	.LFE11-.LFB11
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 58


 2363 0070 00000000 		.4byte	.LFB12
 2364 0074 1C000000 		.4byte	.LFE12-.LFB12
 2365 0078 00000000 		.4byte	.LFB13
 2366 007c 1C000000 		.4byte	.LFE13-.LFB13
 2367 0080 00000000 		.4byte	.LFB14
 2368 0084 30000000 		.4byte	.LFE14-.LFB14
 2369 0088 00000000 		.4byte	.LFB15
 2370 008c 2C000000 		.4byte	.LFE15-.LFB15
 2371 0090 00000000 		.4byte	.LFB16
 2372 0094 A4000000 		.4byte	.LFE16-.LFB16
 2373 0098 00000000 		.4byte	.LFB17
 2374 009c 98000000 		.4byte	.LFE17-.LFB17
 2375 00a0 00000000 		.4byte	.LFB18
 2376 00a4 80000000 		.4byte	.LFE18-.LFB18
 2377 00a8 00000000 		.4byte	0
 2378 00ac 00000000 		.4byte	0
 2379              		.section	.debug_ranges,"",%progbits
 2380              	.Ldebug_ranges0:
 2381 0000 00000000 		.4byte	.LFB0
 2382 0004 24000000 		.4byte	.LFE0
 2383 0008 00000000 		.4byte	.LFB1
 2384 000c 58020000 		.4byte	.LFE1
 2385 0010 00000000 		.4byte	.LFB2
 2386 0014 28000000 		.4byte	.LFE2
 2387 0018 00000000 		.4byte	.LFB3
 2388 001c 18000000 		.4byte	.LFE3
 2389 0020 00000000 		.4byte	.LFB4
 2390 0024 1C000000 		.4byte	.LFE4
 2391 0028 00000000 		.4byte	.LFB5
 2392 002c 1C000000 		.4byte	.LFE5
 2393 0030 00000000 		.4byte	.LFB6
 2394 0034 7C000000 		.4byte	.LFE6
 2395 0038 00000000 		.4byte	.LFB7
 2396 003c 4C000000 		.4byte	.LFE7
 2397 0040 00000000 		.4byte	.LFB8
 2398 0044 1C000000 		.4byte	.LFE8
 2399 0048 00000000 		.4byte	.LFB9
 2400 004c 1C000000 		.4byte	.LFE9
 2401 0050 00000000 		.4byte	.LFB10
 2402 0054 30000000 		.4byte	.LFE10
 2403 0058 00000000 		.4byte	.LFB11
 2404 005c 2C000000 		.4byte	.LFE11
 2405 0060 00000000 		.4byte	.LFB12
 2406 0064 1C000000 		.4byte	.LFE12
 2407 0068 00000000 		.4byte	.LFB13
 2408 006c 1C000000 		.4byte	.LFE13
 2409 0070 00000000 		.4byte	.LFB14
 2410 0074 30000000 		.4byte	.LFE14
 2411 0078 00000000 		.4byte	.LFB15
 2412 007c 2C000000 		.4byte	.LFE15
 2413 0080 00000000 		.4byte	.LFB16
 2414 0084 A4000000 		.4byte	.LFE16
 2415 0088 00000000 		.4byte	.LFB17
 2416 008c 98000000 		.4byte	.LFE17
 2417 0090 00000000 		.4byte	.LFB18
 2418 0094 80000000 		.4byte	.LFE18
 2419 0098 00000000 		.4byte	0
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 59


 2420 009c 00000000 		.4byte	0
 2421              		.section	.debug_line,"",%progbits
 2422              	.Ldebug_line0:
 2423 0000 AC020000 		.section	.debug_str,"MS",%progbits,1
 2423      02004400 
 2423      00000201 
 2423      FB0E0D00 
 2423      01010101 
 2424              	.LASF10:
 2425 0000 75696E74 		.ascii	"uint16\000"
 2425      313600
 2426              	.LASF49:
 2427 0007 61646347 		.ascii	"adcGain\000"
 2427      61696E00 
 2428              	.LASF23:
 2429 000f 636F756E 		.ascii	"counts\000"
 2429      747300
 2430              	.LASF29:
 2431 0016 4144435F 		.ascii	"ADC_1_StopConvert\000"
 2431      315F5374 
 2431      6F70436F 
 2431      6E766572 
 2431      7400
 2432              	.LASF62:
 2433 0028 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_1.c\000"
 2433      6E657261 
 2433      7465645F 
 2433      536F7572 
 2433      63655C50 
 2434              	.LASF26:
 2435 0049 4144435F 		.ascii	"ADC_1_Enable\000"
 2435      315F456E 
 2435      61626C65 
 2435      00
 2436              	.LASF6:
 2437 0056 6C6F6E67 		.ascii	"long long int\000"
 2437      206C6F6E 
 2437      6720696E 
 2437      7400
 2438              	.LASF0:
 2439 0064 7369676E 		.ascii	"signed char\000"
 2439      65642063 
 2439      68617200 
 2440              	.LASF36:
 2441 0070 4144435F 		.ascii	"ADC_1_Init\000"
 2441      315F496E 
 2441      697400
 2442              	.LASF7:
 2443 007b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2443      206C6F6E 
 2443      6720756E 
 2443      7369676E 
 2443      65642069 
 2444              	.LASF27:
 2445 0092 4144435F 		.ascii	"ADC_1_Stop\000"
 2445      315F5374 
 2445      6F7000
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 60


 2446              	.LASF13:
 2447 009d 696E7433 		.ascii	"int32\000"
 2447      3200
 2448              	.LASF4:
 2449 00a3 6C6F6E67 		.ascii	"long int\000"
 2449      20696E74 
 2449      00
 2450              	.LASF9:
 2451 00ac 75696E74 		.ascii	"uint8\000"
 2451      3800
 2452              	.LASF16:
 2453 00b2 646F7562 		.ascii	"double\000"
 2453      6C6500
 2454              	.LASF37:
 2455 00b9 4144435F 		.ascii	"ADC_1_SetChanMask\000"
 2455      315F5365 
 2455      74436861 
 2455      6E4D6173 
 2455      6B00
 2456              	.LASF44:
 2457 00cb 4144435F 		.ascii	"ADC_1_SetLimitMask\000"
 2457      315F5365 
 2457      744C696D 
 2457      69744D61 
 2457      736B00
 2458              	.LASF58:
 2459 00de 4144435F 		.ascii	"ADC_1_initVar\000"
 2459      315F696E 
 2459      69745661 
 2459      7200
 2460              	.LASF11:
 2461 00ec 75696E74 		.ascii	"uint32\000"
 2461      333200
 2462              	.LASF38:
 2463 00f3 6D61736B 		.ascii	"mask\000"
 2463      00
 2464              	.LASF25:
 2465 00f8 4144435F 		.ascii	"ADC_1_Start\000"
 2465      315F5374 
 2465      61727400 
 2466              	.LASF39:
 2467 0104 4144435F 		.ascii	"ADC_1_EnableInjection\000"
 2467      315F456E 
 2467      61626C65 
 2467      496E6A65 
 2467      6374696F 
 2468              	.LASF33:
 2469 011a 7265744D 		.ascii	"retMode\000"
 2469      6F646500 
 2470              	.LASF8:
 2471 0122 756E7369 		.ascii	"unsigned int\000"
 2471      676E6564 
 2471      20696E74 
 2471      00
 2472              	.LASF54:
 2473 012f 75566F6C 		.ascii	"uVolts\000"
 2473      747300
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 61


 2474              	.LASF28:
 2475 0136 4144435F 		.ascii	"ADC_1_StartConvert\000"
 2475      315F5374 
 2475      61727443 
 2475      6F6E7665 
 2475      727400
 2476              	.LASF5:
 2477 0149 6C6F6E67 		.ascii	"long unsigned int\000"
 2477      20756E73 
 2477      69676E65 
 2477      6420696E 
 2477      7400
 2478              	.LASF56:
 2479 015b 766F6C74 		.ascii	"volts\000"
 2479      7300
 2480              	.LASF22:
 2481 0161 746D7052 		.ascii	"tmpRegVal\000"
 2481      65675661 
 2481      6C00
 2482              	.LASF3:
 2483 016b 73686F72 		.ascii	"short unsigned int\000"
 2483      7420756E 
 2483      7369676E 
 2483      65642069 
 2483      6E7400
 2484              	.LASF50:
 2485 017e 4144435F 		.ascii	"ADC_1_CountsTo_mVolts\000"
 2485      315F436F 
 2485      756E7473 
 2485      546F5F6D 
 2485      566F6C74 
 2486              	.LASF40:
 2487 0194 4144435F 		.ascii	"ADC_1_SetLowLimit\000"
 2487      315F5365 
 2487      744C6F77 
 2487      4C696D69 
 2487      7400
 2488              	.LASF42:
 2489 01a6 4144435F 		.ascii	"ADC_1_SetHighLimit\000"
 2489      315F5365 
 2489      74486967 
 2489      684C696D 
 2489      697400
 2490              	.LASF52:
 2491 01b9 6D566F6C 		.ascii	"mVolts\000"
 2491      747300
 2492              	.LASF63:
 2493 01c0 443A5C63 		.ascii	"D:\\customers\\patternagents\\PSoC4_Workshop\\proje"
 2493      7573746F 
 2493      6D657273 
 2493      5C706174 
 2493      7465726E 
 2494 01ef 6374735C 		.ascii	"cts\\LAB_FOUR\\LAB_FOUR.cydsn\000"
 2494      4C41425F 
 2494      464F5552 
 2494      5C4C4142 
 2494      5F464F55 
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 62


 2495              	.LASF19:
 2496 020b 72656733 		.ascii	"reg32\000"
 2496      3200
 2497              	.LASF14:
 2498 0211 666C6F61 		.ascii	"float32\000"
 2498      74333200 
 2499              	.LASF20:
 2500 0219 73697A65 		.ascii	"sizetype\000"
 2500      74797065 
 2500      00
 2501              	.LASF41:
 2502 0222 6C6F774C 		.ascii	"lowLimit\000"
 2502      696D6974 
 2502      00
 2503              	.LASF57:
 2504 022b 4144435F 		.ascii	"ADC_1_channelsConfig\000"
 2504      315F6368 
 2504      616E6E65 
 2504      6C73436F 
 2504      6E666967 
 2505              	.LASF48:
 2506 0240 4144435F 		.ascii	"ADC_1_SetGain\000"
 2506      315F5365 
 2506      74476169 
 2506      6E00
 2507              	.LASF17:
 2508 024e 696E7436 		.ascii	"int64\000"
 2508      3400
 2509              	.LASF15:
 2510 0254 666C6F61 		.ascii	"float\000"
 2510      7400
 2511              	.LASF61:
 2512 025a 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2512      4320342E 
 2512      382E3420 
 2512      32303134 
 2512      30353236 
 2513 028d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2513      20726576 
 2513      6973696F 
 2513      6E203231 
 2513      31333538 
 2514 02c0 30202D66 		.ascii	"0 -ffunction-sections\000"
 2514      66756E63 
 2514      74696F6E 
 2514      2D736563 
 2514      74696F6E 
 2515              	.LASF43:
 2516 02d6 68696768 		.ascii	"highLimit\000"
 2516      4C696D69 
 2516      7400
 2517              	.LASF59:
 2518 02e0 4144435F 		.ascii	"ADC_1_offset\000"
 2518      315F6F66 
 2518      66736574 
 2518      00
 2519              	.LASF31:
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 63


 2520 02ed 4144435F 		.ascii	"ADC_1_IsEndConversion\000"
 2520      315F4973 
 2520      456E6443 
 2520      6F6E7665 
 2520      7273696F 
 2521              	.LASF45:
 2522 0303 4144435F 		.ascii	"ADC_1_SetSatMask\000"
 2522      315F5365 
 2522      74536174 
 2522      4D61736B 
 2522      00
 2523              	.LASF1:
 2524 0314 756E7369 		.ascii	"unsigned char\000"
 2524      676E6564 
 2524      20636861 
 2524      7200
 2525              	.LASF32:
 2526 0322 4144435F 		.ascii	"ADC_1_GetResult16\000"
 2526      315F4765 
 2526      74526573 
 2526      756C7431 
 2526      3600
 2527              	.LASF60:
 2528 0334 4144435F 		.ascii	"ADC_1_countsPer10Volt\000"
 2528      315F636F 
 2528      756E7473 
 2528      50657231 
 2528      30566F6C 
 2529              	.LASF2:
 2530 034a 73686F72 		.ascii	"short int\000"
 2530      7420696E 
 2530      7400
 2531              	.LASF21:
 2532 0354 63684E75 		.ascii	"chNum\000"
 2532      6D00
 2533              	.LASF34:
 2534 035a 6368616E 		.ascii	"chan\000"
 2534      00
 2535              	.LASF18:
 2536 035f 63686172 		.ascii	"char\000"
 2536      00
 2537              	.LASF55:
 2538 0364 4144435F 		.ascii	"ADC_1_CountsTo_Volts\000"
 2538      315F436F 
 2538      756E7473 
 2538      546F5F56 
 2538      6F6C7473 
 2539              	.LASF47:
 2540 0379 6F666673 		.ascii	"offset\000"
 2540      657400
 2541              	.LASF51:
 2542 0380 61646343 		.ascii	"adcCounts\000"
 2542      6F756E74 
 2542      7300
 2543              	.LASF30:
 2544 038a 73746174 		.ascii	"status\000"
 2544      757300
ARM GAS  C:\Users\moxon\AppData\Local\Temp\ccC2kVtk.s 			page 64


 2545              	.LASF24:
 2546 0391 4144435F 		.ascii	"ADC_1_InputsPlacement\000"
 2546      315F496E 
 2546      70757473 
 2546      506C6163 
 2546      656D656E 
 2547              	.LASF46:
 2548 03a7 4144435F 		.ascii	"ADC_1_SetOffset\000"
 2548      315F5365 
 2548      744F6666 
 2548      73657400 
 2549              	.LASF12:
 2550 03b7 696E7431 		.ascii	"int16\000"
 2550      3600
 2551              	.LASF35:
 2552 03bd 72657375 		.ascii	"result\000"
 2552      6C7400
 2553              	.LASF53:
 2554 03c4 4144435F 		.ascii	"ADC_1_CountsTo_uVolts\000"
 2554      315F436F 
 2554      756E7473 
 2554      546F5F75 
 2554      566F6C74 
 2555              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
